
"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(
  """
  The identifier of the API preview that toggles this field.
  """
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """
  Abstract type of accepted global ID
  """
  abstractType: String

  """
  Accepted types of global IDs.
  """
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

"""
Autogenerated input type of AbortQueuedMigrations
"""
input AbortQueuedMigrationsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that is running the migrations.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of AbortQueuedMigrations
"""
type AbortQueuedMigrationsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AbortRepositoryMigration
"""
input AbortRepositoryMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration to be aborted.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["RepositoryMigration"])
}

"""
Autogenerated return type of AbortRepositoryMigration
"""
type AbortRepositoryMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the invitation being accepted
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The accepted topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation {
  """
  City
  """
  city: String

  """
  Country name
  """
  country: String

  """
  Country code
  """
  countryCode: String

  """
  Region name
  """
  region: String

  """
  Region or state code
  """
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType {
  """
  Indicates a team actor.
  """
  TEAM

  """
  Indicates a user actor.
  """
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  """
  The id of the assignable object to add assignees to.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to add as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the subject's comment connection.
  """
  commentEdge: IssueCommentEdge

  """
  The subject
  """
  subject: Node

  """
  The edge from the subject's timeline connection.
  """
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to comment on.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created discussion comment.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of AddDiscussionPollVote
"""
input AddDiscussionPollVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion poll option to vote for.
  """
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

"""
Autogenerated return type of AddDiscussionPollVote
"""
type AddDiscussionPollVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The poll option that a vote was added to.
  """
  pollOption: DiscussionPollOption
}

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
input AddEnterpriseOrganizationMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise which owns the organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization the users will be added to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The role to assign the users in the organization
  """
  role: OrganizationMemberRole

  """
  The IDs of the enterprise members to add.
  """
  userIds: [ID!]!
}

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
type AddEnterpriseOrganizationMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users who were added to the organization.
  """
  users: [User!]
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will receive the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of adding the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of the labels to add.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was labeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")

  """
  The note on the card.
  """
  note: String

  """
  The Node ID of the ProjectColumn.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload {
  """
  The edge from the ProjectColumn's card connection.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectColumn
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column.
  """
  name: String!

  """
  The Node ID of the project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the project's column connection.
  """
  columnEdge: ProjectColumnEdge

  """
  The project
  """
  project: Project
}

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
input AddProjectV2DraftIssueInput {
  """
  The IDs of the assignees of the draft issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body of the draft issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to add the draft issue to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access.
  """
  title: String!
}

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
type AddProjectV2DraftIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The draft issue added to the project.
  """
  projectItem: ProjectV2Item
}

"""
Autogenerated input type of AddProjectV2ItemById
"""
input AddProjectV2ItemByIdInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the Issue or Pull Request to add.
  """
  contentId: ID!
    @possibleTypes(concreteTypes: ["DraftIssue", "Issue", "PullRequest"], abstractType: "ProjectV2ItemContent")

  """
  The ID of the Project to add the item to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of AddProjectV2ItemById
"""
type AddProjectV2ItemByIdPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item added to the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput {
  """
  The text of the comment. This field is required

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the commit to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  commitOID: GitObjectID

  """
  The comment id to reply to.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])

  """
  The relative path of the file to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  path: String

  """
  The line index in the diff to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  position: Int

  """
  The node ID of the pull request reviewing

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: PullRequestReviewComment

  """
  The edge from the review's comment connection.
  """
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput {
  """
  The contents of the review body comment.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The review line comments.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning
  """
  comments: [DraftPullRequestReviewComment]

  """
  The commit OID the review pertains to.
  """
  commitOID: GitObjectID

  """
  The event to perform on the pull request review.
  """
  event: PullRequestReviewEvent

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The review line comment threads.
  """
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created pull request review.
  """
  pullRequestReview: PullRequestReview

  """
  The edge from the pull request's review connection.
  """
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput {
  """
  Body of the thread's first comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments.
  """
  line: Int

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created thread.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput {
  """
  The text of the reply.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending review to which the reply will belong.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The Node ID of the thread to which this reply is being written.
  """
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created reply.
  """
  comment: PullRequestReviewComment
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji to react with.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Starrable ID to star.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The votable subject.
  """
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL of the domain
  """
  domain: URI!

  """
  The ID of the owner to add the domain to
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was added.
  """
  domain: VerifiableDomain
}

"""
Represents an 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who added this Pull Request to the merge queue
  """
  enqueuer: User

  """
  The Node ID of the AddedToMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was added to.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the AddedToProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents an announcement banner.
"""
interface AnnouncementBanner {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean
}

"""
A GitHub App.
"""
type App implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the app.
  """
  description: String

  """
  The Node ID of the App object
  """
  id: ID!

  """
  The IP addresses of the app.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  A URL pointing to the app's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The name of the app.
  """
  name: String!

  """
  A slug based on the name of the app for use in URLs.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to the app's homepage.
  """
  url: URI!
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for approving deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to approve.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was approved.
  """
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectV2Item
"""
input ArchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to archive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ArchiveProjectV2Item
"""
type ArchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item archived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to mark as archived.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was marked as archived.
  """
  repository: Repository
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was assigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AssignedEvent object
  """
  id: ID!

  """
  Identifies the user who was assigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Types that can be assigned to issues.
"""
union Assignee = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection

  """
  The field to order Audit Logs by.
  """
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField {
  """
  Order audit log entries by timestamp
  """
  CREATED_AT
}

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who disabled auto-merge for this Pull Request
  """
  disabler: User

  """
  The Node ID of the AutoMergeDisabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event
  """
  pullRequest: PullRequest

  """
  The reason auto-merge was disabled
  """
  reason: String

  """
  The reason_code relating to why auto-merge was disabled
  """
  reasonCode: String
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoMergeEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest {
  """
  The email address of the author of this auto-merge request.
  """
  authorEmail: String

  """
  The commit message of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  commitBody: String

  """
  The commit title of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging
  """
  commitHeadline: String

  """
  When was this auto-merge request was enabled.
  """
  enabledAt: DateTime

  """
  The actor who created the auto-merge request.
  """
  enabledBy: Actor

  """
  The merge method of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  mergeMethod: PullRequestMergeMethod!

  """
  The pull request that this auto-merge request is set against.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (rebase) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoRebaseEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (squash) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoSquashEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeFailedEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeSucceededEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
A (potentially binary) string encoded using base64.
"""
scalar Base64String

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the BaseRefChangedEvent object
  """
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefForcePushedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Represents a Git blame.
"""
type Blame {
  """
  The list of ranges from a Git blame.
  """
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """
  Identifies the line author
  """
  commit: Commit!

  """
  The ending line for the range
  """
  endingLine: Int!

  """
  The starting line for the range
  """
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  Byte size of Blob object
  """
  byteSize: Int!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The Node ID of the Blob object
  """
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """
  Indicates whether the contents is truncated
  """
  isTruncated: Boolean!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  UTF8 text data or null if the Blob is binary
  """
  text: String
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable {
  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Bot object
  """
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this bot
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this bot
  """
  url: URI!
}

"""
Types which can be actors for `BranchActorAllowance` objects.
"""
union BranchActorAllowanceActor = App | Team | User

"""
Parameters to be used for the branch_name_pattern rule
"""
type BranchNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the branch_name_pattern rule
"""
input BranchNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConflictConnection!

  """
  A list of actors able to force push for this branch protection rule.
  """
  bypassForcePushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassForcePushAllowanceConnection!

  """
  A list of actors able to bypass PRs for this branch protection rule.
  """
  bypassPullRequestAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassPullRequestAllowanceConnection!

  """
  The actor who created this branch protection rule.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!

  """
  The Node ID of the BranchProtectionRule object
  """
  id: ID!

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean!

  """
  Repository refs that are protected by this rule
  """
  matchingRefs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters refs with query on name
    """
    query: String
  ): RefConnection!

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  A list push allowances for this branch protection rule.
  """
  pushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PushAllowanceConnection!

  """
  The repository associated with this branch protection rule.
  """
  repository: Repository

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean!

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  List of required status checks that must pass for commits to be accepted to matching branches.
  """
  requiredStatusChecks: [RequiredStatusCheckDescription!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean!

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean!

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean!

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean!

  """
  A list review dismissal allowances for this branch protection rule.
  """
  reviewDismissalAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  """
  Identifies the branch protection rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Identifies the conflicting branch protection rule.
  """
  conflictingBranchProtectionRule: BranchProtectionRule

  """
  Identifies the branch ref that has conflicting rules
  """
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleConflictEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRuleConflict]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input BulkSponsorship {
  """
  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Types that can represent a repository ruleset bypass actor.
"""
union BypassActor = App | Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type BypassForcePushAllowance implements Node {
  """
  The actor that can force push.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassForcePushAllowance object
  """
  id: ID!
}

"""
The connection type for BypassForcePushAllowance.
"""
type BypassForcePushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassForcePushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassForcePushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassForcePushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type BypassPullRequestAllowance implements Node {
  """
  The actor that can bypass.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassPullRequestAllowance object
  """
  id: ID!
}

"""
The connection type for BypassPullRequestAllowance.
"""
type BypassPullRequestAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassPullRequestAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassPullRequestAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassPullRequestAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassPullRequestAllowance
}

"""
The Common Vulnerability Scoring System
"""
type CVSS {
  """
  The CVSS score associated with this advisory
  """
  score: Float!

  """
  The CVSS vector string associated with this advisory
  """
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node {
  """
  The id of the CWE
  """
  cweId: String!

  """
  A detailed description of this CWE
  """
  description: String!

  """
  The Node ID of the CWE object
  """
  id: ID!

  """
  The name of this CWE
  """
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection {
  """
  A list of edges.
  """
  edges: [CWEEdge]

  """
  A list of nodes.
  """
  nodes: [CWE]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise administrator invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of CancelSponsorship
"""
input CancelSponsorshipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CancelSponsorship
"""
type CancelSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was being used at the time of cancellation.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """
  If set, the user status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """
  A short description of your current status.
  """
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Your updated status.
  """
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation {
  """
  The annotation's severity level.
  """
  annotationLevel: CheckAnnotationLevel

  """
  The path to the file that this annotation was made on.
  """
  blobUrl: URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The position of this annotation.
  """
  location: CheckAnnotationSpan!

  """
  The annotation's message.
  """
  message: String!

  """
  The path that this annotation was made on.
  """
  path: String!

  """
  Additional information about the annotation.
  """
  rawDetails: String

  """
  The annotation's title
  """
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection {
  """
  A list of edges.
  """
  edges: [CheckAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [CheckAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData {
  """
  Represents an annotation's information level
  """
  annotationLevel: CheckAnnotationLevel!

  """
  The location of the annotation
  """
  location: CheckAnnotationRange!

  """
  A short description of the feedback for these lines of code.
  """
  message: String!

  """
  The path of the file to add an annotation to.
  """
  path: String!

  """
  Details about this annotation.
  """
  rawDetails: String

  """
  The title that represents the annotation.
  """
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel {
  """
  An annotation indicating an inescapable error.
  """
  FAILURE

  """
  An annotation indicating some information.
  """
  NOTICE

  """
  An annotation indicating an ignorable error.
  """
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition {
  """
  Column number (1 indexed).
  """
  column: Int

  """
  Line number (1 indexed).
  """
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange {
  """
  The ending column of the range.
  """
  endColumn: Int

  """
  The ending line of the range.
  """
  endLine: Int!

  """
  The starting column of the range.
  """
  startColumn: Int

  """
  The starting line of the range.
  """
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan {
  """
  End position (inclusive).
  """
  end: CheckAnnotationPosition!

  """
  Start position (inclusive).
  """
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  """
  The check suite or run requires action.
  """
  ACTION_REQUIRED

  """
  The check suite or run has been cancelled.
  """
  CANCELLED

  """
  The check suite or run has failed.
  """
  FAILURE

  """
  The check suite or run was neutral.
  """
  NEUTRAL

  """
  The check suite or run was skipped.
  """
  SKIPPED

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check suite or run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check suite or run has succeeded.
  """
  SUCCESS

  """
  The check suite or run has timed out.
  """
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  """
  The check run's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckAnnotationConnection

  """
  The check suite that this run is a part of.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the check run was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check run.
  """
  conclusion: CheckConclusionState

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The corresponding deployment for this job, if any
  """
  deployment: Deployment

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: URI

  """
  A reference for the check run on the integrator's system.
  """
  externalId: String

  """
  The Node ID of the CheckRun object
  """
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The name of the check for this check run.
  """
  name: String!

  """
  Information about a pending deployment, if any, in this check run
  """
  pendingDeploymentRequest: DeploymentRequest

  """
  The permalink to the check run summary.
  """
  permalink: URI!

  """
  The repository associated with this check run.
  """
  repository: Repository!

  """
  The HTTP path for this check run.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the check run was started.
  """
  startedAt: DateTime

  """
  The current status of the check run.
  """
  status: CheckStatusState!

  """
  The check run's steps
  """
  steps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Step number
    """
    number: Int
  ): CheckStepConnection

  """
  A string representing the check run's summary
  """
  summary: String

  """
  A string representing the check run's text
  """
  text: String

  """
  A string representing the check run
  """
  title: String

  """
  The HTTP URL for this check run.
  """
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction {
  """
  A short explanation of what this action would do.
  """
  description: String!

  """
  A reference for the action on the integrator's system.
  """
  identifier: String!

  """
  The text to be displayed on a button in the web UI.
  """
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection {
  """
  A list of edges.
  """
  edges: [CheckRunEdge]

  """
  A list of nodes.
  """
  nodes: [CheckRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter {
  """
  Filters the check runs created by this application ID.
  """
  appId: Int

  """
  Filters the check runs by this name.
  """
  checkName: String

  """
  Filters the check runs by this type.
  """
  checkType: CheckRunType

  """
  Filters the check runs by these conclusions.
  """
  conclusions: [CheckConclusionState!]

  """
  Filters the check runs by this status. Superceded by statuses.
  """
  status: CheckStatusState

  """
  Filters the check runs by this status. Overrides status.
  """
  statuses: [CheckStatusState!]
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput {
  """
  The annotations that are made as part of the check run.
  """
  annotations: [CheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [CheckRunOutputImage!]

  """
  The summary of the check run (supports Commonmark).
  """
  summary: String!

  """
  The details of the check run (supports Commonmark).
  """
  text: String

  """
  A title to provide for this check run.
  """
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage {
  """
  The alternative text for the image.
  """
  alt: String!

  """
  A short image description.
  """
  caption: String

  """
  The full URL of the image.
  """
  imageUrl: URI!
}

"""
The possible states of a check run in a status rollup.
"""
enum CheckRunState {
  """
  The check run requires action.
  """
  ACTION_REQUIRED

  """
  The check run has been cancelled.
  """
  CANCELLED

  """
  The check run has been completed.
  """
  COMPLETED

  """
  The check run has failed.
  """
  FAILURE

  """
  The check run is in progress.
  """
  IN_PROGRESS

  """
  The check run was neutral.
  """
  NEUTRAL

  """
  The check run is in pending state.
  """
  PENDING

  """
  The check run has been queued.
  """
  QUEUED

  """
  The check run was skipped.
  """
  SKIPPED

  """
  The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check run has succeeded.
  """
  SUCCESS

  """
  The check run has timed out.
  """
  TIMED_OUT

  """
  The check run is in waiting state.
  """
  WAITING
}

"""
Represents a count of the state of a check run.
"""
type CheckRunStateCount {
  """
  The number of check runs with this state.
  """
  count: Int!

  """
  The state of a check run.
  """
  state: CheckRunState!
}

"""
The possible types of check runs.
"""
enum CheckRunType {
  """
  Every check run available.
  """
  ALL

  """
  The latest check run.
  """
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run has been requested.
  """
  REQUESTED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
A single check step.
"""
type CheckStep {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The step's name.
  """
  name: String!

  """
  The index of the step in the list of steps of the parent check run.
  """
  number: Int!

  """
  Number of seconds to completion.
  """
  secondsToCompletion: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection {
  """
  A list of edges.
  """
  edges: [CheckStepEdge]

  """
  A list of nodes.
  """
  nodes: [CheckStep]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckStepEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node {
  """
  The GitHub App which created this check suite.
  """
  app: App

  """
  The name of the branch for this check suite.
  """
  branch: Ref

  """
  The check runs associated with a check suite.
  """
  checkRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check runs by this type.
    """
    filterBy: CheckRunFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckRunConnection

  """
  The commit for this check suite
  """
  commit: Commit!

  """
  The conclusion of this check suite.
  """
  conclusion: CheckConclusionState

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who triggered the check suite.
  """
  creator: User

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the CheckSuite object
  """
  id: ID!

  """
  A list of open pull requests matching the check suite.
  """
  matchingPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection

  """
  The push that triggered this check suite.
  """
  push: Push

  """
  The repository associated with this check suite.
  """
  repository: Repository!

  """
  The HTTP path for this check suite
  """
  resourcePath: URI!

  """
  The status of this check suite.
  """
  status: CheckStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this check suite
  """
  url: URI!

  """
  The workflow run associated with this check suite.
  """
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference {
  """
  The node ID of the application that owns the check suite.
  """
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection {
  """
  A list of edges.
  """
  edges: [CheckSuiteEdge]

  """
  A list of nodes.
  """
  nodes: [CheckSuite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter {
  """
  Filters the check suites created by this application ID.
  """
  appId: Int

  """
  Filters the check suites by this name.
  """
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to clear the labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlabeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
input ClearProjectV2ItemFieldValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to be cleared.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )

  """
  The ID of the item to be cleared.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
type ClearProjectV2ItemFieldValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput {
  """
  The description of the project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to clone the source project's workflows.
  """
  includeWorkflows: Boolean!

  """
  The name of the project.
  """
  name: String!

  """
  The visibility of the project, defaults to false (private).
  """
  public: Boolean

  """
  The source project to clone.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The owner ID to create the project under.
  """
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the JobStatus for populating cloned fields.
  """
  jobStatusId: String

  """
  The new cloned project.
  """
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The Node ID of the template repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Autogenerated input type of CloseDiscussion
"""
input CloseDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be closed.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The reason why the discussion is being closed.
  """
  reason: DiscussionCloseReason = RESOLVED
}

"""
Autogenerated return type of CloseDiscussion
"""
type CloseDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was closed.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be closed.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The reason the issue is to be closed.
  """
  stateReason: IssueClosedStateReason
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was closed.
  """
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be closed.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was closed.
  """
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was closed.
  """
  closable: Closable!

  """
  Object which triggered the creation of this event.
  """
  closer: Closer

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ClosedEvent object
  """
  id: ID!

  """
  The HTTP path for this closed event.
  """
  resourcePath: URI!

  """
  The reason the issue state was changed to closed.
  """
  stateReason: IssueStateReason

  """
  The HTTP URL for this closed event.
  """
  url: URI!
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node {
  """
  The body of the Code of Conduct
  """
  body: String

  """
  The Node ID of the CodeOfConduct object
  """
  id: ID!

  """
  The key for the Code of Conduct
  """
  key: String!

  """
  The formal name of the Code of Conduct
  """
  name: String!

  """
  The HTTP path for this Code of Conduct
  """
  resourcePath: URI

  """
  The HTTP URL for this Code of Conduct
  """
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  """
  All collaborators the authenticated user can see.
  """
  ALL

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """
  All outside collaborators of an organization-owned subject.
  """
  OUTSIDE
}

"""
Represents a comment.
"""
interface Comment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Comment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  """
  Author has been invited to collaborate on the repository.
  """
  COLLABORATOR

  """
  Author has previously committed to the repository.
  """
  CONTRIBUTOR

  """
  Author has not previously committed to GitHub.
  """
  FIRST_TIMER

  """
  Author has not previously committed to the repository.
  """
  FIRST_TIME_CONTRIBUTOR

  """
  Author is a placeholder for an unclaimed user.
  """
  MANNEQUIN

  """
  Author is a member of the organization that owns the repository.
  """
  MEMBER

  """
  Author has no association with the repository.
  """
  NONE

  """
  Author is the owner of the repository.
  """
  OWNER
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  """
  Unable to create comment because repository is archived.
  """
  ARCHIVED

  """
  You cannot update this comment
  """
  DENIED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """
  Unable to create comment because issue is locked.
  """
  LOCKED

  """
  You must be logged in to update this comment.
  """
  LOGIN_REQUIRED

  """
  Repository is under maintenance.
  """
  MAINTENANCE

  """
  At least one email address must be verified to update this comment.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user who authored the deleted comment.
  """
  deletedCommentAuthor: Actor

  """
  The Node ID of the CommentDeletedEvent object
  """
  id: ID!
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The number of additions in this commit.
  """
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection

  """
  Authorship details of the commit.
  """
  author: GitActor

  """
  Check if the committer and the author match.
  """
  authoredByCommitter: Boolean!

  """
  The datetime when this commit was authored.
  """
  authoredDate: DateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GitActorConnection!

  """
  Fetches `git blame` information.
  """
  blame(
    """
    The file whose Git blame information you want.
    """
    path: String!
  ): Blame!

  """
  We recommend using the `changedFilesIfAvailable` field instead of
  `changedFiles`, as `changedFiles` will cause your request to return an error
  if GitHub is unable to calculate the number of changed files.
  """
  changedFiles: Int!
    @deprecated(
      reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC."
    )

  """
  The number of changed files in this commit. If GitHub is unable to calculate
  the number of changed files (for example due to a timeout), this will return
  `null`. We recommend using this field instead of `changedFiles`.
  """
  changedFilesIfAvailable: Int

  """
  The check suites associated with a commit.
  """
  checkSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check suites by this type.
    """
    filterBy: CheckSuiteFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckSuiteConnection

  """
  Comments made on the commit.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The datetime when this commit was committed.
  """
  committedDate: DateTime!

  """
  Check if committed via GitHub web UI.
  """
  committedViaWeb: Boolean!

  """
  Committer details of the commit.
  """
  committer: GitActor

  """
  The number of deletions in this commit.
  """
  deletions: Int!

  """
  The deployments associated with a commit.
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection

  """
  The tree entry representing the file located at the given path.
  """
  file(
    """
    The path for the file
    """
    path: String!
  ): TreeEntry

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    Allows specifying a beginning time or date for fetching commits.
    """
    since: GitTimestamp

    """
    Allows specifying an ending time or date for fetching commits.
    """
    until: GitTimestamp
  ): CommitHistoryConnection!

  """
  The Node ID of the Commit object
  """
  id: ID!

  """
  The Git commit message
  """
  message: String!

  """
  The Git commit message body
  """
  messageBody: String!

  """
  The commit message body rendered to HTML.
  """
  messageBodyHTML: HTML!

  """
  The Git commit message headline
  """
  messageHeadline: String!

  """
  The commit message headline rendered to HTML.
  """
  messageHeadlineHTML: HTML!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The organization this commit was made on behalf of.
  """
  onBehalfOf: Organization

  """
  The parents of a commit.
  """
  parents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection!

  """
  The datetime when this commit was pushed.
  """
  pushedDate: DateTime @deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")

  """
  The Repository this commit belongs to
  """
  repository: Repository!

  """
  The HTTP path for this commit
  """
  resourcePath: URI!

  """
  Commit signing information, if present.
  """
  signature: GitSignature

  """
  Status information for this commit
  """
  status: Status

  """
  Check and Status rollup information for this commit.
  """
  statusCheckRollup: StatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """
  Commit's root Tree
  """
  tree: Tree!

  """
  The HTTP path for the tree of this commit
  """
  treeResourcePath: URI!

  """
  The HTTP URL for the tree of this commit
  """
  treeUrl: URI!

  """
  The HTTP URL for this commit
  """
  url: URI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]

  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
type CommitAuthorEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
input CommitAuthorEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the CommitComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the file path associated with the comment.
  """
  path: String

  """
  Identifies the line position associated with the comment.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this commit comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this commit comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection {
  """
  A list of edges.
  """
  edges: [CommitCommentEdge]

  """
  A list of nodes.
  """
  nodes: [CommitComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommitComment
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit

  """
  The Node ID of the CommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field by which to order commit contributions.
  """
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField {
  """
  Order commit contributions by how many commits they represent.
  """
  COMMIT_COUNT

  """
  Order commit contributions by when they were made.
  """
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository {
  """
  The commit contributions, each representing a day.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): CreatedCommitContributionConnection!

  """
  The repository in which the commits were made.
  """
  repository: Repository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: URI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A message to include with a new commit
"""
input CommitMessage {
  """
  The body of the message.
  """
  body: String

  """
  The headline of the message.
  """
  headline: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
type CommitMessagePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
input CommitMessagePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input CommittableBranch {
  """
  The unqualified name of the branch to append the commit to.
  """
  branchName: String

  """
  The Node ID of the Ref to be updated.
  """
  id: ID

  """
  The nameWithOwner of the repository to commit to.
  """
  repositoryNameWithOwner: String
}

"""
Parameters to be used for the committer_email_pattern rule
"""
type CommitterEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the committer_email_pattern rule
"""
input CommitterEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node {
  """
  The number of commits ahead of the base branch.
  """
  aheadBy: Int!

  """
  The base revision of this comparison.
  """
  baseTarget: GitObject!

  """
  The number of commits behind the base branch.
  """
  behindBy: Int!

  """
  The commits which compose this comparison.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComparisonCommitConnection!

  """
  The head revision of this comparison.
  """
  headTarget: GitObject!

  """
  The Node ID of the Comparison object
  """
  id: ID!

  """
  The status of this comparison.
  """
  status: ComparisonStatus!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection {
  """
  The total count of authors and co-authors across all commits.
  """
  authorCount: Int!

  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The status of a git comparison between two refs.
"""
enum ComparisonStatus {
  """
  The head ref is ahead of the base ref.
  """
  AHEAD

  """
  The head ref is behind the base ref.
  """
  BEHIND

  """
  The head ref is both ahead and behind of the base ref, indicating git history has diverged.
  """
  DIVERGED

  """
  The head ref and base ref are identical.
  """
  IDENTICAL
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was connected.
  """
  subject: ReferencedSubject!
}

"""
The Contributing Guidelines for a repository.
"""
type ContributingGuidelines {
  """
  The body of the Contributing Guidelines.
  """
  body: String

  """
  The HTTP path for the Contributing Guidelines.
  """
  resourcePath: URI

  """
  The HTTP URL for the Contributing Guidelines.
  """
  url: URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """
  A list of the months of contributions in this calendar.
  """
  months: [ContributionCalendarMonth!]!

  """
  The count of total contributions in the calendar.
  """
  totalContributions: Int!

  """
  A list of the weeks of contributions in this calendar.
  """
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """
  How many contributions were made by the user on this day.
  """
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: ContributionLevel!

  """
  The day this square represents.
  """
  date: Date!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth {
  """
  The date of the first day of this month.
  """
  firstDay: Date!

  """
  The name of the month.
  """
  name: String!

  """
  How many weeks started in this month.
  """
  totalWeeks: Int!

  """
  The year the month occurred in.
  """
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek {
  """
  The days of contributions in this week.
  """
  contributionDays: [ContributionCalendarDay!]!

  """
  The date of the earliest square in this week.
  """
  firstDay: Date!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel {
  """
  Lowest 25% of days of contributions.
  """
  FIRST_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE

  """
  No contributions occurred.
  """
  NONE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection {
  """
  Commit contributions made by the user, grouped by repository.
  """
  commitContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!

  """
  A calendar of this user's contributions on GitHub.
  """
  contributionCalendar: ContributionCalendar!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  """
  doesEndInCurrentMonth: Boolean!

  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date

  """
  The ending date and time of this collection.
  """
  endedAt: DateTime!

  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: CreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """
  Determine if there are any contributions in this collection.
  """
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """
  Whether or not the collector's time span is all within the same day.
  """
  isSingleDay: Boolean!

  """
  A list of issues the user opened.
  """
  issueContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  Issue contributions made by the user, grouped by repository.
  """
  issueContributionsByRepository(
    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: JoinedGitHubContribution

  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: ContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: ContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: CreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: CreatedPullRequestContribution

  """
  Pull request contributions made by the user.
  """
  pullRequestContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  Pull request contributions made by the user, grouped by repository.
  """
  pullRequestContributionsByRepository(
    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!

  """
  Pull request review contributions made by the user. Returns the most recently
  submitted review for each PR reviewed by the user.
  """
  pullRequestReviewContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first repository ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """
  The beginning date and time of this collection.
  """
  startedAt: DateTime!

  """
  How many commits were made by the user in this time span.
  """
  totalCommitContributions: Int!

  """
  How many issues the user opened.
  """
  totalIssueContributions(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull requests the user opened.
  """
  totalPullRequestContributions(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull request reviews the user left.
  """
  totalPullRequestReviewContributions: Int!

  """
  How many different repositories the user committed to.
  """
  totalRepositoriesWithContributedCommits: Int!

  """
  How many different repositories the user opened issues in.
  """
  totalRepositoriesWithContributedIssues(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many different repositories the user left pull request reviews in.
  """
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """
  How many different repositories the user opened pull requests in.
  """
  totalRepositoriesWithContributedPullRequests(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many repositories the user created.
  """
  totalRepositoryContributions(
    """
    Should the user's first repository ever be excluded from this count.
    """
    excludeFirst: Boolean = false
  ): Int!

  """
  The user who made the contributions in this collection.
  """
  user: User!
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput {
  """
  The body of the newly created issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to convert.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The ID of the repository to create the issue in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to convert to draft
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is now a draft.
  """
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConvertToDraftEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this convert to draft event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this convert to draft event.
  """
  url: URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ConvertedNoteToIssueEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
type ConvertedToDiscussionEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The discussion that the issue was converted into.
  """
  discussion: Discussion

  """
  The Node ID of the ConvertedToDiscussionEvent object
  """
  id: ID!
}

"""
Autogenerated input type of CopyProjectV2
"""
input CopyProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include draft issues in the new project
  """
  includeDraftIssues: Boolean = false

  """
  The owner ID of the new project.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The ID of the source Project to copy.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CopyProjectV2
"""
type CopyProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The copied project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the owner scoping the reattributable data.
  """
  ownerId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account owning the data to reattribute.
  """
  sourceId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account which may claim the data.
  """
  targetId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner scoping the reattributable data.
  """
  owner: Organization

  """
  The account owning the data to reattribute.
  """
  source: Claimable

  """
  The account which may claim the data.
  """
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean

  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]

  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String!

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  The list of required status checks
  """
  requiredStatusChecks: [RequiredStatusCheckInput!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The name of the check.
  """
  name: String!

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload {
  """
  The newly created check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload {
  """
  The newly created check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCommitOnBranch
"""
input CreateCommitOnBranchInput {
  """
  The Ref to be updated.  Must be a branch.
  """
  branch: CommittableBranch!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The git commit oid expected at the head of the branch prior to the commit
  """
  expectedHeadOid: GitObjectID!

  """
  A description of changes to files in this commit.
  """
  fileChanges: FileChanges

  """
  The commit message the be included with the commit.
  """
  message: CommitMessage!
}

"""
Autogenerated return type of CreateCommitOnBranch
"""
type CreateCommitOnBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new commit.
  """
  commit: Commit

  """
  The ref which has been updated to point to the new commit.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Short description of the deployment.
  """
  description: String = ""

  """
  Name for the target deployment environment.
  """
  environment: String = "production"

  """
  JSON payload with extra information about the deployment.
  """
  payload: String = "{}"

  """
  The node ID of the ref to be deployed.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]

  """
  Specifies a task to execute.
  """
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment.
  """
  deployment: Deployment
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the deployment.
  """
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])

  """
  A short description of the status. Maximum length of 140 characters.
  """
  description: String = ""

  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String

  """
  Sets the URL for accessing your environment.
  """
  environmentUrl: String = ""

  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""

  """
  The state of the deployment.
  """
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment status.
  """
  deploymentStatus: DeploymentStatus
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  """
  The body of the discussion.
  """
  body: String!

  """
  The id of the discussion category to associate with this discussion.
  """
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the repository on which to create the discussion.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just created.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput {
  """
  The logins for the administrators of the new organization.
  """
  adminLogins: [String!]!

  """
  The email used for sending billing receipts.
  """
  billingEmail: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise owning the new organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the new organization.
  """
  login: String!

  """
  The profile name of the new organization.
  """
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise that owns the created organization.
  """
  enterprise: Enterprise

  """
  The organization that was created.
  """
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the environment.
  """
  name: String!

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new or existing environment.
  """
  environment: Environment
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String

  """
  The ID of the owner for which to create the new IP allow list entry.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was created.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  The Node ID for the user assignee for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title for the issue.
  """
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new issue.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new label.
  """
  label: Label
}

"""
Autogenerated input type of CreateLinkedBranch
"""
input CreateLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to link to.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The name of the new branch. Defaults to issue number and title.
  """
  name: String

  """
  The commit SHA to base the new branch on.
  """
  oid: GitObjectID!

  """
  ID of the repository to create the branch in. Defaults to the issue repository.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLinkedBranch
"""
type CreateLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was linked to.
  """
  issue: Issue

  """
  The new branch issue reference.
  """
  linkedBranch: LinkedBranch
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String

  """
  The migration source name.
  """
  name: String!

  """
  The ID of the organization that will own the migration source.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: String
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created migration source.
  """
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String!

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the GitHub-provided template.
  """
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  project: Project
}

"""
Autogenerated input type of CreateProjectV2Field
"""
input CreateProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The data type of the field.
  """
  dataType: ProjectV2CustomFieldType!

  """
  The name of the field.
  """
  name: String!

  """
  The ID of the Project to create the field in.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
  """
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

"""
Autogenerated return type of CreateProjectV2Field
"""
type CreateProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of CreateProjectV2
"""
input CreateProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The repository to link the project to.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  The team to link the project to. The team will be granted read permissions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CreateProjectV2
"""
type CreateProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this pull request should be a draft.
  """
  draft: Boolean = false

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!

  """
  The Node ID of the head repository.
  """
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean = true

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the pull request.
  """
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """
  The GitObjectID that the new Ref shall target. Must point to a commit.
  """
  oid: GitObjectID!

  """
  The Node ID of the Repository to create the Ref in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created ref.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean = true

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean = false

  """
  The URL for a web page about this repository.
  """
  homepageUrl: URI

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
Autogenerated input type of CreateRepositoryRuleset
"""
input CreateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The set of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput!

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The name of the ruleset.
  """
  name: String!

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The global relay id of the source in which a new ruleset should be created in.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository"], abstractType: "RuleSource")

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of CreateRepositoryRuleset
"""
type CreateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of CreateSponsorsListing
"""
input CreateSponsorsListingInput {
  """
  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
  """
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted.
  """
  contactEmail: String

  """
  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information.
  """
  fiscalHostLogin: String

  """
  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified.
  """
  fiscallyHostedProjectProfileUrl: String

  """
  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported.
  """
  fullDescription: String

  """
  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization.
  """
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CreateSponsorsListing
"""
type CreateSponsorsListingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of CreateSponsorsTier
"""
input CreateSponsorsTierInput {
  """
  The value of the new tier in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
  """
  description: String!

  """
  Whether sponsorships using this tier should happen monthly/yearly or just once.
  """
  isRecurring: Boolean = true

  """
  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible.
  """
  publish: Boolean = false

  """
  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
  """
  repositoryName: String

  """
  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given.
  """
  repositoryOwnerLogin: String

  """
  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  Optional message new sponsors at this tier will receive.
  """
  welcomeMessage: String
}

"""
Autogenerated return type of CreateSponsorsTier
"""
type CreateSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new tier.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of CreateSponsorship
"""
input CreateSponsorshipInput {
  """
  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
  """
  amount: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
  """
  isRecurring: Boolean

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorable.
  """
  receiveEmails: Boolean = true

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
  """
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of CreateSponsorship
"""
type CreateSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The sponsorship that was started.
  """
  sponsorship: Sponsorship
}

"""
Autogenerated input type of CreateSponsorships
"""
input CreateSponsorshipsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorables.
  """
  receiveEmails: Boolean = false

  """
  The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
  """
  sponsorLogin: String!

  """
  The list of maintainers to sponsor and for how much apiece.
  """
  sponsorships: [BulkSponsorship!]!
}

"""
Autogenerated return type of CreateSponsorships
"""
type CreateSponsorshipsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users and organizations who received a sponsorship.
  """
  sponsorables: [Sponsorable!]
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput {
  """
  The content of the comment. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  teamDiscussionComment: TeamDiscussionComment
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput {
  """
  The content of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If true, restricts the visibility of this discussion to team members and
  organization owners. If false or not specified, allows any organization member
  to view this discussion.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  private: Boolean

  """
  The ID of the team to which the discussion belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  title: String
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  teamDiscussion: TeamDiscussion
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateUserList
"""
input CreateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean = false

  """
  The name of the new list
  """
  name: String!
}

"""
Autogenerated return type of CreateUserList
"""
type CreateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just created
  """
  list: UserList

  """
  The user who created the list
  """
  viewer: User
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution {
  """
  How many commits were made on this day to this repository by the user.
  """
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository the user made a commit in.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedCommitContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedCommitContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The issue that was opened.
  """
  issue: Issue!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedIssueContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedIssueContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request that was opened.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request the user reviewed.
  """
  pullRequest: PullRequest!

  """
  The review the user left on the pull request.
  """
  pullRequestReview: PullRequestReview!

  """
  The repository containing the pull request that the user reviewed.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestReviewContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestReviewContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository that was created.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedRepositoryContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedRepositoryContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the CrossReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies when the reference was made.
  """
  referencedAt: DateTime!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request to which the reference was made.
  """
  target: ReferencedSubject!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Checks if the target will be closed when the source is merged.
  """
  willCloseTarget: Boolean!
}

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The reason why the suggested topic is declined.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `reason` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  reason: TopicSuggestionDeclineReason

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The declined topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField {
  """
  Can read, write, and administrate repos by default
  """
  ADMIN

  """
  No access
  """
  NONE

  """
  Can read repos by default
  """
  READ

  """
  Can read and write repos by default
  """
  WRITE
}

"""
Entities that can be deleted.
"""
interface Deletable {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  """
  The global relay id of the branch protection rule to be deleted.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the deployment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node id of the discussion comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion comment that was just deleted.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the discussion to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just deleted.
  """
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the environment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to delete.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was deleted.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to delete.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the issue belonged to
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the label to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLinkedBranch
"""
input DeleteLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the linked branch
  """
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

"""
Autogenerated return type of DeleteLinkedBranch
"""
type DeleteLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue the linked branch was unlinked from.
  """
  issue: Issue
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the package version to be deleted.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the operation succeeded.
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput {
  """
  The id of the card to delete.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The column the deleted card was in.
  """
  column: ProjectColumn

  """
  The deleted card ID.
  """
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to delete.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted column ID.
  """
  deletedColumnId: ID

  """
  The project the deleted column was in.
  """
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository or organization the project was removed from.
  """
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectV2Field
"""
input DeleteProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to delete.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )
}

"""
Autogenerated return type of DeleteProjectV2Field
"""
type DeleteProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of DeleteProjectV2
"""
input DeleteProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to delete.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of DeleteProjectV2Item
"""
input DeleteProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be removed.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project from which the item should be removed.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of DeleteProjectV2Item
"""
type DeleteProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted item.
  """
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProjectV2
"""
type DeleteProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted Project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeleteProjectV2Workflow
"""
input DeleteProjectV2WorkflowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the workflow to be removed.
  """
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

"""
Autogenerated return type of DeleteProjectV2Workflow
"""
type DeleteProjectV2WorkflowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted workflow.
  """
  deletedWorkflowId: ID

  """
  The project the deleted workflow was in.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request review the deleted comment belonged to.
  """
  pullRequestReview: PullRequestReview

  """
  The deleted pull request review comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to delete.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the Ref to be deleted.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryRuleset
"""
input DeleteRepositoryRulesetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The global relay id of the repository ruleset to be deleted.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

"""
Autogenerated return type of DeleteRepositoryRuleset
"""
type DeleteRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteUserList
"""
input DeleteUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the list to delete.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
}

"""
Autogenerated return type of DeleteUserList
"""
type DeleteUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the list that will be deleted
  """
  user: User
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owning account from which the domain was deleted.
  """
  owner: VerifiableDomainOwner
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DemilestonedEvent object
  """
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!
}

"""
A Dependabot Update for a dependency in a repository
"""
type DependabotUpdate implements RepositoryNode {
  """
  The error from a dependency update
  """
  error: DependabotUpdateError

  """
  The associated pull request
  """
  pullRequest: PullRequest

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
An error produced from a Dependabot Update
"""
type DependabotUpdateError {
  """
  The body of the error
  """
  body: String!

  """
  The error code
  """
  errorType: String!

  """
  The title of the error
  """
  title: String!
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  """
  Does the dependency itself have dependencies?
  """
  hasDependencies: Boolean!

  """
  The original name of the package, as it appears in the manifest.
  """
  packageLabel: String!
    @deprecated(
      reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC."
    )

  """
  The dependency package manager
  """
  packageManager: String

  """
  The name of the package in the canonical form used by the package manager.
  """
  packageName: String!

  """
  The repository containing the package
  """
  repository: Repository

  """
  The dependency version requirements
  """
  requirements: String!
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphDependency
}

"""
The possible ecosystems of a dependency graph package.
"""
enum DependencyGraphEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node @preview(toggledBy: "hawkgirl-preview") {
  """
  Path to view the manifest file blob
  """
  blobPath: String!

  """
  A list of manifest dependencies
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyGraphDependencyConnection

  """
  The number of dependencies listed in the manifest
  """
  dependenciesCount: Int

  """
  Is the manifest too big to parse?
  """
  exceedsMaxSize: Boolean!

  """
  Fully qualified manifest filename
  """
  filename: String!

  """
  The Node ID of the DependencyGraphManifest object
  """
  id: ID!

  """
  Were we able to parse the manifest?
  """
  parseable: Boolean!

  """
  The repository containing the manifest
  """
  repository: Repository!
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphManifest
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DeployKey object
  """
  id: ID!

  """
  The deploy key.
  """
  key: String!

  """
  Whether or not the deploy key is read only.
  """
  readOnly: Boolean!

  """
  The deploy key title.
  """
  title: String!

  """
  Whether or not the deploy key has been verified.
  """
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  """
  A list of edges.
  """
  edges: [DeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [DeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment associated with the 'deployed' event.
  """
  deployment: Deployment!

  """
  The Node ID of the DeployedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The ref associated with the 'deployed' event.
  """
  ref: Ref
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node {
  """
  Identifies the commit sha of the deployment.
  """
  commit: Commit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment description.
  """
  description: String

  """
  The latest environment to which this deployment was made.
  """
  environment: String

  """
  The Node ID of the Deployment object
  """
  id: ID!

  """
  The latest environment to which this deployment was made.
  """
  latestEnvironment: String

  """
  The latest status of this deployment.
  """
  latestStatus: DeploymentStatus

  """
  The original environment to which this deployment was made.
  """
  originalEnvironment: String

  """
  Extra information that a deployment system might need.
  """
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: Ref

  """
  Identifies the repository associated with the deployment.
  """
  repository: Repository!

  """
  The current state of the deployment.
  """
  state: DeploymentState

  """
  A list of statuses associated with the deployment.
  """
  statuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentStatusConnection

  """
  The deployment task.
  """
  task: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for Deployment.
"""
type DeploymentConnection {
  """
  A list of edges.
  """
  edges: [DeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [Deployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The deployment status that updated the deployment environment.
  """
  deploymentStatus: DeploymentStatus!

  """
  The Node ID of the DeploymentEnvironmentChangedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order deployments by.
  """
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField {
  """
  Order collection by creation time
  """
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The timeout in minutes for this protection rule.
  """
  timeout: Int!

  """
  The type of protection rule.
  """
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [DeploymentProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType {
  """
  Required reviewers
  """
  REQUIRED_REVIEWERS

  """
  Wait timer
  """
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest {
  """
  Whether or not the current user can approve the deployment
  """
  currentUserCanApprove: Boolean!

  """
  The target environment of the deployment
  """
  environment: Environment!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimer: Int!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection {
  """
  A list of edges.
  """
  edges: [DeploymentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node {
  """
  The comment the user left.
  """
  comment: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The environments approved or rejected
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  The Node ID of the DeploymentReview object
  """
  id: ID!

  """
  The decision of the user.
  """
  state: DeploymentReviewState!

  """
  The user that reviewed the deployment.
  """
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState {
  """
  The deployment was approved.
  """
  APPROVED

  """
  The deployment was rejected.
  """
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState {
  """
  The pending deployment was not updated after 30 minutes.
  """
  ABANDONED

  """
  The deployment is currently active.
  """
  ACTIVE

  """
  An inactive transient deployment.
  """
  DESTROYED

  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment has queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the deployment associated with status.
  """
  deployment: Deployment!

  """
  Identifies the description of the deployment.
  """
  description: String

  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String @preview(toggledBy: "flash-preview")

  """
  Identifies the environment URL of the deployment.
  """
  environmentUrl: URI

  """
  The Node ID of the DeploymentStatus object
  """
  id: ID!

  """
  Identifies the log URL of the deployment.
  """
  logUrl: URI

  """
  Identifies the current state of the deployment.
  """
  state: DeploymentStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection {
  """
  A list of edges.
  """
  edges: [DeploymentStatusEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState {
  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment is queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Autogenerated input type of DequeuePullRequest
"""
input DequeuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pull request to be dequeued.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DequeuePullRequest
"""
type DequeuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry of the dequeued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  """
  The left side of the diff.
  """
  LEFT

  """
  The right side of the diff.
  """
  RIGHT
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to disable auto merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto merge was disabled on.
  """
  pullRequest: PullRequest
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DisconnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request from which the issue was disconnected.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was disconnected.
  """
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The comment chosen as this discussion's answer, if any.
  """
  answer: DiscussionComment

  """
  The time when a user chose this discussion's answer, if answered.
  """
  answerChosenAt: DateTime

  """
  The user who chose this discussion's answer, if answered.
  """
  answerChosenBy: Actor

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The main text of the discussion post.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The category for this discussion.
  """
  category: DiscussionCategory!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The replies to the discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Discussion object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Only return answered/unanswered discussions
  """
  isAnswered: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The number identifying this discussion within the repository.
  """
  number: Int!

  """
  The poll associated with this discussion, if one exists.
  """
  poll: DiscussionPoll

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The path for this discussion.
  """
  resourcePath: URI!

  """
  Identifies the reason for the discussion's state.
  """
  stateReason: DiscussionStateReason

  """
  The title of this discussion.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A description of this category.
  """
  description: String

  """
  An emoji representing this category.
  """
  emoji: String!

  """
  This category's emoji rendered as HTML.
  """
  emojiHTML: HTML!

  """
  The Node ID of the DiscussionCategory object
  """
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """
  The name of this category.
  """
  name: String!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The slug of this category.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionCategory
}

"""
The possible reasons for closing a discussion.
"""
enum DiscussionCloseReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
A comment on a discussion.
"""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The time when this replied-to comment was deleted
  """
  deletedAt: DateTime

  """
  The discussion this comment was created in
  """
  discussion: Discussion

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the DiscussionComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Has this comment been chosen as the answer of its discussion?
  """
  isAnswer: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The threaded replies to this comment.
  """
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  The discussion comment this comment is a reply to
  """
  replyTo: DiscussionComment

  """
  The path for this discussion comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can the current user mark this comment as an answer?
  """
  viewerCanMarkAsAnswer: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Can the current user unmark this comment as an answer?
  """
  viewerCanUnmarkAsAnswer: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionComment
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder {
  """
  The direction in which to order discussions by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussions.
  """
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField {
  """
  Order discussions by creation time.
  """
  CREATED_AT

  """
  Order discussions by most recent modification time.
  """
  UPDATED_AT
}

"""
A poll for a discussion.
"""
type DiscussionPoll implements Node {
  """
  The discussion that this poll belongs to.
  """
  discussion: Discussion

  """
  The Node ID of the DiscussionPoll object
  """
  id: ID!

  """
  The options for this poll.
  """
  options(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the options for the discussion poll.
    """
    orderBy: DiscussionPollOptionOrder = {field: AUTHORED_ORDER, direction: ASC}
  ): DiscussionPollOptionConnection

  """
  The question that is being asked by this poll.
  """
  question: String!

  """
  The total number of votes that have been cast for this poll.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has permission to vote in this poll.
  """
  viewerCanVote: Boolean!

  """
  Indicates if the viewer has voted for any option in this poll.
  """
  viewerHasVoted: Boolean!
}

"""
An option for a discussion poll.
"""
type DiscussionPollOption implements Node {
  """
  The Node ID of the DiscussionPollOption object
  """
  id: ID!

  """
  The text for this option.
  """
  option: String!

  """
  The discussion poll that this option belongs to.
  """
  poll: DiscussionPoll

  """
  The total number of votes that have been cast for this option.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has voted for this option in the poll.
  """
  viewerHasVoted: Boolean!
}

"""
The connection type for DiscussionPollOption.
"""
type DiscussionPollOptionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionPollOptionEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionPollOption]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionPollOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionPollOption
}

"""
Ordering options for discussion poll option connections.
"""
input DiscussionPollOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order poll options by.
  """
  field: DiscussionPollOptionOrderField!
}

"""
Properties by which discussion poll option connections can be ordered.
"""
enum DiscussionPollOptionOrderField {
  """
  Order poll options by the order that the poll author specified when creating the poll.
  """
  AUTHORED_ORDER

  """
  Order poll options by the number of votes it has.
  """
  VOTE_COUNT
}

"""
The possible states of a discussion.
"""
enum DiscussionState {
  """
  A discussion that has been closed
  """
  CLOSED

  """
  A discussion that is open
  """
  OPEN
}

"""
The possible state reasons of a discussion.
"""
enum DiscussionStateReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion was reopened
  """
  REOPENED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contents of the pull request review dismissal message.
  """
  message: String!

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
The possible reasons that a Dependabot alert was dismissed.
"""
enum DismissReason {
  """
  A fix has already been started
  """
  FIX_STARTED

  """
  This alert is inaccurate or incorrect
  """
  INACCURATE

  """
  Vulnerable code is not actually used
  """
  NOT_USED

  """
  No bandwidth to fix this
  """
  NO_BANDWIDTH

  """
  Risk is tolerable to this project
  """
  TOLERABLE_RISK
}

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
input DismissRepositoryVulnerabilityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reason the Dependabot alert is being dismissed.
  """
  dismissReason: DismissReason!

  """
  The Dependabot alert ID to dismiss.
  """
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: ["RepositoryVulnerabilityAlert"])
}

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
type DismissRepositoryVulnerabilityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Dependabot alert that was dismissed
  """
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

"""
A draft issue within a project.
"""
type DraftIssue implements Node {
  """
  A list of users to assigned to this draft issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The body of the draft issue.
  """
  body: String!

  """
  The body of the draft issue rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of the draft issue rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this draft issue.
  """
  creator: Actor

  """
  The Node ID of the DraftIssue object
  """
  id: ID!

  """
  List of items linked with the draft issue (currently draft issue can be linked to only one item).
  """
  projectV2Items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Projects that link to this draft issue (currently draft issue can be linked to only one project).
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  The title of the draft issue
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  Position in the file to leave a comment on.
  """
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored.
  """
  commitBody: String

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored.
  """
  commitHeadline: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored.
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to enable auto-merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto-merge was enabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnqueuePullRequest
"""
input EnqueuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  Add the pull request to the front of the queue.
  """
  jump: Boolean

  """
  The ID of the pull request to enqueue.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnqueuePullRequest
"""
type EnqueuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry for the enqueued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements AnnouncementBanner & Node {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A URL pointing to the enterprise's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The enterprise's billing email.
  """
  billingEmail: String

  """
  Enterprise billing information visible to enterprise billing managers.
  """
  billingInfo: EnterpriseBillingInfo

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the enterprise.
  """
  description: String

  """
  The description of the enterprise as HTML.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the Enterprise object
  """
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  A list of users who are members of this enterprise.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return members within the selected GitHub Enterprise deployment
    """
    deployment: EnterpriseUserDeployment

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for members returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization or server.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!

  """
  The name of the enterprise.
  """
  name: String!

  """
  A list of organizations that belong to this enterprise.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The viewer's role in an organization.
    """
    viewerOrganizationRole: RoleInOrganization
  ): OrganizationConnection!

  """
  Enterprise information visible to enterprise owners or enterprise owners'
  personal access tokens (classic) with read:enterprise or admin:enterprise scope.
  """
  ownerInfo: EnterpriseOwnerInfo

  """
  The HTTP path for this enterprise.
  """
  resourcePath: URI!

  """
  The URL-friendly identifier for the enterprise.
  """
  slug: String!

  """
  The HTTP URL for this enterprise.
  """
  url: URI!

  """
  Is the current viewer an admin of this enterprise?
  """
  viewerIsAdmin: Boolean!

  """
  The URL of the enterprise website.
  """
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email of the person who was invited to the enterprise.
  """
  email: String

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise!

  """
  The Node ID of the EnterpriseAdministratorInvitation object
  """
  id: ID!

  """
  The user who was invited to the enterprise.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseAdministratorInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise administrator invitations by.
  """
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField {
  """
  Order enterprise administrator member invitations by creation time
  """
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole {
  """
  Represents a billing manager of the enterprise account.
  """
  BILLING_MANAGER

  """
  Represents an owner of the enterprise account.
  """
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  """
  Members can fork a repository to an organization within this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS

  """
  Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS

  """
  Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
  """
  EVERYWHERE

  """
  Members can fork a repository only within the same organization (intra-org).
  """
  SAME_ORGANIZATION

  """
  Members can fork a repository to their user account or within the same organization.
  """
  SAME_ORGANIZATION_USER_ACCOUNTS

  """
  Members can fork a repository to their user account.
  """
  USER_ACCOUNTS
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo {
  """
  The number of licenseable users/emails across the enterprise.
  """
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """
  The bandwidth usage as a percentage of the bandwidth quota.
  """
  bandwidthUsagePercentage: Int!

  """
  The storage quota in GB for all organizations owned by the enterprise.
  """
  storageQuota: Float!

  """
  The storage usage in GB for all organizations owned by the enterprise.
  """
  storageUsage: Float!

  """
  The storage usage as a percentage of the storage quota.
  """
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """
  The total number of licenses allocated.
  """
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseEdge]

  """
  A list of nodes.
  """
  nodes: [Enterprise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE

  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue {
  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The connection type for OrganizationInvitation.
"""
type EnterpriseFailedInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseFailedInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the total count of unique users in the connection.
  """
  totalUniqueUserCount: Int!
}

"""
A failed invitation to be a member in an enterprise organization.
"""
type EnterpriseFailedInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the EnterpriseIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML identity provider.
  """
  issuer: String

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseMemberEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseMember
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise members by.
  """
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField {
  """
  Order enterprise members by creation time
  """
  CREATED_AT

  """
  Order enterprise members by login
  """
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Organization owners choose whether to allow members to create repositories.
  """
  NO_POLICY

  """
  Members will be able to create only private repositories.
  """
  PRIVATE

  """
  Members will be able to create only public repositories.
  """
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType {
  """
  Returns all enterprises in which the user is an admin.
  """
  ADMIN

  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL

  """
  Returns all enterprises in which the user is a billing manager.
  """
  BILLING_MANAGER

  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprises by.
  """
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField {
  """
  Order enterprises by name
  """
  NAME
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOutsideCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseOwnerInfo {
  """
  A list of all of the administrators for this enterprise.
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return administrators with this two-factor authentication status.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for administrators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The permission to find organizations for.
    """
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!

  """
  A list of domains owned by the enterprise. Visible to enterprise owners or
  enterprise owners' personal access tokens (classic) with admin:enterprise scope.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter whether or not the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter whether or not the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection!

  """
  Enterprise Server installations owned by the enterprise.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection!

  """
  A list of failed invitations in the enterprise.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  The attribute metadata as JSON
  """
  metadata: String

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The possible roles for enterprise membership.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  nodes: [EnterpriseServerInstallation]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The possible roles for enterprise membership.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  The attribute metadata as JSON
  """
  metadata: String

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  nodes: [EnterpriseServerInstallation]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Polar funding platform.
  """
  POLAR

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  POLAR

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The possible roles for enterprise membership.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  Find a project by number.
  """
  viewerCanDelete: Boolean!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  Identifies the state of the issue.
  """
  state: IssueState!

  """
  Identifies the reason for the issue state.
  """
  stateReason: IssueStateReason

  """
  A list of events, comments, commits, etc. associated with the issue.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): IssueTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the issue.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [IssueTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): IssueTimelineItemsConnection!

  """
  Identifies the issue title.
  """
  title: String!

  """
  Identifies the issue title rendered to HTML.
  """
  titleHTML: String!

  """
  A list of issues that track this issue
  """
  trackedInIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!

  """
  A list of issues tracked inside the current issue
  """
  trackedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!

  """
  The number of tracked issues for this issue
  """
  trackedIssuesCount(
    """
    Limit the count to tracked issues with the specified states.
    """
    states: [TrackedIssueStates]
  ): Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  SAML Identity attributes
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  metadata: String

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  nodes: [EnterpriseServerInstallation]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  commitUrl: URI!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  body: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

  """
  The suggested issue body.
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  IP addresses that service hooks are sent from
  """
  enterprise: Enterprise!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  lastEditedAt: DateTime

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  description: String

  """
  The Node ID of the Label object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Find a project by number.
  """
  id: ID!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  headRefName: String!

  """
  Find a project by number.
  """
  includesCreatedEdit: Boolean!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Can user react to this subject
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Indicates if the object can be reopened by the viewer.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type EnterpriseRepositoryInfo implements Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  SAML Identity attributes
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type ExternalIdentityAttribute {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  metadata: String

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  labelable: Labelable!
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type Language implements Node {
  """
  The color defined for the current language.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  viewerSubscription: SubscriptionState

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  The Node ID of the IpAllowListEntry object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  commitUrl: URI!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The template name.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  nodes: [EnterpriseServerInstallation]

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  cursor: String!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Polar funding platform.
  """
  POLAR

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  TIDELIFT
}

    """
    The role of the user in the installation.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  includesCreatedEdit: Boolean!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  URL to install the product to the viewer's account or organization.
  """
  installationUrl: URI

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The head ref is out of date.
  """
  BEHIND

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  milestone: Milestone

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  description: String

  """
  The Node ID of the Label object
  """
  description: String

  """
  The Node ID of the Label object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The template name.
  """
  number: Int!

  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  locked: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  name: String

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The migration source.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  title: String!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  publishedAt: DateTime

  """
  The migration source type.
  """
  reactionGroups: [ReactionGroup!]

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  NAME
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input Environments {
  """
  The migration has failed.
  """
  headRefName: String!

  """
  The migration has invalid credentials.
  """
  createdAt: DateTime!

  """
  The migration is in progress.
  """
  enterpriseUrl: URI

  """
  The migration has not started.
  """
  id: ID!

  """
  The migration needs to have its credentials validated.
  """
  viewerCanClose: Boolean!

  """
  The migration has been queued.
  """
  viewerCanDelete: Boolean!

  """
  The migration has succeeded.
  """
  viewerCanClose: Boolean!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  Check if the current viewer can delete this object.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
enum EnvironmentOrderField {
  """
  The migration flag to continue on error.
  """
  headRefName: String!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The migration source.
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  fullDatabaseId: BigInt

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  NAME
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  gist: Gist!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The migration has invalid credentials.
  """
  clientMutationId: String

  """
  The migration is in progress.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  The migration has not started.
  """
  clientMutationId: String

  """
  The migration needs to have its credentials validated.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The migration has been queued.
  """
  databaseId: Int

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  id: ID!
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  description: String

  """
  Identifies the due date of the milestone.
  """
  dueOn: DateTime

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  id: ID!

  """
  A list of issues associated with the milestone.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createBranchProtectionRule(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type LinkedBranch implements Node {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  id: ID!

  """
  The branch's ref.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  baseCommit: Commit

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The Node ID of the Label object
  """
  id: ID!

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  editor: Actor

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input LockLockableInput {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  fullDatabaseId: BigInt

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  failureReason: String

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  id: ID!

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  id: ID!

  """
  The migration source name.
  """
  nodes: [Mannequin]

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  pageInfo: PageInfo!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  totalCount: Int!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MannequinOrderField {
  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  CREATED_AT

  """
  The migration has invalid credentials.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The migration is in progress.
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  The migration has not started.
  """
  id: ID!

  """
  The migration needs to have its credentials validated.
  """
  organizationInvitation: OrganizationInvitation

  """
  The migration has been queued.
  """
  id: ID!

  """
  Sets whether or not an organization owner can make purchases.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  email: String

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  direction: OrderDirection!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  LOGIN
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  color: String

  """
  The name of the OAuth application.
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The HTTP path for the OAuth application
  """
  clientMutationId: String

  """
  The HTTP URL for the OAuth application
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The application URL of the OAuth application.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The callback URL of the OAuth application.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  pageInfo: PageInfo!

  """
  The HTTP path for the OAuth application
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  databaseId: Int

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  id: ID!

  """
  Canonical and duplicate belong to different repositories.
  """
  enterprise: Enterprise!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The rate limit of the OAuth application.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The state of the OAuth application.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The OAuth application was in the process of being deleted.
  """
  hidden: Boolean!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  id: ID!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  The suggested issue body.
  """
  cursor: String!

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  OPEN
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  howItWorksHTML: HTML!

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  clientMutationId: String

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Sets whether or not an organization owner can make purchases.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
enum IssueStateReason {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  An issue that has been closed as not planned
  """
  NOT_PLANNED

  """
  An issue that has been reopened
  """
  REOPENED
}

"""
A repository issue template.
"""
type IssueTemplate {
  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  about: String

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  body: String

  """
  The template filename.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
interface MemberStatusable {
  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  deleteTeamDiscussion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  deleteVerifiableDomain(
    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Disable auto merge on the given pull request
  """
  name: String!

  """
  The suggested issue title.
  """
  title: String
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  The name of the OAuth application.
  """
  nodes: [Mannequin]

  """
  The HTTP path for the OAuth application
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  The HTTP URL for the OAuth application
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  The application URL of the OAuth application.
  """
  enterpriseUrl: URI

  """
  The callback URL of the OAuth application.
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type IssueTimelineConnection {
  """
  The HTTP path for the OAuth application
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The HTTP URL for the OAuth application
  """
  edges: [IssueTimelineItemEdge]

  """
  A list of nodes.
  """
  nodes: [IssueTimelineItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  node: EnterpriseServerInstallation

  """
  The rate limit of the OAuth application.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The state of the OAuth application.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  clientMutationId: String

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  removeLabelsFromLabelable(
    """
    Parameters for RemoveLabelsFromLabelable
    """
    input: RemoveLabelsFromLabelableInput!
  ): RemoveLabelsFromLabelablePayload

  """
  Removes outside collaborator from all repositories in an organization.
  """
  removeOutsideCollaborator(
    """
    Parameters for RemoveOutsideCollaborator
    """
    input: RemoveOutsideCollaboratorInput!
  ): RemoveOutsideCollaboratorPayload

  """
  Removes a reaction from a subject.
  """
  removeReaction(
    """
    Parameters for RemoveReaction
    """
    input: RemoveReactionInput!
  ): RemoveReactionPayload

  """
  Removes a star from a Starrable.
  """
  removeStar(
    """
    Parameters for RemoveStar
    """
    input: RemoveStarInput!
  ): RemoveStarPayload

  """
  Remove an upvote to a discussion or discussion comment.
  """
  removeUpvote(
    """
    Parameters for RemoveUpvote
    """
    input: RemoveUpvoteInput!
  ): RemoveUpvotePayload

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  reopenIssue(
    """
    Parameters for ReopenIssue
    """
    input: ReopenIssueInput!
  ): ReopenIssuePayload

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  hostName: String!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Sets whether or not an organization owner can make purchases.
  """
  updateEnterpriseMembersCanMakePurchasesSetting(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user affected by the action
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  `true` if the object is locked
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Branches linked to this issue.
  """
  howItWorksHTML: HTML!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The Node ID of the MarketplaceListing object
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The name of the Organization.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The name of the OAuth application.
  """
  BLANK

  """
  The HTTP path for the OAuth application
  """
  PR_BODY

  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MarkPullRequestReadyForReviewInput {
  """
  `true` if the object is locked
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Polar funding platform.
  """
  POLAR

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  A brief description of this label.
  """
  description: String

  """
  The application URL of the OAuth application.
  """
  databaseId: String

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The HTTP path for the OAuth application
  """
  repository: Repository

  """
  The HTTP URL for the OAuth application
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  checkResponseTimeout: Int

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  jump: Boolean!

  """
  The state of the OAuth application.
  """
  mergeQueue: MergeQueue

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  OWNER

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  The migration source type.
  """
  databaseId: Int

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  databaseId: Int

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the Environment object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  includesCreatedEdit: Boolean!

  """
  The migration has invalid credentials.
  """
  isMinimized: Boolean!

  """
  The migration is in progress.
  """
  lastEditedAt: DateTime

  """
  The migration has not started.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  id: ID!

"""
Represents a member feature request notification
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  createdAt: PreciseDateTime!

  """
  The user affected by the action
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Identifies the label associated with the 'labeled' event.
  """
  label: Label!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Can user react to this subject
  """
  color: String

  """
  The Node ID of the Language object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The Node ID of the License object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The name of the Organization.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  hidden: Boolean!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  action: String!

  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  editor: Actor

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Create a new pull request
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  databaseId: Int

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The name of the OAuth application.
  """
  cursor: String!

  """
  The HTTP path for the OAuth application
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  The HTTP URL for the OAuth application
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  Default to the pull request's body.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Marks a pull request ready for review.
  """
  url: URI!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  The HTTP path for the OAuth application
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The HTTP URL for the OAuth application
  """
  baseCommit: Commit

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  headCommit: Commit

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  mergeQueue: MergeQueue

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  position: Int!

  """
  The user affected by the action
  """
  solo: Boolean!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  LOCKED

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  MERGEABLE

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  QUEUED

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  UNMERGEABLE
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  ADMIN

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  email: String

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  id: ID!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  The name of the Organization.
  """
  node: LinkedBranch
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  edges: [MannequinEdge]

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Sets whether or not an organization owner can make purchases.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Creates a repository link for a project.
  """
  LOGIN
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input LinkProjectV2ToRepositoryInput {
  """
  The migration flag to continue on error.
  """
  clientMutationId: String

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Whether the given account is sponsoring this user/organization.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  id: ID!

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The migration state.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  projectV2: ProjectV2
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  FAILED

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The migration is in progress.
  """
  MERGE_MESSAGE

  """
  The migration has not started.
  """
  PR_TITLE
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The migration needs to have its credentials validated.
  """
  guid: String!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  createdAt: DateTime!

  """
  The migration has succeeded.
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  description: String

  """
  The Node ID of the Label object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  The HTTP URL for the OAuth application
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  editor: Actor

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  duplicate: IssueOrPullRequest

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  dueOn: DateTime

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  startRepositoryMigration(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  id: ID!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  Find a project by number.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  resourcePath: URI!

  """
  The HTTP path for the OAuth application
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  The HTTP URL for the OAuth application
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  The HTTP URL for the OAuth application
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The HTTP path listing organization's projects
  """
  minimumEntriesToMerge: Int

  """
  The application URL of the OAuth application.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The callback URL of the OAuth application.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  enqueuedAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  enqueuer: Actor!

  """
  The HTTP URL for the OAuth application
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  The rate limit of the OAuth application.
  """
  edges: [MergeQueueEntryEdge]

  """
  The state of the OAuth application.
  """
  nodes: [MergeQueueEntry]

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Sets whether or not an organization owner can make purchases.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The state of an OAuth application when it was created.
"""
enum MergeQueueEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  AWAITING_CHECKS

  """
  The OAuth application was in the process of being deleted.
  """
  LOCKED

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  MERGEABLE

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  id: ID!

  """
  The branch's ref.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  createdAt: PreciseDateTime!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  nodes: [Mannequin]

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the given account is sponsoring this user/organization.
  """
  id: ID!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  failureReason: String

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  id: ID!

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  howItWorksHTML: HTML!

  """
  Updates an existing user list.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The migration source type.
  """
  metadata: String

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Adds a support entitlement to an enterprise member.
  """
  createdAt: DateTime!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
input MarkPullRequestReadyForReviewInput {
  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The HTTP URL for the OAuth application
  """
  pageInfo: PageInfo!

  """
  The migration has been queued.
  """
  createdAt: DateTime!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The migration has succeeded.
  """
  id: ID!

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  duplicate: IssueOrPullRequest

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The application URL of the OAuth application.
  """
  howItWorks: String

  """
  The callback URL of the OAuth application.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  email: String

  """
  Find a project by number.
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  The state of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The state of an OAuth application when it was created.
"""
type MannequinConnection {
  """
  The HTTP path listing organization's projects
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

"""
The connection type for EnterpriseServerInstallation.
"""
type MilestonedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  color: String

  """
  The Node ID of the Language object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  id: ID!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the total count of items in the connection.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Represents a member feature request notification
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  Create a repository ruleset
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  duplicate: IssueOrPullRequest

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the MarketplaceCategory object
  """
  enterpriseUrl: URI

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  createdAt: DateTime!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Remove a pull request from the merge queue.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Disable auto merge on the given pull request
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The user affected by the action
  """
  revertPullRequest(
    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  nodes: [LinkedBranch]

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  The user affected by the action
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  id: ID!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  cursor: String!

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createdAt: PreciseDateTime!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  databaseId: Int

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  regenerateEnterpriseIdentityProviderRecoveryCodes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The Node ID of the MergeQueue object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  repository: Repository

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  The HTTP URL for the OAuth application
  """
  url: URI!
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The name of the Organization.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The application URL of the OAuth application.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  The callback URL of the OAuth application.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
The possible organization invitation roles.
"""
enum OrganizationInvitationRole {
  """
  The user is invited to be an admin of the organization.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The user is invited to be a billing manager of the organization.
  """
  BILLING_MANAGER

  """
  The user is invited to be a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  The user's previous role will be reinstated.
  """
  REINSTATE
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The invitation was to an email address.
  """
  EMAIL

  """
  The invitation was to an existing user.
  """
  USER
}

"""
The connection type for User.
"""
type OrganizationMemberConnection {
  """
  A list of edges.
  """
  edges: [OrganizationMemberEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user within an organization.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  enqueuedAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  enqueuer: Actor!

  """
  The HTTP URL for the OAuth application
  """
  estimatedTimeToMerge: Int

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  The user affected by the action
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  mergeQueue: MergeQueue

  """
  The email address of the organization invitation.
  """
  email: String

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  solo: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  state: MergeQueueEntryState!
}

"""
The state of an OAuth application when it was created.
"""
type MergeQueueEntryConnection {
  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

    """
    Filter mannequins by login.
    """
    login: String

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  The OAuth application was in the process of being deleted.
  """
  edges: [MergeQueueEntryEdge]

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  nodes: [MergeQueueEntry]

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The template name.
  """
  closed: Boolean!

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  enterpriseUrl: URI

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  pageInfo: PageInfo!

  """
  The HTTP URL for the OAuth application
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The name of the Organization.
  """
  node: Mannequin
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Sets whether or not an organization owner can make purchases.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The Node ID of the MergedEvent object
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The field to order mannequins by.
  """
  databaseId: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The name of the OAuth application.
  """
  email: String

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  CREATED_AT

  """
  The migration state.
  """
  state: MigrationState!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  The migration source type.
  """
  clientMutationId: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The migration has not started.
  """
  NOT_STARTED

  """
  The migration needs to have its credentials validated.
  """
  fullDatabaseId: BigInt

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The name of the OAuth application.
  """
  closed: Boolean!

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: DateTime!

  """
  The corresponding operation type for the action
  """
  creator: Actor

  """
  The Organization associated with the Audit Entry.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The user affected by the action
  """
  number: Int!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  owner: ProjectV2Owner!

  """
  The HTTP path for the user.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The HTTP URL for the user.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  resourcePath: URI!

  """
  The user who initiated the action
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The IP address of the actor
  """
  title: String!

  """
  A readable representation of the actor's location
  """
  updatedAt: DateTime!

  """
  The username of the user who initiated the action
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The time the action was initiated
  """
  edges: [ProjectV2Edge]

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  nodes: [ProjectV2]

  """
  The name of the OAuth application.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The corresponding operation type for the action
  """
  createdAt: DateTime!

  """
  The Organization associated with the Audit Entry.
  """
  dataType: ProjectV2FieldType!

  """
  The name of the Organization.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The HTTP path for the organization
  """
  name: String!

  """
  The HTTP URL for the organization
  """
  project: ProjectV2!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The HTTP path for the user.
  """
  createdAt: DateTime!

  """
  The HTTP URL for the user.
  """
  dataType: ProjectV2FieldType!

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The user who initiated the action
  """
  name: String!

  """
  The IP address of the actor
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The HTTP path for the actor.
  """
  edges: [ProjectV2FieldEdge]

  """
  The HTTP URL for the actor.
  """
  nodes: [ProjectV2Field]

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The HTTP path for the OAuth application
  """
  ASSIGNEES

  """
  The HTTP URL for the OAuth application
  """
  DATE

  """
  Identifies the primary key from the database as a BigInt.
  """
  ITERATION

  """
  The Node ID of the PinnedIssue object
  """
  LABELS

  """
  The corresponding operation type for the action
  """
  LINKED_PULL_REQUESTS

  """
  The Organization associated with the Audit Entry.
  """
  MILESTONE

  """
  The name of the Organization.
  """
  NUMBER

  """
  The HTTP path for the organization
  """
  REPOSITORY

  """
  The HTTP URL for the organization
  """
  REVIEWERS

  """
  The user affected by the action
  """
  SINGLE_SELECT

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  TEXT

  """
  The HTTP path for the user.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The HTTP URL for the user.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The action name
  """
  content: ProjectV2ItemContent

  """
  The user who initiated the action
  """
  createdAt: DateTime!

  """
  The IP address of the actor
  """
  creator: Actor

  """
  A readable representation of the actor's location
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The HTTP path for the actor.
  """
  isArchived: Boolean!

  """
  The HTTP URL for the actor.
  """
  project: ProjectV2!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  type: ProjectV2ItemType!

  """
  The HTTP path for this enterprise.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The slug of the enterprise.
  """
  edges: [ProjectV2ItemEdge]

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  The HTTP URL for this enterprise.
  """
  nodes: [ProjectV2Item]

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The configuration for this merge queue
  """
  createdAt: DateTime!

  """
  The Node ID of the Milestone object
  """
  creator: Actor

  """
  Update a repository ruleset
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

    """
    Filter to external identities with the users userName/NameID attribute
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The actor who created the item.
  """
  MERGEABLE

  """
  The rate limit of the OAuth application.
  """
  QUEUED

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The action name
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The user who initiated the action
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The hovercard information for this issue
  """
  hovercard(
    """
    The role of the user in the installation.
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The OAuth application was in the process of being deleted.
  """
  enterpriseUrl: URI

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  id: ID!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  project: ProjectV2!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  cursor: String!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  edges: [ProjectV2FieldEdge]

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  gist: Gist!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Parameters for DequeuePullRequest
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the repository to link to the project.
  """
  project: ProjectV2!

  """
  A unique identifier for the client performing the mutation.
  """
  type: ProjectV2ItemType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
Properties by which enterprise owners can be ordered.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The organization's Twitter username.
  """
  email: String

  """
  The migration has succeeded.
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  oauthApplicationUrl: URI

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  userLogin: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
type PullRequestCommit implements Node & UniformResourceLocatable {
  """
  The Git commit object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The pull request this commit belongs to
  """
  The ordering direction.
  """
  actorUrl: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  id: ID!

  """
  The name of the workflow
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP URL for the checks of this pull request.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  closedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

"""
Audit log entry for a org.invite_member event.
"""
type PullRequestReviewComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The comment body of this review comment.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The comment body of this review comment rendered as plain text.
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment.
  """
  commit: Commit

  """
  Identifies when the comment was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the original commit associated with the comment.
  """
  originalCommit: Commit

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies when the comment body is outdated
  """
  outdated: Boolean!

  """
  The path to which the comment applies.
  """
  path: String!

  """
  The line index in the diff to which the comment applies.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
The state of an OAuth application when it was created.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  duplicate: IssueOrPullRequest

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    last: Int
  ): ProjectCardConnection!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the MentionedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  direction: OrderDirection!

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
The possible default commit messages for merges.
"""
interface PackageOwner {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
The possible default commit titles for merges.
"""
type PackageTag implements Node {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input LinkProjectV2ToTeamInput {
  """
  Sets whether or not an organization owner can make purchases.
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  gradientStopColors: [String!]!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  id: ID!

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProject(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Updates an existing user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  edges: [MergeQueueEntryEdge]

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Close an issue.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The expiration date of the announcement, if any
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  enterpriseUrl: URI

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  id: ID!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The name of the OAuth application.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  The HTTP path for the OAuth application
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  The HTTP URL for the OAuth application
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The application URL of the OAuth application.
  """
  field: EnvironmentOrderField!
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The callback URL of the OAuth application.
  """
  id: ID!

  """
  The branch's ref.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  The name of the OAuth application.
  """
  edges: [LinkedBranchEdge]

  """
  The HTTP path for the OAuth application
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  The HTTP URL for the OAuth application
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The rate limit of the OAuth application.
  """
  howItWorks: String

  """
  The state of the OAuth application.
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  id: ID!

"""
Autogenerated input type of LockLockable
"""
type ExternalIdentity implements Node {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  id: ID!

  """
  The OAuth application was in the process of being deleted.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The Node ID of the IpAllowListEntry object
  """
  editor: Actor

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  name: String!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  fullDatabaseId: BigInt

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  createdAt: PreciseDateTime!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The username to lookup the owner by.
    """
    login: String!
  ): RepositoryOwner

  """
  Lookup resource by a URL.
  """
  resource(
    """
    The URL.
    """
    url: URI!
  ): UniformResourceLocatable

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  createdAt: DateTime!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  digestMethodUrl: URI

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinConnection {
  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  The user affected by the action
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  The user affected by the action
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  Reopen a discussion.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Reopen a issue.
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  duplicate: IssueOrPullRequest

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  Find a project by number.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  The HTTP path listing organization's projects
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The ref name.
  """
  name: String!

  """
  The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  """
  prefix: String!

  """
  Branch protection rules that are viewable by non-admins
  """
  refUpdateRule: RefUpdateRule

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
Branch protection rules that are enforced on the viewer.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Unlinks a project from a repository.
  """
  closed: Boolean!

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createdAt: DateTime!

  """
  Represents member feature request notification title
  """
  creator: Actor

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
interface Minimizable {
  """
  The name of the Organization.
  """
  minimizedReason: String

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  number: Int!

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  owner: ProjectV2Owner!

  """
  The ID of the project to link to the team.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The project's readme.
  """
  readme: String

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Update a branch protection rule
  """
  resourcePath: URI!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The field to order enterprise owners by.
  """
  title: String!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  updatedAt: DateTime!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The email address of the organization invitation.
  """
  createdAt: DateTime!

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  name: String!

  """
  The organization invitation.
  """
  project: ProjectV2!

  """
  Sets whether or not an organization owner can make purchases.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  A list of edges.
  """
  createdAt: DateTime!

  """
  A list of nodes.
  """
  dataType: ProjectV2FieldType!

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  name: String!

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Identifies the primary key from the database as a BigInt.
  """
  edges: [ProjectV2FieldEdge]

  """
  Abort a repository migration queued or in progress.
  """
  nodes: [ProjectV2Field]

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The slug of the enterprise.
  """
  ASSIGNEES

  """
  The HTTP URL for this enterprise.
  """
  DATE

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  ITERATION

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  LABELS

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  LINKED_PULL_REQUESTS

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  MILESTONE

  """
  Updates an existing project.
  """
  NUMBER

  """
  Adds enterprise members to an organization within the enterprise.
  """
  REPOSITORY

  """
  Adds a support entitlement to an enterprise member.
  """
  REVIEWERS

  """
  Updates an existing project.
  """
  SINGLE_SELECT

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Update the collaborators on a team or a project
  """
  TEXT

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Default to the pull request's title.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The text of the announcement
  """
  content: ProjectV2ItemContent

  """
  The expiration date of the announcement, if any
  """
  createdAt: DateTime!

  """
  Whether the announcement can be dismissed by the user
  """
  creator: Actor

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  The time the action was initiated
  """
  isArchived: Boolean!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  project: ProjectV2!

  """
  The HTTP path for the OAuth application
  """
  type: ProjectV2ItemType!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Archives a ProjectV2Item
  """
  edges: [ProjectV2ItemEdge]

  """
  Marks a repository as archived.
  """
  nodes: [ProjectV2Item]

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  node: ProjectV2Item
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The rate limit of the OAuth application.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Creates a new team discussion.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The SAML provider's signature algorithm URL.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The actor who created the item.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The HTTP URL for the organization
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The user affected by the action
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Find a project by number.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  node: ProjectV2ItemFieldValue
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type ProjectV2ViewConnection {
  """
  Whether this pull request should jump the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MilestonedEvent object
  """
  nodes: [ProjectV2View]

  """
  The merge queue that this entry belongs to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  FAILED_VALIDATION

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  cursor: String!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  AWAITING_CHECKS

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The name of the root repository for this network.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createTeamDiscussion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The template filename.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  editor: Actor

  """
  The user affected by the action
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Check if the current viewer can delete this object.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Find a project by number.
  """
  user: User
}

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Deletes a verifiable domain.
  """
  id: ID!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the LabeledEvent object
  """
  databaseId: Int

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The name of the Organization.
  """
  email: String!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  PR_TITLE
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  entries(
    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  revokeEnterpriseOrganizationsMigratorRole(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Ordering options for sponsors returned from the connection.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Filters users with query on user name and login.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  QUEUED

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  The HTTP URL for the OAuth application
  """
  ALLGREEN

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  implementation: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  fullDatabaseId: BigInt

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  direction: OrderDirection!

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The SAML provider's issuer URL.
  """
  closed: Boolean!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  creator: Actor

  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The HTTP URL for the user.
  """
  number: Int!

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  owner: ProjectV2Owner!

  """
  The user who initiated the action
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  actorIp: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The username of the user who initiated the action
  """
  resourcePath: URI!

  """
  The user who created the invitation.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The HTTP URL for the actor.
  """
  title: String!

  """
  The time the action was initiated
  """
  updatedAt: DateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  A view of the project
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Finds and returns the Project according to the provided Project number.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  The HTTP path listing the repository's projects
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The name of the Organization.
  """
  edges: [ProjectV2Edge]

  """
  The HTTP path for the organization
  """
  nodes: [ProjectV2]

  """
  Identifies the date and time when the repository was last pushed to.
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  node: ProjectV2
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The text of the announcement
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The expiration date of the announcement, if any
  """
  dataType: ProjectV2FieldType!

  """
  Whether the announcement can be dismissed by the user
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  name: String!

  """
  Identifies the date and time when the organization was archived.
  """
  project: ProjectV2!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  dataType: ProjectV2FieldType!

  """
  The reason the organization migration failed.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The Node ID of the OrganizationMigration object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  name: String!

  """
  The name of the source organization to be migrated.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The Octoshift migration has failed.
  """
  edges: [ProjectV2FieldEdge]

  """
  The Octoshift migration has invalid credentials.
  """
  nodes: [ProjectV2Field]

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The Octoshift migration is performing pre repository migrations.
  """
  ASSIGNEES

  """
  The Octoshift migration has been queued.
  """
  DATE

  """
  The Octoshift org migration is performing repository migrations.
  """
  ITERATION

  """
  The Octoshift migration has succeeded.
  """
  LABELS

  """
  The HTTP path for the OAuth application
  """
  LINKED_PULL_REQUESTS

  """
  The HTTP URL for the OAuth application
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  NUMBER

  """
  The Organization associated with the Audit Entry.
  """
  REPOSITORY

  """
  The name of the Organization.
  """
  REVIEWERS

  """
  The HTTP path for the organization
  """
  SINGLE_SELECT

  """
  The HTTP URL for the organization
  """
  TEXT

  """
  The user affected by the action
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The HTTP path for the user.
  """
  content: ProjectV2ItemContent

  """
  The HTTP URL for the user.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  creator: Actor

  """
  The user who initiated the action
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The HTTP path for the actor.
  """
  isArchived: Boolean!

  """
  The HTTP URL for the actor.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The time the action was initiated
  """
  type: ProjectV2ItemType!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The Node ID of the PackageFile object
  """
  createdAt: DateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Disable auto merge on the given pull request
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type PullRequestTimelineItemsConnection {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  edges: [ProjectV2ItemFieldValueEdge]

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  pageInfo: PageInfo!

"""
Audit log entry for a org.enable_saml event.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The action name
  """
  action: String!

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Iteration field iteration settings for a project.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  The field in which to order projects by.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the LockedEvent object
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The suggested assignees.
  """
  createdAt: PreciseDateTime!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The description text of the option
  """
  description: String!

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type Reaction implements Node {
  """
  Identifies the emoji reaction.
  """
  content: ReactionContent!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  Finds and returns the Project according to the provided Project number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The HTTP path listing the repository's projects
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The time the action was initiated
  """
  edges: [ProjectV2ViewEdge]

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  nodes: [ProjectV2View]

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The name of the Organization.
  """
  organizationName: String

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  Identifies the date and time when the repository was last pushed to.
  """
  id: ID!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  databaseId: Int

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  id: ID!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  actor: AuditEntryActor

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ref
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The direction in which to order refs by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order refs by.
  """
  field: RefOrderField!
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  oauthApplicationUrl: URI

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  organization: Organization

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
Branch protection rules that are enforced on the viewer.
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Ordering options for results returned from the connection.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  fullDatabaseId: BigInt

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type ProjectV2FieldEdge {
  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  NUMBER

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Unsubscribes from notifications
  """
  content: ProjectV2ItemContent

  """
  Update a branch protection rule
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  state: PullRequestState!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The html name of the selected single select option.
  """
  nameHTML: String

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The HTTP path listing organization's teams
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The HTTP URL listing organization's teams
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The organization's Twitter username.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
type PullRequestCommit implements Node & UniformResourceLocatable {
  """
  The Git commit object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
input LinkRepositoryToProjectInput {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  issuerUrl: URI

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The Octoshift migration is performing pre repository migrations.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The user affected by the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Delete a project field.
  """
  nodes: [ProjectV2View]

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type ProjectV2ViewEdge {
  """
  Deletes a pull request review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  archivedAt: DateTime

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  organization: Organization

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  action: String!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
The connection type for PushAllowance.
"""
type PushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [PushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [PushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PushAllowance
}

"""
The query root of GitHub's GraphQL interface.
"""
type Query {
  """
  Look up a code of conduct by its key
  """
  codeOfConduct(
    """
    The code of conduct's key
    """
    key: String!
  ): CodeOfConduct

  """
  Look up a code of conduct by its key
  """
  codesOfConduct: [CodeOfConduct]

  """
  Look up an enterprise by URL slug.
  """
  enterprise(
    """
    The enterprise invitation token.
    """
    invitationToken: String

    """
    The enterprise URL slug.
    """
    slug: String!
  ): Enterprise

  """
  Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  """
  enterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    after: String

  """
  Deletes a repository link from a project.
  """
  viewerSubscription: SubscriptionState

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration is in progress.
  """
  viewerCanReopen: Boolean!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Unmark a project as a template.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  BLANK

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of MergePullRequest
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP path for the OAuth application
  """
  url: URI!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP URL for the OAuth application
  """
  UNKNOWN
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Identifies the actor who performed the event.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The name of the OAuth application.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The commit the comments were made on.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  inProgressPercentage: Float!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Branch protection rules that are enforced on the viewer.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The HTTP path for the organization
  """
  closed: Boolean!

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  createdAt: DateTime!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  creator: Actor

  """
  The HTTP path for the user.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

"""
Audit log entry for a org.remove_billing_manager event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The action name
  """
  number: Int!

  """
  Identifies the date and time when the organization was archived.
  """
  owner: ProjectV2Owner!

  """
  Audit log entries of the organization
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The IP address of the actor
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The project's short description.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The project's name.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  A view of the project
  """
  editor: Actor

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  viewerCanReopen: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The repository that the release belongs to.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  A description of the release, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  edges: [ProjectV2Edge]

  """
  The time the action was initiated
  """
  nodes: [ProjectV2]

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The migration has invalid credentials.
  """
  databaseId: Int

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The migration is in progress.
  """
  editor: Actor

  """
  The migration has not started.
  """
  node: ProjectV2
}

"""
A branch linked to an issue.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The migration needs to have its credentials validated.
  """
  createdAt: DateTime!

  """
  The migration has been queued.
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Marks a repository as archived.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createdAt: DateTime!

  """
  A list of nodes.
  """
  dataType: ProjectV2FieldType!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

  """
  Finds and returns the Project according to the provided Project number.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The HTTP path listing the repository's projects
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  hasSponsorsListing: Boolean!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The HTTP path for the actor.
  """
  ASSIGNEES

  """
  The HTTP URL for the actor.
  """
  DATE

  """
  Identifies the date and time when the repository was last pushed to.
  """
  ITERATION

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  LABELS

  """
  The SAML provider's issuer URL.
  """
  LINKED_PULL_REQUESTS

  """
  The corresponding operation type for the action
  """
  MILESTONE

  """
  Whether the given account is sponsoring this user/organization.
  """
  NUMBER

  """
  The name of the Organization.
  """
  REPOSITORY

  """
  The HTTP path for the organization
  """
  REVIEWERS

  """
  The HTTP URL for the organization
  """
  SINGLE_SELECT

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  TEXT

  """
  Title
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Tracks
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The content of the referenced draft issue, issue, or pull request
  """
  content: ProjectV2ItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The organization's public profile location.
  """
  creator: Actor

  """
  The SAML provider's single sign-on URL.
  """
  databaseId: Int

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  isArchived: Boolean!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  project: ProjectV2!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The HTTP URL for the user.
  """
  type: ProjectV2ItemType!

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  edges: [ProjectV2ItemEdge]

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  nodes: [ProjectV2Item]

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Create a new branch protection rule
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  creator: Actor

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Identifies the viewer's thread subscription status.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
type LockedEvent implements Node {
  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Deletes a pull request review.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The actor who created the item.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  enterpriseUrl: URI

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The users for this field
  """
  users(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The name of the OAuth application.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The HTTP path for the OAuth application
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The HTTP URL for the OAuth application
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The field's type.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The name of the Organization.
  """
  organizationName: String

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  edges: [ProjectV2ViewEdge]

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  nodes: [ProjectV2View]

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Transfer an issue to a different repository
  """
  PR_BODY

  """
  Unarchives a ProjectV2Item
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  headCommit: Commit

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  hasSponsorsListing: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The ref name.
  """
  name: String!

  """
  The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  """
  prefix: String!

  """
  Branch protection rules that are viewable by non-admins
  """
  refUpdateRule: RefUpdateRule

  """
  The repository the ref belongs to.
  """
  repository: Repository!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

"""
The connection type for Ref.
"""
type RefConnection {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Ordering options for results returned from the connection.
    """
    Find packages in a repository by ID.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
type PinnedDiscussion implements Node & RepositoryNode {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Background texture pattern
  """
  pattern: PinnedDiscussionPattern!

  """
  The actor that pinned this discussion.
  """
  pinnedBy: Actor!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  field: EnvironmentOrderField!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MergeCommitTitle {
  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

    """
    Filter discussions to only those in a specific repository.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  Returns a list of contact links associated to the repository
  """
  contactLinks: [RepositoryContactLink!]

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Parameters for UnsubscribeFromNotifications
    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  databaseId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  createdAt: PreciseDateTime!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  viewerCanClose: Boolean!

  """
  The HTTP path for the OAuth application
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  The HTTP URL for the OAuth application
  """
  updatePatreonSponsorability(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  viewerCanReopen: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  REBASE
}

"""
A file changed in a pull request.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  nodes: [MergeQueueEntry]

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
enum MannequinOrderField {
  """
  The Git commit object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The pull request this commit belongs to
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  Update a repository ruleset
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The pull request this commit comment thread belongs to
  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The HTTP URL for the organization
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  actor: AuditEntryActor

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  Finds and returns the Project according to the provided Project number.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  SCIM

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  UNKNOWN
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing the repository's projects
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The text of the announcement
  """
  closed: Boolean!

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  createdAt: DateTime!

  """
  The action name
  """
  creator: Actor

  """
  Identifies the date and time when the organization was archived.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The Node ID of the OrganizationMigration object
  """
  number: Int!

  """
  The remaining amount of repos to be migrated.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The name of the source organization to be migrated.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this review comment.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The Octoshift migration is in progress.
  """
  title: String!

  """
  The Octoshift migration has not started.
  """
  updatedAt: DateTime!

  """
  The Octoshift migration needs to have its credentials validated.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The ordering direction.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The field to order organizations by.
  """
  nodes: [ProjectV2]

"""
Properties by which organization connections can be ordered.
"""
enum OrganizationOrderField {
  """
  Order organizations by creation time
  """
  CREATED_AT

  """
  Order organizations by login
  """
  LOGIN
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A string describing this context
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  The HTTP path for the actor.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The HTTP URL for the actor.
  """
  createdAt: DateTime!

  """
  The time the action was initiated
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  name: String!

  """
  The HTTP path for the OAuth application
  """
  project: ProjectV2!

  """
  The corresponding operation type for the action
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The Node ID of the Package object
  """
  createdAt: DateTime!

  """
  The name of the Organization.
  """
  dataType: ProjectV2FieldType!

  """
  The HTTP path for the organization
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  name: String!

  """
  The user affected by the action
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type ProjectV2FieldConnection {
  """
  The HTTP URL for the user.
  """
  edges: [ProjectV2FieldEdge]

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  nodes: [ProjectV2Field]

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  node: Package
}

"""
A file in a package version.
"""
type ProjectV2FieldEdge {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
The connection type for PullRequestTimelineItem.
"""
enum ProjectV2FieldType {
  """
  The username of the user who initiated the action
  """
  ASSIGNEES

  """
  The HTTP path for the actor.
  """
  DATE

  """
  The HTTP URL for the actor.
  """
  ITERATION

  """
  The time the action was initiated
  """
  LABELS

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the Organization object
  """
  MILESTONE

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  REPOSITORY

  """
  The Node ID of the MilestonedEvent object
  """
  REVIEWERS

  """
  Information to aid in pagination.
  """
  SINGLE_SELECT

  """
  Identifies the total count of items in the connection.
  """
  TEXT

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Updates an existing user list.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Whether the given account is sponsoring this user/organization.
  """
  content: ProjectV2ItemContent

  """
  The field to order mannequins by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  creator: Actor

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
enum PackageType {
  """
  A debian package.
  """
  isArchived: Boolean!

  """
  A docker image.
  """
  project: ProjectV2!

  """
  An npm package.
  """
  type: ProjectV2ItemType!

  """
  A nuget package.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A python package.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of edges.
  """
  nodes: [ProjectV2Item]

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: DateTime!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The listing's introductory description.
  """
  enterpriseUrl: URI

  """
  The actor who created the item.
  """
  id: ID!

  """
  Archives a ProjectV2Item
  """
  digestMethodUrl: URI

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The SAML provider's signature algorithm URL.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The template filename.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The corresponding operation type for the action
  """
  name: String!

  """
  The suggested issue title.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

    """
    If non-null, filters teams according to privacy
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type RepoRemoveTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Parameters for RemoveEnterpriseMember
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The user who created the invitation.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The field in which to order projects by.
  """
  node: ProjectV2View
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Order project v2 views by name
  """
  NAME

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  POSITION
}

"""
Branch protection rules that are enforced on the viewer.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The name of the workflow.
  """
  inProgressPercentage: Float!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  createdAt: PreciseDateTime!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  unarchiveRepository(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Update the collaborators on a team or a project
  """
  createdAt: DateTime!

  """
  Deletes a user list.
  """
  dataType: ProjectV2FieldType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A nuget package.
  """
  creator: Actor

    """
    Filter mannequins by login.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The duration of the iteration in days.
  """
  duration: Int!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The migration source name.
  """
  id: ID!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  The project field's name.
  """
  name: String!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input Environments {
  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  A project v2 that is still open
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Returns whether or not a comment has been minimized.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The moment the editor made the last edit
  """
  databaseId: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  updatedAt: DateTime!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  The HTTP URL for the OAuth application
  """
  nodes: [ProjectV2View]

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
type ProjectV2ViewEdge {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The HTTP URL for the OAuth application
  """
  databaseId: Int

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Order project v2 views by name
  """
  NAME

"""
Ordering options for environments
"""
input Environments {
  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  The name of the workflow.
  """
  oauthApplicationName: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  CREATED_AT

  """
  The name of the workflow
  """
  NAME

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The user affected by the action
  """
  name: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  """
  The Node ID of the MergeQueue object
  """
  isArchived: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Deletes a project workflow.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  name: String!

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  The migration source type.
  """
  metadata: String

  """
  Delete a repository ruleset
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Ordering options for project v2 item field value connections
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type LinkedBranch implements Node {
  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type MergeQueue implements Node {
  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Indicates whether the author of this review has push access to the repository.
  """
  authorCanPushToRepository: Boolean!

  """
  Identifies the pull request review body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of this review rendered as plain text.
  """
  bodyText: String!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The collaborator can view the project
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  A list of teams that this review was made on behalf of.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  GRAY
  """
  GRAY

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A list of nodes.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

    """
    Filters users with query on user name and login.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The number of kilobytes this repository occupies on disk.
  """
  diskUsage: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Whether this repository allows forks.
  """
  forkingAllowed: Boolean!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
Branch protection rules that are enforced on the viewer.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  project: ProjectV2!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The field to order the project v2 workflows by.
  """
  diffSide: DiffSide!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  id: ID!

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Finds and returns the Project according to the provided Project number.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  The HTTP path listing the repository's projects
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type PullRequestTimelineItemsConnection {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum SponsorsActivityPeriod {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The permalink to the pull request.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reasons why the current viewer can not update this comment.
  """
  JM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  KG

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A file changed in a pull request.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Kiribati
  """
  KI

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Lebanon
  """
  LB

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    after: String

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Northern Mariana Islands
  """
  MP

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PackageTag implements Node {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Somalia
  """
  SO

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  SS

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  ST

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Reasons why the current viewer can not update this comment.
  """
  SZ

  """
  Turks and Caicos Islands
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Secret scanning
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Tag
  """
  TAG

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The moment the editor made the last edit
  """
  TAG_NAME_PATTERN

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Branch protection rules that are enforced on the viewer.
"""
type PullRequestRevisionMarker {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  Project progress details.
  """
  progress: ProjectProgress!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState!

  """
  Identifies the date and time when the object was last updated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
A card in a project.
"""
type ProjectCard implements Node {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  column: ProjectColumn

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
An item in a pull request timeline
"""
type ProjectColumn implements Node {
  """
  List of cards in the column
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The project column's name.
  """
  name: String!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  purpose: ProjectColumnPurpose

  """
  The HTTP path for this project column
  """
  resourcePath: URI!

"""
The connection type for PullRequestTimelineItems.
"""
type ReleaseAsset implements Node {
  """
  The asset's content-type
  """
  contentType: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The number of times this asset was downloaded
  """
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Identifies the title of the release asset.
  """
  name: String!

  """
  Release that the asset is associated with
  """
  release: Release

  """
  The size (in bytes) of the asset
  """
  size: Int!

  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
A repository-topic connects a repository to a topic.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The Node ID of the RepositoryTopic object
  """
  closed: Boolean!

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  createdAt: DateTime!

  """
  Tunisia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Tonga
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Tuvalu
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Taiwan
  """
  number: Int!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  owner: ProjectV2Owner!

  """
  Ukraine
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Uganda
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  United States Minor Outlying Islands
  """
  resourcePath: URI!

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  United States of America
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Uruguay
  """
  title: String!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Uzbekistan
  """
  updatedAt: DateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Virgin Islands, British
  """
  edges: [ProjectV2Edge]

  """
  Virgin Islands, U.S.
  """
  nodes: [ProjectV2]

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  repository: Repository!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  A list of edges.
  """
  edges: [PullRequestTimelineItemEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequestTimelineItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Wallis and Futuna Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  node: ProjectV2
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Samoa
  """
  createdAt: DateTime!

  """
  Yemen
  """
  dataType: ProjectV2FieldType!

  """
  Mayotte
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  South Africa
  """
  name: String!

  """
  Zambia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The path in the superproject that this submodule is located in
  """
  createdAt: DateTime!

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  dataType: ProjectV2FieldType!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  name: String!

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  edges: [ProjectV2FieldEdge]

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  nodes: [ProjectV2Field]

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  sponsorships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    includePrivate: Boolean = false

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The Node ID of the Push object
  """
  ASSIGNEES

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  DATE

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  ITERATION

  """
  The full description of the listing.
  """
  LABELS

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  LINKED_PULL_REQUESTS

  """
  The Node ID of the SponsorsListing object
  """
  MILESTONE

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  NUMBER

  """
  The ID of the Project to unmark as a template.
  """
  REPOSITORY

  """
  The Node ID of the PushAllowance object
  """
  REVIEWERS

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  SINGLE_SELECT

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  TEXT

  """
  The HTTP path for this Sponsors listing.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The short description of the listing.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  When was the alert auto-dismissed?
  """
  content: ProjectV2ItemContent

  """
  When was the alert created?
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The organization with the updated web commit signoff setting.
  """
  creator: Actor

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  The tiers for this GitHub Sponsors profile.
  """
  databaseId: Int

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

  """
  The HTTP URL for this Sponsors listing.
  """
  project: ProjectV2!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  type: ProjectV2ItemType!

  """
  When was the alert fixed?
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  edges: [ProjectV2ItemEdge]

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  databaseId: Int

  """
  Date value for the field
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Identifies the date and time when the object was created.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  description: String

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  The actor who created the item.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  Identifies the date and time when the object was last updated.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  Finds and returns the Project according to the provided Project number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  The HTTP path listing the repository's projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ref
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The direction in which to order refs by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order refs by.
  """
  field: RefOrderField!
}

"""
Properties by which ref connections can be ordered.
"""
enum RefOrderField {
  """
  Order refs by their alphanumeric name
  """
  ALPHABETICAL

  """
  Order refs by underlying commit date if the ref prefix is refs/tags/
  """
  TAG_COMMIT_DATE
}

"""
A ref update
"""
input RefUpdate @preview(toggledBy: "update-refs-preview") {
  """
  The value this ref should be updated to.
  """
  afterOid: GitObjectID!

  """
  The value this ref needs to point to before the update.
  """
  beforeOid: GitObjectID

  """
  Force a non fast-forward update.
  """
  force: Boolean = false

  """
  The fully qualified name of the ref to be update. For example `refs/heads/branch-name`
  """
  name: GitRefname!
}

"""
Branch protection rules that are enforced on the viewer.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    A name to filter the assets by.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  CVE

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  direction: OrderDirection!

  """
  The name of the workflow
  """
  NAME

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The public key string.
  """
  key: String!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  updatedAt: DateTime
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  The number of additions in this pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
enum SecurityVulnerabilityOrderField {
  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  currentTitle: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The number of deletions in this pull request.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Lists the files changed within this pull request.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Identifies the primary key from the database as a BigInt.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  Statistics about package activity.
  """
  statistics: PackageStatistics

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The funding links for this repository
  """
  fundingLinks: [FundingLink!]!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The ID of the ruleset to be returned.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    last: Int

    """
    Filters users with query on user name and login
    """
    query: String
  ): UserConnection!

  """
  Whether or not PRs are merged with a merge commit on this repository.
  """
  mergeCommitAllowed: Boolean!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  milestone(
    """
    The number for the milestone to be returned.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Identifies the pull request title rendered to HTML.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Returns a count of how many comments this pull request has received.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Bahamas
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  BY

  """
  Belize
  """
  BZ

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Finds and returns the Project according to the provided Project number.
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The HTTP path listing the repository's projects
  """
  CR

  """
  Cape Verde
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Curaçao
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  RENAME

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Identifies the primary key from the database.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  DO

  """
  The migration source.
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  EE

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Represents the rollup for both the check runs and status for a commit.
"""
input StatusCheckConfigurationInput {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Gambia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Guinea
  """
  GN

"""
The possible commit status states.
"""
input UpdateProjectInput {
  """
  Guadeloupe
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Guinea-Bissau
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Guyana
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Hong Kong
  """
  HK

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  HM

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Prevent merge commits from being pushed to matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  enforcement: RuleEnforcement!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the ruleset associated with the allowed actor
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

"""
The possible commit status states.
"""
interface Subscribable {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of SubmitPullRequestReview
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  enterpriseUrl: URI

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The user who resolved this thread
  """
  closed: Boolean!

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  createdAt: DateTime!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  creator: Actor

  """
  Indicates whether the current viewer can reply to this thread.
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  node: PullRequestTimelineItem
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Luxembourg
  """
  number: Int!

  """
  Latvia
  """
  owner: ProjectV2Owner!

  """
  Libya
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Saint Martin (French part)
  """
  resourcePath: URI!

  """
  Madagascar
  """
  shortDescription: String

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Marshall Islands
  """
  title: String!

  """
  Macedonia
  """
  updatedAt: DateTime!

  """
  Mali
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Northern Mariana Islands
  """
  MP

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Montserrat
  """
  nodes: [ProjectV2]

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Maldives
  """
  MV

  """
  Malawi
  """
  node: ProjectV2
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  When was the alert auto-dismissed?
  """
  dataType: ProjectV2FieldType!

  """
  When was the alert created?
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Mozambique
  """
  name: String!

  """
  Namibia
  """
  project: ProjectV2!

  """
  The reason the alert was dismissed
  """
  updatedAt: DateTime!
}

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Norfolk Island
  """
  dataType: ProjectV2FieldType!

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  databaseId: Int

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Netherlands
  """
  name: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Niue
  """
  edges: [ProjectV2FieldEdge]

  """
  New Zealand
  """
  nodes: [ProjectV2Field]

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Oman
  """
  OM

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Panama
  """
  PA

  """
  Peru
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  French Polynesia
  """
  ASSIGNEES

  """
  Papua New Guinea
  """
  DATE

  """
  Philippines
  """
  ITERATION

  """
  Pakistan
  """
  LABELS

  """
  Poland
  """
  LINKED_PULL_REQUESTS

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable {
  """
  Saint Pierre and Miquelon
  """
  MILESTONE

  """
  Pitcairn
  """
  NUMBER

  """
  Puerto Rico
  """
  REPOSITORY

  """
  Palestine
  """
  REVIEWERS

  """
  An alert that has been automatically closed by Dependabot.
  """
  SINGLE_SELECT

  """
  An alert that has been manually closed by a user.
  """
  TEXT

  """
  Palau
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Paraguay
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Qatar
  """
  content: ProjectV2ItemContent

  """
  Reunion
  """
  createdAt: DateTime!

  """
  Romania
  """
  creator: Actor

  """
  Serbia
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

    """
    Filters users with query on user name and login.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Solomon Islands
  """
  isArchived: Boolean!

  """
  Seychelles
  """
  project: ProjectV2!

  """
  Sweden
  """
  type: ProjectV2ItemType!

  """
  Singapore
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Saint Helena
  """
  edges: [ProjectV2ItemEdge]

  """
  The Node ID of the PushAllowance object
  """
  nodes: [ProjectV2Item]

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  San Marino
  """
  SM

  """
  Returns the contributing guidelines for this repository.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Somalia
  """
  creator: Actor

  """
  Suriname
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  South Sudan
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Finds and returns the Project according to the provided Project number.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The HTTP path listing the repository's projects
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  actor: Actor

  """
  The actor who created the item.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  user: Actor
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
Ways in which lists of git refs can be ordered upon return.
"""
input SavedReplyOrder {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  updatedAt: DateTime!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  issuer: String

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  clientMutationId: String

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  CREATED_AT

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the primary key from the database.
  """
  databaseId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Configuration for the repository_id condition
  """
  createdAt: PreciseDateTime!

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  id: ID!

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  United States of America
  """
  edges: [SponsorableItemEdge]

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  nodes: [SponsorableItem]

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  Comment explaining the reason the alert was dismissed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The reason the alert was dismissed
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Are successful deployments required before merging.
  """
  edges: [SponsorsActivityEdge]

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  nodes: [SponsorsActivity]

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Identifies the date and time when the object was created.
  """
  clientMutationId: String

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
input RequestReviewsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node IDs of the team to request.
  """
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])

  """
  Add users to the set rather than replace.
  """
  union: Boolean = false

  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  WAITING
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Austria
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Australia
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Aruba
  """
  AW

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  AX

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  pullRequest: PullRequest!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  GitHub Security Advisories
  """
  securityAdvisories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Represents a subject that can be reacted on.
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of direct forked repositories.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ref
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The direction in which to order refs by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The HTTP path listing the repository's projects
  """
  RELEVANCE
}

"""
Branch protection rules that are enforced on the viewer.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Bonaire, Sint Eustatius and Saba
  """
  edges: [SponsorableItemEdge]

  """
  Brazil
  """
  nodes: [SponsorableItem]

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Cape Verde
  """
  edges: [SponsorsActivityEdge]

  """
  Curaçao
  """
  nodes: [SponsorsActivity]

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Czech Republic
  """
  CZ

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Represents an author of discussion comments in repositories.
"""
interface RepositoryDiscussionCommentAuthor {
  """
  Germany
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Identifies the date and time when the repository was last pushed to.
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  BZ

  """
  Canada
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Identifies the primary key from the database.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Dominican Republic
  """
  DO

  """
  The migration source.
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  EE

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Fiji
  """
  FJ

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Honduras
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  An alert that has been automatically closed by Dependabot.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  An alert that has been manually closed by a user.
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  union: Boolean = false

  """
  Saudi Arabia
  """
  SA

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  El Salvador
  """
  SV

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Finds and returns the Project according to the provided Project number.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Uganda
  """
  edges: [SponsorableItemEdge]

  """
  United States Minor Outlying Islands
  """
  nodes: [SponsorableItem]

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
type SponsorableItemEdge {
  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The platform that was most recently used to pay for the sponsorship.
  """
  edges: [SponsorsActivityEdge]

  """
  The privacy level for this sponsorship.
  """
  nodes: [SponsorsActivity]

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  The User is notified because they chose custom settings for this thread.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Identifies the date and time when the repository was last pushed to.
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
Ways in which star connections can be ordered.
"""
type TransferEnterpriseOrganizationPayload {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Greece
  """
  GR

  """
  The migration source.
  """
  GS

  """
  Guatemala
  """
  GT

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  GU

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
Ways in which star connections can be ordered.
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Jordan
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  The HTTP path listing organization's projects
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  New Caledonia
  """
  NC

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Papua New Guinea
  """
  PG

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Rwanda
  """
  RW

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  SA

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated return type of UpdateProject
"""
interface Subscribable {
  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  Chad
  """
  TD

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Trinidad and Tobago
  """
  TT

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

"""
A team of users in an organization.
"""
enum ThreadSubscriptionFormAction {
  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  A list of references for this advisory
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The severity of the advisory
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

  """
  Whether or not this version is a pre-release.
  """
  preRelease: Boolean!

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  The public profile website URL.
  """
  websiteUrl: URI
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type Project implements Closable & Node & Updatable {
  """
  The project's description body.
  """
  body: String

  """
  The projects description body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectColumnConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The project's name.
  """
  name: String!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this card
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Whether the card is archived
  """
  isArchived: Boolean!

  """
  The card note
  """
  note: String

  """
  The project that contains this card.
  """
  project: Project!

  """
  The HTTP path for this card
  """
  resourcePath: URI!

  """
  The state of ProjectCard
  """
  state: ProjectCardState

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  edges: [SponsorableItemEdge]

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  nodes: [SponsorableItem]

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  The full description of the listing.
  """
  fullDescription: String!

  """
  The HTTP path for this discussion
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Returns true if the project is closed.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The activity was cancelling a sponsorship.
  """
  creator: Actor

  """
  The Node ID of the RepositoryInvitation object
  """
  databaseId: Int

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  number: Int!

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  owner: ProjectV2Owner!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The GitHub Sponsors profile that features this record.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
type SponsorsActivityEdge {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  title: String!

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  updatedAt: DateTime!

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  edges: [ProjectV2Edge]

  """
  The previous calendar day.
  """
  nodes: [ProjectV2]

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  node: ProjectV2
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The migration flag to continue on error.
  """
  createdAt: DateTime!

  """
  United Arab Emirates
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  name: String!

  """
  The migration source.
  """
  project: ProjectV2!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The migration state.
  """
  createdAt: DateTime!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  dataType: ProjectV2FieldType!

  """
  Antarctica
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Argentina
  """
  name: String!

  """
  American Samoa
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Aruba
  """
  edges: [ProjectV2FieldEdge]

  """
  Åland
  """
  nodes: [ProjectV2Field]

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  ASSIGNEES

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  DATE

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  ITERATION

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  LABELS

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  LINKED_PULL_REQUESTS

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  MILESTONE

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Belgium
  """
  NUMBER

  """
  Burkina Faso
  """
  REPOSITORY

  """
  Bulgaria
  """
  REVIEWERS

  """
  Bahrain
  """
  SINGLE_SELECT

  """
  Burundi
  """
  TEXT

  """
  Benin
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Saint Barthélemy
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Bermuda
  """
  content: ProjectV2ItemContent

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
interface RepositoryOwner {
  """
  A URL pointing to the owner's public avatar.
  """
  createdAt: DateTime!

  """
  The Node ID of the RepositoryOwner object
  """
  creator: Actor

  """
  Brunei Darussalam
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Bonaire, Sint Eustatius and Saba
  """
  isArchived: Boolean!

  """
  Brazil
  """
  project: ProjectV2!

  """
  Bhutan
  """
  type: ProjectV2ItemType!

  """
  Bouvet Island
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Botswana
  """
  edges: [ProjectV2ItemEdge]

  """
  Belarus
  """
  nodes: [ProjectV2Item]

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
Parameters to be used for the repository_property condition
"""
type ProjectV2ItemEdge {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Array of repository properties that must not match.
  """
  createdAt: DateTime!

  """
  Array of repository properties that must match
  """
  creator: Actor

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  The actor who created the item.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Source of ruleset.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The actor that can bypass rules.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Dominican Republic
  """
  DO

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Autogenerated input type of UnarchiveRepository
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  Ecuador
  """
  enterpriseUrl: URI

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Western Sahara
  """
  EH

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

"""
The privacy of a sponsorship
"""
input UpdateUserListInput {
  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Saint Lucia
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Madagascar
  """
  edges: [ProjectV2ViewEdge]

  """
  Marshall Islands
  """
  nodes: [ProjectV2View]

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type ProjectV2ViewEdge {
  """
  Macedonia
  """
  MK

  """
  Mali
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  The name of the workflow.
  """
  isRestricted: Boolean!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  clientMutationId: String

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  id: ID!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The migration source.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment.
  """
  commit: Commit

  """
  Identifies when the comment was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the original commit associated with the comment.
  """
  originalCommit: Commit

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies when the comment body is outdated
  """
  outdated: Boolean!

  """
  The path to which the comment applies.
  """
  path: String!

  """
  The line index in the diff to which the comment applies.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The pull request associated with this review comment.
  """
  pullRequest: PullRequest!

  """
  The pull request review associated with this review comment.
  """
  pullRequestReview: PullRequestReview

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The comment this is a reply to.
  """
  replyTo: PullRequestReviewComment

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  parameters: RuleParameters

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  repositoryRuleset: RepositoryRuleset

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Nicaragua
  """
  edges: [SponsorableItemEdge]

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Nauru
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Qatar
  """
  nodes: [SponsorsActivity]

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
Autogenerated input type of UpdateProjectCard
"""
type SponsorsActivityEdge {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  union: Boolean = false

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

"""
The connection type for RequestedReviewer.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  A short plaintext summary of the advisory
  """
  summary: String!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  releaseAssets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Open-source federated microblogging service.
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  createdAt: DateTime!

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  version: PackageVersion
}

"""
The possible types of a package.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  A rubygems package.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Côte d'Ivoire
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Cook Islands
  """
  nodes: [SponsorableItem]

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  China
  """
  CN

  """
  Colombia
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Eritrea
  """
  edges: [SponsorsActivityEdge]

  """
  Spain
  """
  nodes: [SponsorsActivity]

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
enum SponsorsCountryOrRegionCode {
  """
  The migration flag to continue on error.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  AG

  """
  The migration source.
  """
  AI

  """
  Albania
  """
  AL

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AM

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  BZ

  """
  Canada
  """
  CA

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Only allow users with bypass permissions to delete matching refs.
  """
  closed: Boolean!

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  createdAt: DateTime!

  """
  Merges must be performed via a merge queue.
  """
  creator: Actor

  """
  Merge queue locked ref
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Only allow users with bypass permission to update matching refs.
  """
  number: Int!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  owner: ProjectV2Owner!

  """
  Workflow files cannot be modified.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was created.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Identifies the primary key from the database.
  """
  title: String!

  """
  The enforcement level of this ruleset
  """
  updatedAt: DateTime!

  """
  The Node ID of the RepositoryRuleset object
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  edges: [ProjectV2Edge]

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  nodes: [ProjectV2]

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  node: ProjectV2
}

"""
The bypass mode for a specific actor on a ruleset.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor can always bypass rules
  """
  dataType: ProjectV2FieldType!

  """
  The actor can only bypass rules via a pull request
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  name: String!

  """
  A list of nodes.
  """
  project: ProjectV2!

  """
  Identifies the total count of items in the connection.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A cursor for use in pagination.
  """
  dataType: ProjectV2FieldType!

  """
  The item at the end of the edge.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  name: String!

  """
  The bypass mode for this actor.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Field]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Branch
  """
  ASSIGNEES

  """
  Tag
  """
  DATE

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  ITERATION

  """
  Curaçao
  """
  LABELS

  """
  Christmas Island
  """
  LINKED_PULL_REQUESTS

  """
  Cyprus
  """
  MILESTONE

  """
  Czech Republic
  """
  NUMBER

  """
  Germany
  """
  REPOSITORY

  """
  Djibouti
  """
  REVIEWERS

  """
  Denmark
  """
  SINGLE_SELECT

  """
  Dominica
  """
  TEXT

  """
  Dominican Republic
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Algeria
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Ecuador
  """
  content: ProjectV2ItemContent

  """
  Estonia
  """
  createdAt: DateTime!

  """
  Egypt
  """
  creator: Actor

  """
  Western Sahara
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Spain
  """
  isArchived: Boolean!

  """
  Ethiopia
  """
  project: ProjectV2!

  """
  Fiji
  """
  type: ProjectV2ItemType!

  """
  Falkland Islands
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Micronesia
  """
  edges: [ProjectV2ItemEdge]

  """
  Faroe Islands
  """
  nodes: [ProjectV2Item]

  """
  France
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Grenada
  """
  createdAt: DateTime!

  """
  Georgia
  """
  creator: Actor

  """
  French Guiana
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Guernsey
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Cambodia
  """
  KH

  """
  The actor who created the item.
  """
  KI

  """
  Comoros
  """
  KM

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Macau
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Northern Mariana Islands
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Martinique
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Indicates if the repository has wiki feature enabled.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  ISSUE

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  id: ID!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  notificationsPermalink: URI

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  publishedAt: DateTime!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Ordering options for results returned from the connection.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type SponsorsActivityConnection {
  """
  Slovakia
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Sierra Leone
  """
  nodes: [SponsorsActivity]

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Somalia
  """
  SO

  """
  Suriname
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  AL

  """
  Armenia
  """
  AM

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Antarctica
  """
  AQ

  """
  The migration source.
  """
  AR

  """
  American Samoa
  """
  AS

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AT

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Bhutan
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Central African Republic
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  CG

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  CH

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  enforcement: RuleEnforcement!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

"""
Things that can be starred.
"""
interface Starrable {
  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
input StartOrganizationMigrationInput {
  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Jordan
  """
  JO

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

"""
Represents the rollup for both the check runs and status for a commit.
"""
interface Starrable {
  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  union: Boolean = false

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
enum StatusState {
  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  The moment when the user made the reaction.
  """
  reactedAt: DateTime!
}

"""
An emoji reaction to a particular piece of content.
"""
type Reaction implements Node {
  """
  Identifies the emoji reaction.
  """
  content: ReactionContent!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
Branch protection rules that are enforced on the viewer.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A name to filter the assets by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  The security policy URL.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Poland
  """
  edges: [SponsorableItemEdge]

  """
  Saint Pierre and Miquelon
  """
  nodes: [SponsorableItem]

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  PN

  """
  Puerto Rico
  """
  PR

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Palestine
  """
  PS

  """
  Portugal
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Identifies the date and time when the repository was last pushed to.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Slovenia
  """
  edges: [SponsorsActivityEdge]

  """
  Svalbard and Jan Mayen Islands
  """
  nodes: [SponsorsActivity]

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  San Marino
  """
  SM

  """
  Senegal
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Ways in which team connections can be ordered.
"""
type UnarchiveProjectV2ItemPayload {
  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  The migration source.
  """
  BR

  """
  Bahamas
  """
  BS

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  BT

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Botswana
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Djibouti
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Iceland
  """
  IS

  """
  Italy
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

"""
Autogenerated input type of UpdateProject
"""
interface Starrable {
  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  union: Boolean = false

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  A unique identifier for the client performing the mutation.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML Identity Provider
  """
  issuer: String

  """
  Organization this Identity Provider belongs to
  """
  organization: Organization

  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: URI

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
An Invitation for a user to an organization.
"""
type OrganizationInvitation implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address of the user invited to the organization.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  The user who was invited to the organization.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The organization the invite is for
  """
  organization: Organization!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Parameters to be used for the repository_id condition
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
input SecurityVulnerabilityOrder {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  When this limit should expire.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The limit to set.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type SponsorAndLifetimeValueEdge {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  cursor: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The migration source.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  SPONSOR_LOGIN

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Romania
  """
  edges: [SponsorableItemEdge]

  """
  Serbia
  """
  nodes: [SponsorableItem]

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
type PrivateRepositoryForkingDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type Project implements Closable & Node & Updatable {
  """
  The project's description body.
  """
  body: String

  """
  The projects description body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of columns in the project
  """
  columns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectColumnConnection!

  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Rwanda
  """
  RW

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  El Salvador
  """
  edges: [SponsorsActivityEdge]

  """
  Sint Maarten (Dutch part)
  """
  nodes: [SponsorsActivity]

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Andorra
  """
  closed: Boolean!

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  createdAt: DateTime!

  """
  Antigua and Barbuda
  """
  creator: Actor

  """
  Anguilla
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  AM

  """
  Angola
  """
  enterpriseUrl: URI

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Antarctica
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Argentina
  """
  number: Int!

  """
  American Samoa
  """
  owner: ProjectV2Owner!

  """
  Austria
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Australia
  """
  AU

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Åland
  """
  resourcePath: URI!

  """
  Azerbaijan
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Bosnia and Herzegovina
  """
  title: String!

  """
  When was the alert auto-dismissed?
  """
  updatedAt: DateTime!

  """
  When was the alert created?
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  BF

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Bahrain
  """
  edges: [ProjectV2Edge]

  """
  When was the alert fixed?
  """
  nodes: [ProjectV2]

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Saint Barthélemy
  """
  BL

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  node: ProjectV2
}

"""
The possible team notification values.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Bolivia
  """
  createdAt: DateTime!

  """
  Bonaire, Sint Eustatius and Saba
  """
  dataType: ProjectV2FieldType!

  """
  Brazil
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Bahamas
  """
  name: String!

  """
  Bhutan
  """
  project: ProjectV2!

  """
  Botswana
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Belarus
  """
  createdAt: DateTime!

  """
  Belize
  """
  dataType: ProjectV2FieldType!

  """
  Canada
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Cocos (Keeling) Islands
  """
  name: String!

  """
  Congo (Kinshasa)
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  An alert that has been manually closed by a user.
  """
  edges: [ProjectV2FieldEdge]

  """
  Switzerland
  """
  nodes: [ProjectV2Field]

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type ProjectV2FieldEdge {
  """
  Chile
  """
  CL

  """
  Cameroon
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  China
  """
  ASSIGNEES

  """
  Colombia
  """
  DATE

  """
  Costa Rica
  """
  ITERATION

  """
  Cape Verde
  """
  LABELS

  """
  Curaçao
  """
  LINKED_PULL_REQUESTS

  """
  Christmas Island
  """
  MILESTONE

  """
  Cyprus
  """
  NUMBER

  """
  Czech Republic
  """
  REPOSITORY

  """
  Germany
  """
  REVIEWERS

  """
  Djibouti
  """
  SINGLE_SELECT

  """
  Denmark
  """
  TEXT

  """
  Dominica
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Dominican Republic
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Algeria
  """
  content: ProjectV2ItemContent

  """
  Ecuador
  """
  createdAt: DateTime!

  """
  Estonia
  """
  creator: Actor

  """
  Egypt
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  EH

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Eritrea
  """
  isArchived: Boolean!

  """
  Spain
  """
  project: ProjectV2!

  """
  Finland
  """
  type: ProjectV2ItemType!

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Falkland Islands
  """
  edges: [ProjectV2ItemEdge]

  """
  Micronesia
  """
  nodes: [ProjectV2Item]

  """
  Faroe Islands
  """
  FO

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The thread to resolve.
  """
  creator: Actor

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  When this contribution was made.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The actor who created the item.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type ProjectV2ItemFieldValueEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  The HTTP path listing organization's projects
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  Organization is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Viewer can create repositories on this organization
  """
  viewerCanCreateRepositories: Boolean!

  """
  Viewer can create teams on this organization.
  """
  viewerCanCreateTeams: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Viewer is an active member of this organization.
  """
  viewerIsAMember: Boolean!

  """
  Whether or not this Organization is followed by the viewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type OrganizationAuditEntryConnection {
  """
  A list of edges.
  """
  edges: [OrganizationAuditEntryEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationAuditEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Metadata for an audit entry with action org.*
"""
interface OrganizationAuditEntryData {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI
}

"""
An edge in a connection.
"""
type OrganizationAuditEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationAuditEntry
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: URI

  """
  External Identities provisioned by this Identity Provider
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML Identity Provider
  """
  issuer: String

  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  enabled: Boolean!

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  LOGIN

  """
  The name of the workflow
  """
  NAME

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
interface Sponsorable {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The body rendered to text.
  """
  bodyText: String!

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
The affiliation of a user to a repository
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  version: PackageVersion
}

"""
The possible types of a package.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A python package.
  """
  PYPI

  """
  The moment the editor made the last edit
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  source: PermissionGranter!
}

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Color stops of the chosen gradient
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Bahamas
  """
  BS

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
input StatusCheckConfigurationInput {
  """
  The migration flag to continue on error.
  """
  ES

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type Project implements Closable & Node & Updatable {
  """
  The project's description body.
  """
  body: String

  """
  The projects description body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
type ProjectColumn implements Node {
  """
  List of cards in the column
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The project column's name.
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Iceland
  """
  IS

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Japan
  """
  closed: Boolean!

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  createdAt: DateTime!

  """
  Cambodia
  """
  creator: Actor

  """
  Kiribati
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fullDatabaseId: BigInt

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Saint Kitts and Nevis
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Returns whether or not a comment has been minimized.
  """
  number: Int!

  """
  The moment the editor made the last edit
  """
  owner: ProjectV2Owner!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  A list of teams that this review was made on behalf of.
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Lebanon
  """
  resourcePath: URI!

  """
  Saint Lucia
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Liechtenstein
  """
  title: String!

  """
  Sri Lanka
  """
  updatedAt: DateTime!

  """
  Liberia
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Lesotho
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Libya
  """
  edges: [ProjectV2Edge]

  """
  Morocco
  """
  nodes: [ProjectV2]

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  MC

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Saint Martin (French part)
  """
  createdAt: DateTime!

  """
  Madagascar
  """
  dataType: ProjectV2FieldType!

  """
  Marshall Islands
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Macedonia
  """
  name: String!

  """
  Mali
  """
  project: ProjectV2!

  """
  Mongolia
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Macau
  """
  createdAt: DateTime!

  """
  Northern Mariana Islands
  """
  dataType: ProjectV2FieldType!

  """
  Martinique
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Mauritania
  """
  name: String!

  """
  Montserrat
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The Node ID of the PullRequestReviewComment object
  """
  edges: [ProjectV2FieldEdge]

  """
  Malta
  """
  nodes: [ProjectV2Field]

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Mexico
  """
  ASSIGNEES

  """
  The end line number on the file to which the comment applied when it was first created
  """
  DATE

  """
  The original line index in the diff to which the comment applies.
  """
  ITERATION

  """
  The start line number on the file to which the comment applied when it was first created
  """
  LABELS

  """
  Mozambique
  """
  LINKED_PULL_REQUESTS

  """
  Namibia
  """
  MILESTONE

  """
  New Caledonia
  """
  NUMBER

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  When was the alert auto-dismissed?
  """
  REPOSITORY

  """
  When was the alert created?
  """
  REVIEWERS

  """
  Norfolk Island
  """
  SINGLE_SELECT

  """
  Nigeria
  """
  TEXT

  """
  Comment explaining the reason the alert was dismissed
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The reason the alert was dismissed
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Netherlands
  """
  content: ProjectV2ItemContent

  """
  Norway
  """
  createdAt: DateTime!

  """
  The start line number on the file to which the comment applies
  """
  creator: Actor

  """
  Identifies the state of the comment.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  subjectType: PullRequestReviewThreadSubjectType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Niue
  """
  isArchived: Boolean!

  """
  New Zealand
  """
  project: ProjectV2!

  """
  Panama
  """
  type: ProjectV2ItemType!

  """
  Peru
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  French Polynesia
  """
  edges: [ProjectV2ItemEdge]

  """
  Papua New Guinea
  """
  nodes: [ProjectV2Item]

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Puerto Rico
  """
  createdAt: DateTime!

  """
  Palestine
  """
  creator: Actor

  """
  Portugal
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Palau
  """
  field: ProjectV2FieldConfiguration!

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The actor who created the item.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
A Git push.
"""
type Push implements Node {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Returns results matching users and organizations on GitHub.
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  The organization that originated the advisory
  """
  edges: [ProjectV2ViewEdge]

  """
  The permalink for the advisory
  """
  nodes: [ProjectV2View]

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  MAVEN

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  CVE

  """
  The name of the workflow
  """
  NAME

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  field: SecurityAdvisoryOrderField!
}

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  The number of additions in this pull request.
  """
  additions: Int!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  Benin
  """
  BJ

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  BN

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  Bolivia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Tag name pattern
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  WORKFLOWS

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Congo (Brazzaville)
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  CY

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Western Sahara
  """
  EH

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The privacy of a sponsorship
"""
input TransferEnterpriseOrganizationInput {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Guinea
  """
  GN

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Israel
  """
  IL

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

"""
Autogenerated input type of TransferIssue
"""
type UpdateUserListPayload {
  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Cambodia
  """
  KH

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Kazakhstan
  """
  union: Boolean = false

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input StatusCheckConfigurationInput {
  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  Find a project by number.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  The HTTP path listing organization's projects
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The number of times this asset was downloaded
  """
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Identifies the title of the release asset.
  """
  name: String!

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  JavaScript package registry.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Social news aggregation and discussion website.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  Online video platform.
  """
  YOUTUBE
}

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  Finds and returns the Project according to the provided Project number.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The HTTP path listing the repository's projects
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  currentTitle: String!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  id: ID!

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Nicaragua
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Nauru
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
input UnarchiveProjectV2ItemInput {
  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Paraguay
  """
  edges: [SponsorsActivityEdge]

  """
  Qatar
  """
  nodes: [SponsorsActivity]

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Serbia
  """
  RS

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
enum SponsorsActivityPeriod {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Indicates if the repository has issues feature enabled.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  DZ

  """
  Ecuador
  """
  EC

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  Egypt
  """
  EG

  """
  The migration source.
  """
  EH

  """
  Eritrea
  """
  ER

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Autogenerated input type of UnarchiveRepository
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

"""
A GitHub Sponsors tier associated with a GitHub Sponsors listing.
"""
type SponsorsTier implements Node {
  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Guadeloupe
  """
  closed: Boolean!

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  createdAt: DateTime!

  """
  South Georgia and South Sandwich Islands
  """
  creator: Actor

  """
  The Node ID of the RepositoryOwner object
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Guinea-Bissau
  """
  number: Int!

  """
  Guyana
  """
  owner: ProjectV2Owner!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Haiti
  """
  resourcePath: URI!

  """
  Hungary
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Indonesia
  """
  title: String!

  """
  Ireland
  """
  updatedAt: DateTime!

  """
  Israel
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2
}

"""
Specifies the attributes for a new or updated rule.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Optional ID of this rule when updating
  """
  createdAt: DateTime!

  """
  The parameters for the rule.
  """
  dataType: ProjectV2FieldType!

  """
  The type of rule to create.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  name: String!

  """
  The field to order repository rules by.
  """
  project: ProjectV2!

  """
  Order repository rules by type
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Authorization
  """
  createdAt: DateTime!

  """
  Branch name pattern
  """
  dataType: ProjectV2FieldType!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Commit message pattern
  """
  name: String!

  """
  Only allow users with bypass permission to create matching refs.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Max ref updates
  """
  edges: [ProjectV2FieldEdge]

  """
  Merges must be performed via a merge queue.
  """
  nodes: [ProjectV2Field]

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Prevent merge commits from being pushed to matching refs.
  """
  ASSIGNEES

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  DATE

  """
  Commits pushed to matching refs must have verified signatures.
  """
  ITERATION

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  LABELS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  LINKED_PULL_REQUESTS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  MILESTONE

  """
  Secret scanning
  """
  NUMBER

  """
  Tag
  """
  REPOSITORY

  """
  Tag name pattern
  """
  REVIEWERS

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  SINGLE_SELECT

  """
  Only allow users with bypass permission to update matching refs.
  """
  TEXT

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Workflow files cannot be modified.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The actors that can bypass this ruleset
  """
  content: ProjectV2ItemContent

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was created.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  isArchived: Boolean!

  """
  The mode for the bypass actor
  """
  project: ProjectV2!

  """
  This actor represents the ability for an organization owner to bypass
  """
  type: ProjectV2ItemType!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The bypass mode for this actor.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Iraq
  """
  IQ

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  Iran
  """
  IR

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Northern Mariana Islands
  """
  MP

  """
  The actor who created the item.
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Portugal
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  Palau
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Reunion
  """
  union: Boolean = false

  """
  Romania
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type StartOrganizationMigrationPayload {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  SHA512
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  RSA-SHA384
  """
  RSA_SHA384

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  The name of the workflow.
  """
  cursor: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  origin: String!

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  references: [SecurityAdvisoryReference!]!

"""
A property that must match
"""
type PropertyTargetDefinition {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A property that must match
"""
input PropertyTargetDefinitionInput {
  """
  The name of the property
  """
  name: String!

  """
  The values to match for
  """
  propertyValues: [String!]!
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Indicates whether the pull request is in a merge queue
  """
  isInMergeQueue: Boolean!

  """
  Indicates whether the pull request's base ref has a merge queue enabled.
  """
  isMergeQueueEnabled: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue for the pull request's base branch
  """
  mergeQueue: MergeQueue

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Taiwan
  """
  edges: [SponsorableItemEdge]

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  nodes: [SponsorableItem]

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

"""
Represents the rollup for both the check runs and status for a commit.
"""
type SponsorableItemEdge {
  """
  United States Minor Outlying Islands
  """
  UM

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  United States of America
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

  """
  The commit the comments were made on.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The number of statuses with this state.
  """
  edges: [SponsorsActivityEdge]

  """
  The state of a status context.
  """
  nodes: [SponsorsActivity]

"""
The possible commit status states.
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type SponsorsActivityEdge {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  node: SponsorsActivity
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  databaseId: Int
    @deprecated(
      reason: "`databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC."
    )

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  enforcement: RuleEnforcement!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Åland
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Botswana
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CM

  """
  China
  """
  CN

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

"""
A team of users in an organization.
"""
enum ThreadSubscriptionFormAction {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Falkland Islands
  """
  union: Boolean = false

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

  """
  The ref name.
  """
  name: String!

  """
  The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  """
  prefix: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  releaseAssets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Iceland
  """
  edges: [SponsorableItemEdge]

  """
  Italy
  """
  nodes: [SponsorableItem]

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Liberia
  """
  edges: [SponsorsActivityEdge]

  """
  Lesotho
  """
  nodes: [SponsorsActivity]

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Latvia
  """
  LV

  """
  Libya
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Andorra
  """
  AD

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Afghanistan
  """
  AF

  """
  The migration source.
  """
  AG

  """
  Anguilla
  """
  AI

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AL

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Barbados
  """
  BB

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Brunei Darussalam
  """
  BN

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Bolivia
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Ecuador
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  union: Boolean = false

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Sri Lanka
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  update: UpdateParametersInput

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Finds and returns the Project according to the provided Project number.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The HTTP path listing the repository's projects
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  Identifies the date and time when the repository was last pushed to.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  TWITTER

  """
  Online video platform.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  edges: [SponsorableItemEdge]

  """
  Netherlands
  """
  nodes: [SponsorableItem]

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  NR

  """
  Niue
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Identifies the date and time when the repository was last pushed to.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Paraguay
  """
  edges: [SponsorsActivityEdge]

  """
  Qatar
  """
  nodes: [SponsorsActivity]

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
interface Starrable {
  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  The migration source.
  """
  BR

  """
  Bahamas
  """
  BS

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  BT

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
A GitHub Sponsors tier associated with a GitHub Sponsors listing.
"""
type SponsorsTier implements Node {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  union: Boolean = false

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Saudi Arabia
  """
  edges: [SponsorableItemEdge]

  """
  Solomon Islands
  """
  nodes: [SponsorableItem]

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Sweden
  """
  SE

  """
  Singapore
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Chad
  """
  edges: [SponsorsActivityEdge]

  """
  French Southern Lands
  """
  nodes: [SponsorsActivity]

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  AF

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
type StatusCheckRollupContextConnection {
  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Burundi
  """
  BI

  """
  Benin
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  PUBLIC
}

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

"""
The possible commit status states.
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Denmark
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

"""
Autogenerated input type of SubmitPullRequestReview
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  union: Boolean = false

  """
  Kyrgyzstan
  """
  KG

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
The privacy of a sponsorship
"""
union RequestedReviewer = Bot | Mannequin | Team | User

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
type TagNamePatternParameters {
  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  TWITTER

  """
  Online video platform.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Mozambique
  """
  edges: [SponsorableItemEdge]

  """
  Namibia
  """
  nodes: [SponsorableItem]

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  NC

  """
  Niger
  """
  NE

"""
The possible team notification values.
"""
type SponsorableItemEdge {
  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

"""
Autogenerated input type of StartRepositoryMigration
"""
type Topic implements Node & Starrable {
  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  Identifies the date and time when the repository was last pushed to.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Saint Pierre and Miquelon
  """
  edges: [SponsorsActivityEdge]

  """
  Pitcairn
  """
  nodes: [SponsorsActivity]

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Portugal
  """
  PT

  """
  Palau
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Brazil
  """
  BR

  """
  The migration source.
  """
  BS

  """
  Bhutan
  """
  BT

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  BV

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

"""
Parameters to be used for the repository_property condition
"""
type RepositoryPropertyConditionTarget {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinition!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinition!]!
}

"""
Parameters to be used for the repository_property condition
"""
input RepositoryPropertyConditionTargetInput {
  """
  Array of repository properties that must not match.
  """
  exclude: [PropertyTargetDefinitionInput!]!

  """
  Array of repository properties that must match
  """
  include: [PropertyTargetDefinitionInput!]!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput

  """
  Configuration for the repository_property condition
  """
  repositoryProperty: RepositoryPropertyConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  union: Boolean = false

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Somalia
  """
  edges: [SponsorableItemEdge]

  """
  Suriname
  """
  nodes: [SponsorableItem]

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Taiwan
  """
  edges: [SponsorsActivityEdge]

  """
  Tanzania
  """
  nodes: [SponsorsActivity]

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

"""
The possible commit status states.
"""
type UnarchiveProjectV2ItemPayload {
  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
Autogenerated input type of UnarchiveRepository
"""
type UpdateParameters {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
The privacy of a sponsorship
"""
type UnlabeledEvent implements Node {
  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

"""
The possible commit status states.
"""
enum StatusState {
  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type TeamDiscussionComment implements Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the comment's team.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  body: String!

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The current version of the body content.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

  """
  The full description of the listing.
  """
  createdViaEmail: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  fullDescriptionHTML: HTML!

  """
  The Node ID of the SponsorsListing object
  """
  id: ID!

  """
  Did the operation succeed?
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  The ProjectColumn ID to update.
  """
  editor: Actor

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String

  """
  The HTTP path for this Sponsors listing.
  """
  resourcePath: URI!

  """
  The short description of the listing.
  """
  id: ID!

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  The tiers for this GitHub Sponsors profile.
  """
  tiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Sponsors tiers returned from the connection.
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

  """
  The HTTP URL for this Sponsors listing.
  """
  url: URI!
}

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String

  """
  The record that is featured on the GitHub Sponsors profile.
  """
  featureable: SponsorsListingFeatureableItem!

  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  id: ID!

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Node ID of the UnsubscribedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  descriptionHTML: HTML!

  """
  The Node ID of the SponsorsTier object
  """
  id: ID!

  """
  The updated project column.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!

  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!

  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!

  """
  The sponsorships using this tier.
  """
  sponsorships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    includePrivate: Boolean = false

  """
  The organization for which a transfer was initiated.
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

"""
Autogenerated input type of TransferIssue
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The Node ID of the repository the issue should be transferred to
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  negate: Boolean

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the allow private repository forking setting.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  Can admins override branch protection.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  The glob-like pattern used to determine matching branches.
  """
  project: Project
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the SponsorshipNewsletter object
  """
  id: ID!

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Number of lines in the file.
  """
  requireLastPushApproval: Boolean

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Payment was made through GitHub.
  """
  GITHUB

  """
  Payment was made through Patreon.
  """
  PATREON
}

"""
The privacy of a sponsorship
"""
input TeamOrder {
  """
  Number of approving reviews required to update matching branches.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The list of required deployment environments
  """
  createdAt: DateTime!

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the branch's commit messages.
  """
  COMMIT_MESSAGES

  """
  Default to the pull request's body.
  """
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  """
  COMMIT_OR_PR_TITLE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  keyFingerprint: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  id: ID!

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The full path of the file. (Base64-encoded)
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Repository the tree entry belongs to
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Entry byte size
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  submodule: Submodule

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
interface Starrable {
  """
  The Node ID of the Starrable object
  """
  id: ID!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source access token.
  """
  sourceAccessToken: String!

  """
  The URL of the organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The ID of the enterprise the target organization belongs to.
  """
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the target organization.
  """
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new organization migration.
  """
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input UnarchiveProjectV2ItemInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  Whether to continue the migration on error. Defaults to `true`.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The signed URL to access the user-uploaded git archive.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to lock the source repository.
  """
  lockSource: Boolean

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  Are merge commits prohibited from being pushed to this branch.
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  fromRepository: Repository

  """
  The ID of the migration source.
  """
  id: ID!

  """
  The URL of the source repository.
  """
  sourceRepositoryUrl: URI

  """
  The visibility of the imported repository.
  """
  targetRepoVisibility: String
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository migration.
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The Node ID of the UnassignedEvent object
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  id: ID!

  """
  The user who owns the lists
  """
  user: User
}

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  contexts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The Node ID of the StatusCheckRollup object
  """
  id: ID!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The number of check runs in this rollup.
  """
  checkRunCount: Int!

  """
  Counts of check runs by state.
  """
  checkRunCountsByState: [CheckRunStateCount!]

  """
  A list of edges.
  """
  description: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  hasDiscussionsEnabled: Boolean

  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The description for this status context.
  """
  description: String

  """
  The Node ID of the StatusContext object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The full path of the file. (Base64-encoded)
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Repository the tree entry belongs to
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  The number of statuses with this state.
  """
  count: Int!

  """
  The state of a status context.
  """
  state: StatusState!
}

"""
The possible commit status states.
"""
input UpdateUserListsForItemInput {
  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Can admins override branch protection.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  The account number used to identify this Stripe Connect account.
  """
  accountId: String!

  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String

  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!

  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: SponsorsListing!

  """
  The URL to access this Stripe Connect account on Stripe's website.
  """
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  lockBranch: Boolean

  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  Number of approving reviews required to update matching branches.
  """
  node: Submodule
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  The list of required deployment environments
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node {
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
type Tag implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  The Git tag message.
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they are subscribed to the thread
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The subscription status is currently unavailable.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  The list of conditions for this ruleset
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP path for this comment
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Identifies the date and time when the object was last updated.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The HTTP URL for this comment
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A description of the list
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlabeledEvent object
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlockedEvent object
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of TransferIssue
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Ways in which team connections can be ordered.
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the Tree object
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Entry file name. (Base64-encoded)
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Entry file object.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  createdAt: DateTime!

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The organization with the updated web commit signoff setting.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdatePatreonSponsorabilityInput {
  """
  The name of the ruleset.
  """
  name: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The Node ID of the UnpinnedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  name: String!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnlockedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can subscribe to the thread
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can unsubscribe to the thread
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The team that defines the context of this discussion.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The time the action was initiated
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for this discussion
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

  """
  Whether or not the current viewer can pin this discussion.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  The Project ID to update.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Whether the project is public or not.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnsubscribedEvent object
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Whether the project is open or closed.
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The organization for which a transfer was initiated.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

"""
Autogenerated input type of TransferIssue
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the repository the issue should be transferred to
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Can admins override branch protection.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The glob-like pattern used to determine matching branches.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The wait timer in minutes.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  text: String!
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  id: ID

  """
  The issue that was unpinned
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Can admins override branch protection.
  """
  requiresDeployments: Boolean

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  lockBranch: Boolean

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The item unarchived from the project.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Autogenerated input type of UnarchiveRepository
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
type UnsubscribedEvent implements Node {
  """
  Number of approving reviews required to update matching branches.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Are successful deployments required before merging.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  Can admins override branch protection.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  clientMutationId: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  description: String

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  isPrivate: Boolean

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Indicates if the repository should have the issues feature enabled.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The GitHub Sponsors profile.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Node ID of the UnlockedEvent object
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input TransferIssueInput {
  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  enablePatreonSponsorships: Boolean!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The value for the allow private repository forking policy on the enterprise.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The note of ProjectCard.
  """
  note: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The wait timer in minutes.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The name of project.
  """
  name: String

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Can admins override branch protection.
  """
  clientMutationId: String

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  Can admins override branch protection.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  description: String

  """
  Whether or not the list is private
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  isPrivate: Boolean

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  message: String

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  name: String

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  expectedHeadOid: GitObjectID

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  user: User
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  description: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  Indicates if the repository should have the wiki feature enabled.
  """
  isPrivate: Boolean

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  notifyTeam: Boolean = true

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  teamMemberCount: Int = 1
}

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean

  """
  Indicates if the repository should have the project boards feature enabled.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Indicates if the repository displays a Sponsor button for financial contributions.
  """
  hasSponsorshipsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateUserListInput {
  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  item: UserListItems

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true

  """
  Turn on or off review assignment
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true

  """
  Notify the entire team of the PR if it is delegated
  """
  clientMutationId: String

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true

  """
  The number of team members to assign
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder

    """
    Filters Gists according to privacy.
    """
    privacy: GistPrivacy
  ): GistConnection!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The hovercard information for this user in a given context
  """
  hovercard(
    """
    The ID of the subject to get the hovercard in the context of
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  The interaction ability settings for this user.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """
  Whether or not this user is a GitHub Developer Program member.
  """
  isDeveloperProgramMember: Boolean!

  """
  Whether or not this user is a GitHub employee.
  """
  isEmployee: Boolean!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Whether the given account is sponsoring this user/organization.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """
    The login of the organization to match verified domains from.
    """
    login: String!
  ): [String!]!

  """
  A list of organizations the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Find a project by number.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Find a project by number.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing user's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing user's projects
  """
  projectsUrl: URI!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user's profile pronouns
  """
  pronouns: String

  """
  A list of public keys associated with this user.
  """
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicKeyConnection!

  """
  A list of pull requests associated with this user.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A list of repositories that the user recently contributed to.
  """
  repositoriesContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssues: Boolean

    """
    If true, include user repositories
    """
    includeUserRepositories: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  Replies this user has saved
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The field to order saved replies by.
    """
    orderBy: SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): SavedReplyConnection

  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SocialAccountConnection!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  Suggested names for user lists
  """
  suggestedListNames: [UserListSuggestion!]!

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder!

    """
    How far back in time to fetch contributed repositories
    """
    since: DateTime
  ): RepositoryConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Whether or not the viewer is able to follow the user.
  """
  viewerCanFollow: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  A list of repositories the given user is watching.
  """
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration {
  """
  The user was blocked for 1 day
  """
  ONE_DAY

  """
  The user was blocked for 30 days
  """
  ONE_MONTH

  """
  The user was blocked for 7 days
  """
  ONE_WEEK

  """
  The user was blocked permanently
  """
  PERMANENT

  """
  The user was blocked for 3 days
  """
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Number of days that the user was blocked for.
  """
  blockDuration: UserBlockDuration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UserBlockedEvent object
  """
  id: ID!

  """
  The user who was blocked.
  """
  subject: User
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was deleted.
  """
  deletedAt: DateTime

  """
  The actor who deleted this content
  """
  deletedBy: Actor

  """
  A summary of the changes for this edit
  """
  diff: String

  """
  When this content was edited
  """
  editedAt: DateTime!

  """
  The actor who edited this content
  """
  editor: Actor

  """
  The Node ID of the UserContentEdit object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection {
  """
  A list of edges.
  """
  edges: [UserContentEditEdge]

  """
  A list of nodes.
  """
  nodes: [UserContentEdit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserContentEdit
}

"""
Represents a user.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata {
  """
  Boolean to identify primary emails
  """
  primary: Boolean

  """
  Type of email
  """
  type: String

  """
  Email id
  """
  value: String!
}

"""
A user-curated list of repositories
"""
type UserList implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of this list
  """
  description: String

  """
  The Node ID of the UserList object
  """
  id: ID!

  """
  Whether or not this list is private
  """
  isPrivate: Boolean!

  """
  The items associated with this list
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListItemsConnection!

  """
  The date and time at which this list was created or last had items added to it
  """
  lastAddedAt: DateTime!

  """
  The name of this list
  """
  name: String!

  """
  The slug of this list
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user to which this list belongs
  """
  user: User!
}

"""
The connection type for UserList.
"""
type UserListConnection {
  """
  A list of edges.
  """
  edges: [UserListEdge]

  """
  A list of nodes.
  """
  nodes: [UserList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserList
}

"""
Types that can be added to a user list.
"""
union UserListItems = Repository

"""
The connection type for UserListItems.
"""
type UserListItemsConnection {
  """
  A list of edges.
  """
  edges: [UserListItemsEdge]

  """
  A list of nodes.
  """
  nodes: [UserListItems]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListItemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserListItems
}

"""
Represents a suggested user list.
"""
type UserListSuggestion {
  """
  The ID of the suggested user list
  """
  id: ID

  """
  The name of the suggested user list
  """
  name: String
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  The Node ID of the UserStatus object
  """
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection {
  """
  A list of edges.
  """
  edges: [UserStatusEdge]

  """
  A list of nodes.
  """
  nodes: [UserStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user statuses by.
  """
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField {
  """
  Order user statuses by when they were updated.
  """
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The DNS host name that should be used for verification.
  """
  dnsHostName: URI

  """
  The unicode encoded domain.
  """
  domain: URI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!

  """
  The Node ID of the VerifiableDomain object
  """
  id: ID!

  """
  Whether or not the domain is approved.
  """
  isApproved: Boolean!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """
  Whether or not the domain is verified.
  """
  isVerified: Boolean!

  """
  The owner of the domain.
  """
  owner: VerifiableDomainOwner!

  """
  The punycode encoded domain.
  """
  punycodeEncodedDomain: URI!

  """
  The time that the current verification token will expire.
  """
  tokenExpirationTime: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The current verification token for the domain.
  """
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection {
  """
  A list of edges.
  """
  edges: [VerifiableDomainEdge]

  """
  A list of nodes.
  """
  nodes: [VerifiableDomain]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order verifiable domains by.
  """
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField {
  """
  Order verifiable domains by their creation date.
  """
  CREATED_AT

  """
  Order verifiable domains by the domain name.
  """
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner = Enterprise | Organization

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to verify.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was verified.
  """
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Identifies the user who is related to this context.
  """
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable {
  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node & UniformResourceLocatable {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The HTTP path for this workflow
  """
  resourcePath: URI!

  """
  The runs of the workflow.
  """
  runs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the connection
    """
    orderBy: WorkflowRunOrder = {field: CREATED_AT, direction: DESC}
  ): WorkflowRunConnection!

  """
  The state of the workflow.
  """
  state: WorkflowState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow
  """
  url: URI!
}

"""
A workflow that must run for this rule to pass
"""
type WorkflowFileReference {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow that must run for this rule to pass
"""
input WorkflowFileReferenceInput {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow run.
"""
type WorkflowRun implements Node & UniformResourceLocatable {
  """
  The check suite this workflow run belongs to.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The log of deployment reviews
  """
  deploymentReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewConnection!

  """
  The event that triggered the workflow run
  """
  event: String!

  """
  The workflow file
  """
  file: WorkflowRunFile

  """
  The Node ID of the WorkflowRun object
  """
  id: ID!

  """
  The pending deployment requests of all check runs in this workflow run
  """
  pendingDeploymentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentRequestConnection!

  """
  The HTTP path for this workflow run
  """
  resourcePath: URI!

  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow run
  """
  url: URI!

  """
  The workflow executed in this workflow run.
  """
  workflow: Workflow!
}

"""
The connection type for WorkflowRun.
"""
type WorkflowRunConnection {
  """
  A list of edges.
  """
  edges: [WorkflowRunEdge]

  """
  A list of nodes.
  """
  nodes: [WorkflowRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkflowRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkflowRun
}

"""
An executed workflow file for a workflow run.
"""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  """
  The Node ID of the WorkflowRunFile object
  """
  id: ID!

  """
  The path of the workflow file relative to its repository.
  """
  path: String!

  """
  The direct link to the file in the repository which stores the workflow file.
  """
  repositoryFileUrl: URI!

  """
  The repository name and owner which stores the workflow file.
  """
  repositoryName: URI!

  """
  The HTTP path for this workflow run file
  """
  resourcePath: URI!

  """
  The parent workflow run execution for this file.
  """
  run: WorkflowRun!

  """
  The HTTP URL for this workflow run file
  """
  url: URI!

  """
  If the viewer has permissions to push to the repository which stores the workflow.
  """
  viewerCanPushRepository: Boolean!

  """
  If the viewer has permissions to read the repository which stores the workflow.
  """
  viewerCanReadRepository: Boolean!
}

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
input WorkflowRunOrder {
  """
  The direction in which to order workflow runs by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order workflows.
  """
  field: WorkflowRunOrderField!
}

"""
Properties by which workflow run connections can be ordered.
"""
enum WorkflowRunOrderField {
  """
  Order workflow runs by most recently created
  """
  CREATED_AT
}

"""
The possible states for a workflow.
"""
enum WorkflowState {
  """
  The workflow is active.
  """
  ACTIVE

  """
  The workflow was deleted from the git repository.
  """
  DELETED

  """
  The workflow was disabled by default on a fork.
  """
  DISABLED_FORK

  """
  The workflow was disabled for inactivity in the repository.
  """
  DISABLED_INACTIVITY

  """
  The workflow was disabled manually.
  """
  DISABLED_MANUALLY
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
type WorkflowsParameters {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReference!]!
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
input WorkflowsParametersInput {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReferenceInput!]!
}

"""
A valid x509 certificate string
"""
scalar X509Certificate
