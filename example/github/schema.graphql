
"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(
  """
  The identifier of the API preview that toggles this field.
  """
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """
  Abstract type of accepted global ID
  """
  abstractType: String

  """
  Accepted types of global IDs.
  """
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

"""
Autogenerated input type of AbortQueuedMigrations
"""
input AbortQueuedMigrationsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that is running the migrations.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of AbortQueuedMigrations
"""
type AbortQueuedMigrationsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AbortRepositoryMigration
"""
input AbortRepositoryMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the migration to be aborted.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["RepositoryMigration"])
}

"""
Autogenerated return type of AbortRepositoryMigration
"""
type AbortRepositoryMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the invitation being accepted
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The accepted topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation {
  """
  City
  """
  city: String

  """
  Country name
  """
  country: String

  """
  Country code
  """
  countryCode: String

  """
  Region name
  """
  region: String

  """
  Region or state code
  """
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType {
  """
  Indicates a team actor.
  """
  TEAM

  """
  Indicates a user actor.
  """
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  """
  The id of the assignable object to add assignees to.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to add as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the subject's comment connection.
  """
  commentEdge: IssueCommentEdge

  """
  The subject
  """
  subject: Node

  """
  The edge from the subject's timeline connection.
  """
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to comment on.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created discussion comment.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of AddDiscussionPollVote
"""
input AddDiscussionPollVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion poll option to vote for.
  """
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

"""
Autogenerated return type of AddDiscussionPollVote
"""
type AddDiscussionPollVotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The poll option that a vote was added to.
  """
  pollOption: DiscussionPollOption
}

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
input AddEnterpriseOrganizationMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise which owns the organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization the users will be added to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The role to assign the users in the organization
  """
  role: OrganizationMemberRole

  """
  The IDs of the enterprise members to add.
  """
  userIds: [ID!]!
}

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
type AddEnterpriseOrganizationMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users who were added to the organization.
  """
  users: [User!]
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will receive the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of adding the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of the labels to add.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was labeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")

  """
  The note on the card.
  """
  note: String

  """
  The Node ID of the ProjectColumn.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload {
  """
  The edge from the ProjectColumn's card connection.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectColumn
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column.
  """
  name: String!

  """
  The Node ID of the project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the project's column connection.
  """
  columnEdge: ProjectColumnEdge

  """
  The project
  """
  project: Project
}

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
input AddProjectV2DraftIssueInput {
  """
  The IDs of the assignees of the draft issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body of the draft issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to add the draft issue to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access.
  """
  title: String!
}

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
type AddProjectV2DraftIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The draft issue added to the project.
  """
  projectItem: ProjectV2Item
}

"""
Autogenerated input type of AddProjectV2ItemById
"""
input AddProjectV2ItemByIdInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the Issue or Pull Request to add.
  """
  contentId: ID!
    @possibleTypes(concreteTypes: ["DraftIssue", "Issue", "PullRequest"], abstractType: "ProjectV2ItemContent")

  """
  The ID of the Project to add the item to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of AddProjectV2ItemById
"""
type AddProjectV2ItemByIdPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item added to the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput {
  """
  The text of the comment. This field is required

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the commit to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  commitOID: GitObjectID

  """
  The comment id to reply to.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])

  """
  The relative path of the file to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  path: String

  """
  The line index in the diff to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  position: Int

  """
  The node ID of the pull request reviewing

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: PullRequestReviewComment

  """
  The edge from the review's comment connection.
  """
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput {
  """
  The contents of the review body comment.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The review line comments.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning
  """
  comments: [DraftPullRequestReviewComment]

  """
  The commit OID the review pertains to.
  """
  commitOID: GitObjectID

  """
  The event to perform on the pull request review.
  """
  event: PullRequestReviewEvent

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The review line comment threads.
  """
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created pull request review.
  """
  pullRequestReview: PullRequestReview

  """
  The edge from the pull request's review connection.
  """
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput {
  """
  Body of the thread's first comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments.
  """
  line: Int

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created thread.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput {
  """
  The text of the reply.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending review to which the reply will belong.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The Node ID of the thread to which this reply is being written.
  """
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created reply.
  """
  comment: PullRequestReviewComment
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji to react with.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Starrable ID to star.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The votable subject.
  """
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL of the domain
  """
  domain: URI!

  """
  The ID of the owner to add the domain to
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was added.
  """
  domain: VerifiableDomain
}

"""
Represents an 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who added this Pull Request to the merge queue
  """
  enqueuer: User

  """
  The Node ID of the AddedToMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was added to.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the AddedToProjectEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents an announcement banner.
"""
interface AnnouncementBanner {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean
}

"""
A GitHub App.
"""
type App implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the app.
  """
  description: String

  """
  The Node ID of the App object
  """
  id: ID!

  """
  The IP addresses of the app.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  A URL pointing to the app's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The name of the app.
  """
  name: String!

  """
  A slug based on the name of the app for use in URLs.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to the app's homepage.
  """
  url: URI!
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for approving deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to approve.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was approved.
  """
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectV2Item
"""
input ArchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to archive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ArchiveProjectV2Item
"""
type ArchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item archived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to mark as archived.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was marked as archived.
  """
  repository: Repository
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was assigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AssignedEvent object
  """
  id: ID!

  """
  Identifies the user who was assigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Types that can be assigned to issues.
"""
union Assignee = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection

  """
  The field to order Audit Logs by.
  """
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField {
  """
  Order audit log entries by timestamp
  """
  CREATED_AT
}

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who disabled auto-merge for this Pull Request
  """
  disabler: User

  """
  The Node ID of the AutoMergeDisabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event
  """
  pullRequest: PullRequest

  """
  The reason auto-merge was disabled
  """
  reason: String

  """
  The reason_code relating to why auto-merge was disabled
  """
  reasonCode: String
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoMergeEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest {
  """
  The email address of the author of this auto-merge request.
  """
  authorEmail: String

  """
  The commit message of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  commitBody: String

  """
  The commit title of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging
  """
  commitHeadline: String

  """
  When was this auto-merge request was enabled.
  """
  enabledAt: DateTime

  """
  The actor who created the auto-merge request.
  """
  enabledBy: Actor

  """
  The merge method of the auto-merge request. If a merge queue is required by
  the base branch, this value will be set by the merge queue when merging.
  """
  mergeMethod: PullRequestMergeMethod!

  """
  The pull request that this auto-merge request is set against.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (rebase) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoRebaseEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who enabled auto-merge (squash) for this Pull Request
  """
  enabler: User

  """
  The Node ID of the AutoSquashEnabledEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeFailedEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the AutomaticBaseChangeSucceededEvent object
  """
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
A (potentially binary) string encoded using base64.
"""
scalar Base64String

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the BaseRefChangedEvent object
  """
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefDeletedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the BaseRefForcePushedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Represents a Git blame.
"""
type Blame {
  """
  The list of ranges from a Git blame.
  """
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """
  Identifies the line author
  """
  commit: Commit!

  """
  The ending line for the range
  """
  endingLine: Int!

  """
  The starting line for the range
  """
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  Byte size of Blob object
  """
  byteSize: Int!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The Node ID of the Blob object
  """
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """
  Indicates whether the contents is truncated
  """
  isTruncated: Boolean!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  UTF8 text data or null if the Blob is binary
  """
  text: String
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable {
  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Bot object
  """
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this bot
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this bot
  """
  url: URI!
}

"""
Types which can be actors for `BranchActorAllowance` objects.
"""
union BranchActorAllowanceActor = App | Team | User

"""
Parameters to be used for the branch_name_pattern rule
"""
type BranchNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the branch_name_pattern rule
"""
input BranchNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConflictConnection!

  """
  A list of actors able to force push for this branch protection rule.
  """
  bypassForcePushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassForcePushAllowanceConnection!

  """
  A list of actors able to bypass PRs for this branch protection rule.
  """
  bypassPullRequestAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BypassPullRequestAllowanceConnection!

  """
  The actor who created this branch protection rule.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!

  """
  The Node ID of the BranchProtectionRule object
  """
  id: ID!

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean!

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean!

  """
  Repository refs that are protected by this rule
  """
  matchingRefs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters refs with query on name
    """
    query: String
  ): RefConnection!

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  A list push allowances for this branch protection rule.
  """
  pushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PushAllowanceConnection!

  """
  The repository associated with this branch protection rule.
  """
  repository: Repository

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean!

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  List of required status checks that must pass for commits to be accepted to matching branches.
  """
  requiredStatusChecks: [RequiredStatusCheckDescription!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean!

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean!

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean!

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean!

  """
  A list review dismissal allowances for this branch protection rule.
  """
  reviewDismissalAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  """
  Identifies the branch protection rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Identifies the conflicting branch protection rule.
  """
  conflictingBranchProtectionRule: BranchProtectionRule

  """
  Identifies the branch ref that has conflicting rules
  """
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleConflictEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRuleConflict]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input BulkSponsorship {
  """
  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Types that can represent a repository ruleset bypass actor.
"""
union BypassActor = App | Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type BypassForcePushAllowance implements Node {
  """
  The actor that can force push.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassForcePushAllowance object
  """
  id: ID!
}

"""
The connection type for BypassForcePushAllowance.
"""
type BypassForcePushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassForcePushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassForcePushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassForcePushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type BypassPullRequestAllowance implements Node {
  """
  The actor that can bypass.
  """
  actor: BranchActorAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the BypassPullRequestAllowance object
  """
  id: ID!
}

"""
The connection type for BypassPullRequestAllowance.
"""
type BypassPullRequestAllowanceConnection {
  """
  A list of edges.
  """
  edges: [BypassPullRequestAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [BypassPullRequestAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassPullRequestAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BypassPullRequestAllowance
}

"""
The Common Vulnerability Scoring System
"""
type CVSS {
  """
  The CVSS score associated with this advisory
  """
  score: Float!

  """
  The CVSS vector string associated with this advisory
  """
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node {
  """
  The id of the CWE
  """
  cweId: String!

  """
  A detailed description of this CWE
  """
  description: String!

  """
  The Node ID of the CWE object
  """
  id: ID!

  """
  The name of this CWE
  """
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection {
  """
  A list of edges.
  """
  edges: [CWEEdge]

  """
  A list of nodes.
  """
  nodes: [CWE]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise administrator invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of CancelSponsorship
"""
input CancelSponsorshipInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CancelSponsorship
"""
type CancelSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was being used at the time of cancellation.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """
  If set, the user status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """
  A short description of your current status.
  """
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Your updated status.
  """
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation {
  """
  The annotation's severity level.
  """
  annotationLevel: CheckAnnotationLevel

  """
  The path to the file that this annotation was made on.
  """
  blobUrl: URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The position of this annotation.
  """
  location: CheckAnnotationSpan!

  """
  The annotation's message.
  """
  message: String!

  """
  The path that this annotation was made on.
  """
  path: String!

  """
  Additional information about the annotation.
  """
  rawDetails: String

  """
  The annotation's title
  """
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection {
  """
  A list of edges.
  """
  edges: [CheckAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [CheckAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData {
  """
  Represents an annotation's information level
  """
  annotationLevel: CheckAnnotationLevel!

  """
  The location of the annotation
  """
  location: CheckAnnotationRange!

  """
  A short description of the feedback for these lines of code.
  """
  message: String!

  """
  The path of the file to add an annotation to.
  """
  path: String!

  """
  Details about this annotation.
  """
  rawDetails: String

  """
  The title that represents the annotation.
  """
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel {
  """
  An annotation indicating an inescapable error.
  """
  FAILURE

  """
  An annotation indicating some information.
  """
  NOTICE

  """
  An annotation indicating an ignorable error.
  """
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition {
  """
  Column number (1 indexed).
  """
  column: Int

  """
  Line number (1 indexed).
  """
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange {
  """
  The ending column of the range.
  """
  endColumn: Int

  """
  The ending line of the range.
  """
  endLine: Int!

  """
  The starting column of the range.
  """
  startColumn: Int

  """
  The starting line of the range.
  """
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan {
  """
  End position (inclusive).
  """
  end: CheckAnnotationPosition!

  """
  Start position (inclusive).
  """
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  """
  The check suite or run requires action.
  """
  ACTION_REQUIRED

  """
  The check suite or run has been cancelled.
  """
  CANCELLED

  """
  The check suite or run has failed.
  """
  FAILURE

  """
  The check suite or run was neutral.
  """
  NEUTRAL

  """
  The check suite or run was skipped.
  """
  SKIPPED

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check suite or run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check suite or run has succeeded.
  """
  SUCCESS

  """
  The check suite or run has timed out.
  """
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  """
  The check run's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckAnnotationConnection

  """
  The check suite that this run is a part of.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the check run was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check run.
  """
  conclusion: CheckConclusionState

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The corresponding deployment for this job, if any
  """
  deployment: Deployment

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: URI

  """
  A reference for the check run on the integrator's system.
  """
  externalId: String

  """
  The Node ID of the CheckRun object
  """
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The name of the check for this check run.
  """
  name: String!

  """
  Information about a pending deployment, if any, in this check run
  """
  pendingDeploymentRequest: DeploymentRequest

  """
  The permalink to the check run summary.
  """
  permalink: URI!

  """
  The repository associated with this check run.
  """
  repository: Repository!

  """
  The HTTP path for this check run.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the check run was started.
  """
  startedAt: DateTime

  """
  The current status of the check run.
  """
  status: CheckStatusState!

  """
  The check run's steps
  """
  steps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Step number
    """
    number: Int
  ): CheckStepConnection

  """
  A string representing the check run's summary
  """
  summary: String

  """
  A string representing the check run's text
  """
  text: String

  """
  A string representing the check run
  """
  title: String

  """
  The HTTP URL for this check run.
  """
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction {
  """
  A short explanation of what this action would do.
  """
  description: String!

  """
  A reference for the action on the integrator's system.
  """
  identifier: String!

  """
  The text to be displayed on a button in the web UI.
  """
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection {
  """
  A list of edges.
  """
  edges: [CheckRunEdge]

  """
  A list of nodes.
  """
  nodes: [CheckRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter {
  """
  Filters the check runs created by this application ID.
  """
  appId: Int

  """
  Filters the check runs by this name.
  """
  checkName: String

  """
  Filters the check runs by this type.
  """
  checkType: CheckRunType

  """
  Filters the check runs by these conclusions.
  """
  conclusions: [CheckConclusionState!]

  """
  Filters the check runs by this status. Superceded by statuses.
  """
  status: CheckStatusState

  """
  Filters the check runs by this status. Overrides status.
  """
  statuses: [CheckStatusState!]
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput {
  """
  The annotations that are made as part of the check run.
  """
  annotations: [CheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [CheckRunOutputImage!]

  """
  The summary of the check run (supports Commonmark).
  """
  summary: String!

  """
  The details of the check run (supports Commonmark).
  """
  text: String

  """
  A title to provide for this check run.
  """
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage {
  """
  The alternative text for the image.
  """
  alt: String!

  """
  A short image description.
  """
  caption: String

  """
  The full URL of the image.
  """
  imageUrl: URI!
}

"""
The possible states of a check run in a status rollup.
"""
enum CheckRunState {
  """
  The check run requires action.
  """
  ACTION_REQUIRED

  """
  The check run has been cancelled.
  """
  CANCELLED

  """
  The check run has been completed.
  """
  COMPLETED

  """
  The check run has failed.
  """
  FAILURE

  """
  The check run is in progress.
  """
  IN_PROGRESS

  """
  The check run was neutral.
  """
  NEUTRAL

  """
  The check run is in pending state.
  """
  PENDING

  """
  The check run has been queued.
  """
  QUEUED

  """
  The check run was skipped.
  """
  SKIPPED

  """
  The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check run has succeeded.
  """
  SUCCESS

  """
  The check run has timed out.
  """
  TIMED_OUT

  """
  The check run is in waiting state.
  """
  WAITING
}

"""
Represents a count of the state of a check run.
"""
type CheckRunStateCount {
  """
  The number of check runs with this state.
  """
  count: Int!

  """
  The state of a check run.
  """
  state: CheckRunState!
}

"""
The possible types of check runs.
"""
enum CheckRunType {
  """
  Every check run available.
  """
  ALL

  """
  The latest check run.
  """
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run has been requested.
  """
  REQUESTED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
A single check step.
"""
type CheckStep {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The step's name.
  """
  name: String!

  """
  The index of the step in the list of steps of the parent check run.
  """
  number: Int!

  """
  Number of seconds to completion.
  """
  secondsToCompletion: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection {
  """
  A list of edges.
  """
  edges: [CheckStepEdge]

  """
  A list of nodes.
  """
  nodes: [CheckStep]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckStepEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node {
  """
  The GitHub App which created this check suite.
  """
  app: App

  """
  The name of the branch for this check suite.
  """
  branch: Ref

  """
  The check runs associated with a check suite.
  """
  checkRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check runs by this type.
    """
    filterBy: CheckRunFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckRunConnection

  """
  The commit for this check suite
  """
  commit: Commit!

  """
  The conclusion of this check suite.
  """
  conclusion: CheckConclusionState

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who triggered the check suite.
  """
  creator: User

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the CheckSuite object
  """
  id: ID!

  """
  A list of open pull requests matching the check suite.
  """
  matchingPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection

  """
  The push that triggered this check suite.
  """
  push: Push

  """
  The repository associated with this check suite.
  """
  repository: Repository!

  """
  The HTTP path for this check suite
  """
  resourcePath: URI!

  """
  The status of this check suite.
  """
  status: CheckStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this check suite
  """
  url: URI!

  """
  The workflow run associated with this check suite.
  """
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference {
  """
  The node ID of the application that owns the check suite.
  """
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection {
  """
  A list of edges.
  """
  edges: [CheckSuiteEdge]

  """
  A list of nodes.
  """
  nodes: [CheckSuite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter {
  """
  Filters the check suites created by this application ID.
  """
  appId: Int

  """
  Filters the check suites by this name.
  """
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to clear the labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlabeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
input ClearProjectV2ItemFieldValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to be cleared.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )

  """
  The ID of the item to be cleared.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
type ClearProjectV2ItemFieldValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput {
  """
  The description of the project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to clone the source project's workflows.
  """
  includeWorkflows: Boolean!

  """
  The name of the project.
  """
  name: String!

  """
  The visibility of the project, defaults to false (private).
  """
  public: Boolean

  """
  The source project to clone.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The owner ID to create the project under.
  """
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the JobStatus for populating cloned fields.
  """
  jobStatusId: String

  """
  The new cloned project.
  """
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The Node ID of the template repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Autogenerated input type of CloseDiscussion
"""
input CloseDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be closed.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The reason why the discussion is being closed.
  """
  reason: DiscussionCloseReason = RESOLVED
}

"""
Autogenerated return type of CloseDiscussion
"""
type CloseDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was closed.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be closed.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The reason the issue is to be closed.
  """
  stateReason: IssueClosedStateReason
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was closed.
  """
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be closed.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was closed.
  """
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was closed.
  """
  closable: Closable!

  """
  Object which triggered the creation of this event.
  """
  closer: Closer

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ClosedEvent object
  """
  id: ID!

  """
  The HTTP path for this closed event.
  """
  resourcePath: URI!

  """
  The reason the issue state was changed to closed.
  """
  stateReason: IssueStateReason

  """
  The HTTP URL for this closed event.
  """
  url: URI!
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node {
  """
  The body of the Code of Conduct
  """
  body: String

  """
  The Node ID of the CodeOfConduct object
  """
  id: ID!

  """
  The key for the Code of Conduct
  """
  key: String!

  """
  The formal name of the Code of Conduct
  """
  name: String!

  """
  The HTTP path for this Code of Conduct
  """
  resourcePath: URI

  """
  The HTTP URL for this Code of Conduct
  """
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  """
  All collaborators the authenticated user can see.
  """
  ALL

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """
  All outside collaborators of an organization-owned subject.
  """
  OUTSIDE
}

"""
Represents a comment.
"""
interface Comment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Comment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  """
  Author has been invited to collaborate on the repository.
  """
  COLLABORATOR

  """
  Author has previously committed to the repository.
  """
  CONTRIBUTOR

  """
  Author has not previously committed to GitHub.
  """
  FIRST_TIMER

  """
  Author has not previously committed to the repository.
  """
  FIRST_TIME_CONTRIBUTOR

  """
  Author is a placeholder for an unclaimed user.
  """
  MANNEQUIN

  """
  Author is a member of the organization that owns the repository.
  """
  MEMBER

  """
  Author has no association with the repository.
  """
  NONE

  """
  Author is the owner of the repository.
  """
  OWNER
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  """
  Unable to create comment because repository is archived.
  """
  ARCHIVED

  """
  You cannot update this comment
  """
  DENIED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """
  Unable to create comment because issue is locked.
  """
  LOCKED

  """
  You must be logged in to update this comment.
  """
  LOGIN_REQUIRED

  """
  Repository is under maintenance.
  """
  MAINTENANCE

  """
  At least one email address must be verified to update this comment.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user who authored the deleted comment.
  """
  deletedCommentAuthor: Actor

  """
  The Node ID of the CommentDeletedEvent object
  """
  id: ID!
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The number of additions in this commit.
  """
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection

  """
  Authorship details of the commit.
  """
  author: GitActor

  """
  Check if the committer and the author match.
  """
  authoredByCommitter: Boolean!

  """
  The datetime when this commit was authored.
  """
  authoredDate: DateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GitActorConnection!

  """
  Fetches `git blame` information.
  """
  blame(
    """
    The file whose Git blame information you want.
    """
    path: String!
  ): Blame!

  """
  We recommend using the `changedFilesIfAvailable` field instead of
  `changedFiles`, as `changedFiles` will cause your request to return an error
  if GitHub is unable to calculate the number of changed files.
  """
  changedFiles: Int!
    @deprecated(
      reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC."
    )

  """
  The number of changed files in this commit. If GitHub is unable to calculate
  the number of changed files (for example due to a timeout), this will return
  `null`. We recommend using this field instead of `changedFiles`.
  """
  changedFilesIfAvailable: Int

  """
  The check suites associated with a commit.
  """
  checkSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check suites by this type.
    """
    filterBy: CheckSuiteFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CheckSuiteConnection

  """
  Comments made on the commit.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The datetime when this commit was committed.
  """
  committedDate: DateTime!

  """
  Check if committed via GitHub web UI.
  """
  committedViaWeb: Boolean!

  """
  Committer details of the commit.
  """
  committer: GitActor

  """
  The number of deletions in this commit.
  """
  deletions: Int!

  """
  The deployments associated with a commit.
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection

  """
  The tree entry representing the file located at the given path.
  """
  file(
    """
    The path for the file
    """
    path: String!
  ): TreeEntry

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    Allows specifying a beginning time or date for fetching commits.
    """
    since: GitTimestamp

    """
    Allows specifying an ending time or date for fetching commits.
    """
    until: GitTimestamp
  ): CommitHistoryConnection!

  """
  The Node ID of the Commit object
  """
  id: ID!

  """
  The Git commit message
  """
  message: String!

  """
  The Git commit message body
  """
  messageBody: String!

  """
  The commit message body rendered to HTML.
  """
  messageBodyHTML: HTML!

  """
  The Git commit message headline
  """
  messageHeadline: String!

  """
  The commit message headline rendered to HTML.
  """
  messageHeadlineHTML: HTML!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The organization this commit was made on behalf of.
  """
  onBehalfOf: Organization

  """
  The parents of a commit.
  """
  parents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection!

  """
  The datetime when this commit was pushed.
  """
  pushedDate: DateTime @deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")

  """
  The Repository this commit belongs to
  """
  repository: Repository!

  """
  The HTTP path for this commit
  """
  resourcePath: URI!

  """
  Commit signing information, if present.
  """
  signature: GitSignature

  """
  Status information for this commit
  """
  status: Status

  """
  Check and Status rollup information for this commit.
  """
  statusCheckRollup: StatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """
  Commit's root Tree
  """
  tree: Tree!

  """
  The HTTP path for the tree of this commit
  """
  treeResourcePath: URI!

  """
  The HTTP URL for the tree of this commit
  """
  treeUrl: URI!

  """
  The HTTP URL for this commit
  """
  url: URI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]

  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
type CommitAuthorEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
input CommitAuthorEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the CommitComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the file path associated with the comment.
  """
  path: String

  """
  Identifies the line position associated with the comment.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this commit comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this commit comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection {
  """
  A list of edges.
  """
  edges: [CommitCommentEdge]

  """
  A list of nodes.
  """
  nodes: [CommitComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommitComment
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit

  """
  The Node ID of the CommitCommentThread object
  """
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field by which to order commit contributions.
  """
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField {
  """
  Order commit contributions by how many commits they represent.
  """
  COMMIT_COUNT

  """
  Order commit contributions by when they were made.
  """
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository {
  """
  The commit contributions, each representing a day.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): CreatedCommitContributionConnection!

  """
  The repository in which the commits were made.
  """
  repository: Repository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: URI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A message to include with a new commit
"""
input CommitMessage {
  """
  The body of the message.
  """
  body: String

  """
  The headline of the message.
  """
  headline: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
type CommitMessagePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
input CommitMessagePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input CommittableBranch {
  """
  The unqualified name of the branch to append the commit to.
  """
  branchName: String

  """
  The Node ID of the Ref to be updated.
  """
  id: ID

  """
  The nameWithOwner of the repository to commit to.
  """
  repositoryNameWithOwner: String
}

"""
Parameters to be used for the committer_email_pattern rule
"""
type CommitterEmailPatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the committer_email_pattern rule
"""
input CommitterEmailPatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node {
  """
  The number of commits ahead of the base branch.
  """
  aheadBy: Int!

  """
  The base revision of this comparison.
  """
  baseTarget: GitObject!

  """
  The number of commits behind the base branch.
  """
  behindBy: Int!

  """
  The commits which compose this comparison.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComparisonCommitConnection!

  """
  The head revision of this comparison.
  """
  headTarget: GitObject!

  """
  The Node ID of the Comparison object
  """
  id: ID!

  """
  The status of this comparison.
  """
  status: ComparisonStatus!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection {
  """
  The total count of authors and co-authors across all commits.
  """
  authorCount: Int!

  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The status of a git comparison between two refs.
"""
enum ComparisonStatus {
  """
  The head ref is ahead of the base ref.
  """
  AHEAD

  """
  The head ref is behind the base ref.
  """
  BEHIND

  """
  The head ref is both ahead and behind of the base ref, indicating git history has diverged.
  """
  DIVERGED

  """
  The head ref and base ref are identical.
  """
  IDENTICAL
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was connected.
  """
  subject: ReferencedSubject!
}

"""
The Contributing Guidelines for a repository.
"""
type ContributingGuidelines {
  """
  The body of the Contributing Guidelines.
  """
  body: String

  """
  The HTTP path for the Contributing Guidelines.
  """
  resourcePath: URI

  """
  The HTTP URL for the Contributing Guidelines.
  """
  url: URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """
  A list of the months of contributions in this calendar.
  """
  months: [ContributionCalendarMonth!]!

  """
  The count of total contributions in the calendar.
  """
  totalContributions: Int!

  """
  A list of the weeks of contributions in this calendar.
  """
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """
  How many contributions were made by the user on this day.
  """
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: ContributionLevel!

  """
  The day this square represents.
  """
  date: Date!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth {
  """
  The date of the first day of this month.
  """
  firstDay: Date!

  """
  The name of the month.
  """
  name: String!

  """
  How many weeks started in this month.
  """
  totalWeeks: Int!

  """
  The year the month occurred in.
  """
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek {
  """
  The days of contributions in this week.
  """
  contributionDays: [ContributionCalendarDay!]!

  """
  The date of the earliest square in this week.
  """
  firstDay: Date!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel {
  """
  Lowest 25% of days of contributions.
  """
  FIRST_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE

  """
  No contributions occurred.
  """
  NONE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection {
  """
  Commit contributions made by the user, grouped by repository.
  """
  commitContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!

  """
  A calendar of this user's contributions on GitHub.
  """
  contributionCalendar: ContributionCalendar!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  """
  doesEndInCurrentMonth: Boolean!

  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date

  """
  The ending date and time of this collection.
  """
  endedAt: DateTime!

  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: CreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """
  Determine if there are any contributions in this collection.
  """
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """
  Whether or not the collector's time span is all within the same day.
  """
  isSingleDay: Boolean!

  """
  A list of issues the user opened.
  """
  issueContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  Issue contributions made by the user, grouped by repository.
  """
  issueContributionsByRepository(
    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: JoinedGitHubContribution

  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: ContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: ContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: CreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: CreatedPullRequestContribution

  """
  Pull request contributions made by the user.
  """
  pullRequestContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  Pull request contributions made by the user, grouped by repository.
  """
  pullRequestContributionsByRepository(
    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!

  """
  Pull request review contributions made by the user. Returns the most recently
  submitted review for each PR reviewed by the user.
  """
  pullRequestReviewContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first repository ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """
  The beginning date and time of this collection.
  """
  startedAt: DateTime!

  """
  How many commits were made by the user in this time span.
  """
  totalCommitContributions: Int!

  """
  How many issues the user opened.
  """
  totalIssueContributions(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull requests the user opened.
  """
  totalPullRequestContributions(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull request reviews the user left.
  """
  totalPullRequestReviewContributions: Int!

  """
  How many different repositories the user committed to.
  """
  totalRepositoriesWithContributedCommits: Int!

  """
  How many different repositories the user opened issues in.
  """
  totalRepositoriesWithContributedIssues(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many different repositories the user left pull request reviews in.
  """
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """
  How many different repositories the user opened pull requests in.
  """
  totalRepositoriesWithContributedPullRequests(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many repositories the user created.
  """
  totalRepositoryContributions(
    """
    Should the user's first repository ever be excluded from this count.
    """
    excludeFirst: Boolean = false
  ): Int!

  """
  The user who made the contributions in this collection.
  """
  user: User!
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput {
  """
  The body of the newly created issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to convert.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The ID of the repository to create the issue in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to convert to draft
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is now a draft.
  """
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ConvertToDraftEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this convert to draft event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this convert to draft event.
  """
  url: URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ConvertedNoteToIssueEvent object
  """
  id: ID!

  """
  Project referenced by event.
  """
  project: Project @preview(toggledBy: "starfox-preview")

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")

  """
  Column name referenced by this project event.
  """
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
type ConvertedToDiscussionEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The discussion that the issue was converted into.
  """
  discussion: Discussion

  """
  The Node ID of the ConvertedToDiscussionEvent object
  """
  id: ID!
}

"""
Autogenerated input type of CopyProjectV2
"""
input CopyProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Include draft issues in the new project
  """
  includeDraftIssues: Boolean = false

  """
  The owner ID of the new project.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The ID of the source Project to copy.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CopyProjectV2
"""
type CopyProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The copied project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the owner scoping the reattributable data.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])

  """
  The Node ID of the account owning the data to reattribute.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])

  """
  The Node ID of the account which may claim the data.
  """
  targetId: ID! @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"])
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner scoping the reattributable data.
  """
  owner: Organization

  """
  The account owning the data to reattribute.
  """
  source: Claimable

  """
  The account which may claim the data.
  """
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  Is branch creation a protected operation.
  """
  blocksCreations: Boolean

  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]

  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String!

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  The list of required status checks
  """
  requiredStatusChecks: [RequiredStatusCheckInput!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The name of the check.
  """
  name: String!

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload {
  """
  The newly created check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload {
  """
  The newly created check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCommitOnBranch
"""
input CreateCommitOnBranchInput {
  """
  The Ref to be updated.  Must be a branch.
  """
  branch: CommittableBranch!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The git commit oid expected at the head of the branch prior to the commit
  """
  expectedHeadOid: GitObjectID!

  """
  A description of changes to files in this commit.
  """
  fileChanges: FileChanges

  """
  The commit message the be included with the commit.
  """
  message: CommitMessage!
}

"""
Autogenerated return type of CreateCommitOnBranch
"""
type CreateCommitOnBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new commit.
  """
  commit: Commit

  """
  The ref which has been updated to point to the new commit.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Short description of the deployment.
  """
  description: String = ""

  """
  Name for the target deployment environment.
  """
  environment: String = "production"

  """
  JSON payload with extra information about the deployment.
  """
  payload: String = "{}"

  """
  The node ID of the ref to be deployed.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]

  """
  Specifies a task to execute.
  """
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment.
  """
  deployment: Deployment
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the deployment.
  """
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])

  """
  A short description of the status. Maximum length of 140 characters.
  """
  description: String = ""

  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String

  """
  Sets the URL for accessing your environment.
  """
  environmentUrl: String = ""

  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""

  """
  The state of the deployment.
  """
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment status.
  """
  deploymentStatus: DeploymentStatus
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  """
  The body of the discussion.
  """
  body: String!

  """
  The id of the discussion category to associate with this discussion.
  """
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the repository on which to create the discussion.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just created.
  """
  discussion: Discussion
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput {
  """
  The logins for the administrators of the new organization.
  """
  adminLogins: [String!]!

  """
  The email used for sending billing receipts.
  """
  billingEmail: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise owning the new organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the new organization.
  """
  login: String!

  """
  The profile name of the new organization.
  """
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise that owns the created organization.
  """
  enterprise: Enterprise

  """
  The organization that was created.
  """
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the environment.
  """
  name: String!

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new or existing environment.
  """
  environment: Environment
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String

  """
  The ID of the owner for which to create the new IP allow list entry.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was created.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  The Node ID for the user assignee for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title for the issue.
  """
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new issue.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new label.
  """
  label: Label
}

"""
Autogenerated input type of CreateLinkedBranch
"""
input CreateLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to link to.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The name of the new branch. Defaults to issue number and title.
  """
  name: String

  """
  The commit SHA to base the new branch on.
  """
  oid: GitObjectID!

  """
  ID of the repository to create the branch in. Defaults to the issue repository.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLinkedBranch
"""
type CreateLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was linked to.
  """
  issue: Issue

  """
  The new branch issue reference.
  """
  linkedBranch: LinkedBranch
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String

  """
  The migration source name.
  """
  name: String!

  """
  The ID of the organization that will own the migration source.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The migration source type.
  """
  type: MigrationSourceType!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: String
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created migration source.
  """
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String!

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the GitHub-provided template.
  """
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  project: Project
}

"""
Autogenerated input type of CreateProjectV2Field
"""
input CreateProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The data type of the field.
  """
  dataType: ProjectV2CustomFieldType!

  """
  The name of the field.
  """
  name: String!

  """
  The ID of the Project to create the field in.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT
  """
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

"""
Autogenerated return type of CreateProjectV2Field
"""
type CreateProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of CreateProjectV2
"""
input CreateProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "OrganizationOrUser")

  """
  The repository to link the project to.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  The team to link the project to. The team will be granted read permissions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the project.
  """
  title: String!
}

"""
Autogenerated return type of CreateProjectV2
"""
type CreateProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this pull request should be a draft.
  """
  draft: Boolean = false

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!

  """
  The Node ID of the head repository.
  """
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean = true

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the pull request.
  """
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """
  The GitObjectID that the new Ref shall target. Must point to a commit.
  """
  oid: GitObjectID!

  """
  The Node ID of the Repository to create the Ref in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created ref.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean = true

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean = false

  """
  The URL for a web page about this repository.
  """
  homepageUrl: URI

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
Autogenerated input type of CreateRepositoryRuleset
"""
input CreateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The set of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput!

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The name of the ruleset.
  """
  name: String!

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The global relay id of the source in which a new ruleset should be created in.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository"], abstractType: "RuleSource")

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of CreateRepositoryRuleset
"""
type CreateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of CreateSponsorsListing
"""
input CreateSponsorsListingInput {
  """
  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.
  """
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted.
  """
  contactEmail: String

  """
  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information.
  """
  fiscalHostLogin: String

  """
  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified.
  """
  fiscallyHostedProjectProfileUrl: String

  """
  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported.
  """
  fullDescription: String

  """
  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization.
  """
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode

  """
  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of CreateSponsorsListing
"""
type CreateSponsorsListingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of CreateSponsorsTier
"""
input CreateSponsorsTierInput {
  """
  The value of the new tier in US dollars. Valid values: 1-12000.
  """
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.
  """
  description: String!

  """
  Whether sponsorships using this tier should happen monthly/yearly or just once.
  """
  isRecurring: Boolean = true

  """
  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible.
  """
  publish: Boolean = false

  """
  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization.
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])

  """
  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.
  """
  repositoryName: String

  """
  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given.
  """
  repositoryOwnerLogin: String

  """
  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  Optional message new sponsors at this tier will receive.
  """
  welcomeMessage: String
}

"""
Autogenerated return type of CreateSponsorsTier
"""
type CreateSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new tier.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of CreateSponsorship
"""
input CreateSponsorshipInput {
  """
  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
  """
  amount: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
  """
  isRecurring: Boolean

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorable.
  """
  receiveEmails: Boolean = true

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String

  """
  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
  """
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of CreateSponsorship
"""
type CreateSponsorshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The sponsorship that was started.
  """
  sponsorship: Sponsorship
}

"""
Autogenerated input type of CreateSponsorships
"""
input CreateSponsorshipsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorables.
  """
  receiveEmails: Boolean = false

  """
  The username of the user or organization who is acting as the sponsor, paying for the sponsorships.
  """
  sponsorLogin: String!

  """
  The list of maintainers to sponsor and for how much apiece.
  """
  sponsorships: [BulkSponsorship!]!
}

"""
Autogenerated return type of CreateSponsorships
"""
type CreateSponsorshipsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users and organizations who received a sponsorship.
  """
  sponsorables: [Sponsorable!]
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput {
  """
  The content of the comment. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  teamDiscussionComment: TeamDiscussionComment
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput {
  """
  The content of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If true, restricts the visibility of this discussion to team members and
  organization owners. If false or not specified, allows any organization member
  to view this discussion.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  private: Boolean

  """
  The ID of the team to which the discussion belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
  """
  title: String
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  teamDiscussion: TeamDiscussion
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )
}

"""
Autogenerated input type of CreateUserList
"""
input CreateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean = false

  """
  The name of the new list
  """
  name: String!
}

"""
Autogenerated return type of CreateUserList
"""
type CreateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just created
  """
  list: UserList

  """
  The user who created the list
  """
  viewer: User
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution {
  """
  How many commits were made on this day to this repository by the user.
  """
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository the user made a commit in.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedCommitContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedCommitContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The issue that was opened.
  """
  issue: Issue!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedIssueContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedIssueContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request that was opened.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request the user reviewed.
  """
  pullRequest: PullRequest!

  """
  The review the user left on the pull request.
  """
  pullRequestReview: PullRequestReview!

  """
  The repository containing the pull request that the user reviewed.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestReviewContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestReviewContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository that was created.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection {
  """
  A list of edges.
  """
  edges: [CreatedRepositoryContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedRepositoryContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the CrossReferencedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies when the reference was made.
  """
  referencedAt: DateTime!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request to which the reference was made.
  """
  target: ReferencedSubject!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Checks if the target will be closed when the source is merged.
  """
  willCloseTarget: Boolean!
}

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `name` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  name: String

  """
  The reason why the suggested topic is declined.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `reason` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  reason: TopicSuggestionDeclineReason

  """
  The Node ID of the repository.

  **Upcoming Change on 2024-04-01 UTC**
  **Description:** `repositoryId` will be removed.
  **Reason:** Suggested topics are no longer supported
  """
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The declined topic.
  """
  topic: Topic @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField {
  """
  Can read, write, and administrate repos by default
  """
  ADMIN

  """
  No access
  """
  NONE

  """
  Can read repos by default
  """
  READ

  """
  Can read and write repos by default
  """
  WRITE
}

"""
Entities that can be deleted.
"""
interface Deletable {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  """
  The global relay id of the branch protection rule to be deleted.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the deployment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node id of the discussion comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion comment that was just deleted.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the discussion to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just deleted.
  """
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the environment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to delete.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was deleted.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to delete.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the issue belonged to
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the label to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLinkedBranch
"""
input DeleteLinkedBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the linked branch
  """
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

"""
Autogenerated return type of DeleteLinkedBranch
"""
type DeleteLinkedBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue the linked branch was unlinked from.
  """
  issue: Issue
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the package version to be deleted.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the operation succeeded.
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput {
  """
  The id of the card to delete.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The column the deleted card was in.
  """
  column: ProjectColumn

  """
  The deleted card ID.
  """
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to delete.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted column ID.
  """
  deletedColumnId: ID

  """
  The project the deleted column was in.
  """
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository or organization the project was removed from.
  """
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectV2Field
"""
input DeleteProjectV2FieldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to delete.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )
}

"""
Autogenerated return type of DeleteProjectV2Field
"""
type DeleteProjectV2FieldPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted field.
  """
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of DeleteProjectV2
"""
input DeleteProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to delete.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated input type of DeleteProjectV2Item
"""
input DeleteProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be removed.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project from which the item should be removed.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of DeleteProjectV2Item
"""
type DeleteProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted item.
  """
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProjectV2
"""
type DeleteProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted Project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeleteProjectV2Workflow
"""
input DeleteProjectV2WorkflowInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the workflow to be removed.
  """
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

"""
Autogenerated return type of DeleteProjectV2Workflow
"""
type DeleteProjectV2WorkflowPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted workflow.
  """
  deletedWorkflowId: ID

  """
  The project the deleted workflow was in.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request review the deleted comment belonged to.
  """
  pullRequestReview: PullRequestReview

  """
  The deleted pull request review comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to delete.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the Ref to be deleted.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryRuleset
"""
input DeleteRepositoryRulesetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The global relay id of the repository ruleset to be deleted.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

"""
Autogenerated return type of DeleteRepositoryRuleset
"""
type DeleteRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteUserList
"""
input DeleteUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the list to delete.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])
}

"""
Autogenerated return type of DeleteUserList
"""
type DeleteUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the list that will be deleted
  """
  user: User
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owning account from which the domain was deleted.
  """
  owner: VerifiableDomainOwner
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DemilestonedEvent object
  """
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!
}

"""
A Dependabot Update for a dependency in a repository
"""
type DependabotUpdate implements RepositoryNode {
  """
  The error from a dependency update
  """
  error: DependabotUpdateError

  """
  The associated pull request
  """
  pullRequest: PullRequest

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
An error produced from a Dependabot Update
"""
type DependabotUpdateError {
  """
  The body of the error
  """
  body: String!

  """
  The error code
  """
  errorType: String!

  """
  The title of the error
  """
  title: String!
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  """
  Does the dependency itself have dependencies?
  """
  hasDependencies: Boolean!

  """
  The original name of the package, as it appears in the manifest.
  """
  packageLabel: String!
    @deprecated(
      reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC."
    )

  """
  The dependency package manager
  """
  packageManager: String

  """
  The name of the package in the canonical form used by the package manager.
  """
  packageName: String!

  """
  The repository containing the package
  """
  repository: Repository

  """
  The dependency version requirements
  """
  requirements: String!
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphDependency
}

"""
The possible ecosystems of a dependency graph package.
"""
enum DependencyGraphEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node @preview(toggledBy: "hawkgirl-preview") {
  """
  Path to view the manifest file blob
  """
  blobPath: String!

  """
  A list of manifest dependencies
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyGraphDependencyConnection

  """
  The number of dependencies listed in the manifest
  """
  dependenciesCount: Int

  """
  Is the manifest too big to parse?
  """
  exceedsMaxSize: Boolean!

  """
  Fully qualified manifest filename
  """
  filename: String!

  """
  The Node ID of the DependencyGraphManifest object
  """
  id: ID!

  """
  Were we able to parse the manifest?
  """
  parseable: Boolean!

  """
  The repository containing the manifest
  """
  repository: Repository!
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  """
  A list of edges.
  """
  edges: [DependencyGraphManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphManifest
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DeployKey object
  """
  id: ID!

  """
  The deploy key.
  """
  key: String!

  """
  Whether or not the deploy key is read only.
  """
  readOnly: Boolean!

  """
  The deploy key title.
  """
  title: String!

  """
  Whether or not the deploy key has been verified.
  """
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  """
  A list of edges.
  """
  edges: [DeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [DeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment associated with the 'deployed' event.
  """
  deployment: Deployment!

  """
  The Node ID of the DeployedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The ref associated with the 'deployed' event.
  """
  ref: Ref
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node {
  """
  Identifies the commit sha of the deployment.
  """
  commit: Commit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment description.
  """
  description: String

  """
  The latest environment to which this deployment was made.
  """
  environment: String

  """
  The Node ID of the Deployment object
  """
  id: ID!

  """
  The latest environment to which this deployment was made.
  """
  latestEnvironment: String

  """
  The latest status of this deployment.
  """
  latestStatus: DeploymentStatus

  """
  The original environment to which this deployment was made.
  """
  originalEnvironment: String

  """
  Extra information that a deployment system might need.
  """
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: Ref

  """
  Identifies the repository associated with the deployment.
  """
  repository: Repository!

  """
  The current state of the deployment.
  """
  state: DeploymentState

  """
  A list of statuses associated with the deployment.
  """
  statuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentStatusConnection

  """
  The deployment task.
  """
  task: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for Deployment.
"""
type DeploymentConnection {
  """
  A list of edges.
  """
  edges: [DeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [Deployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The deployment status that updated the deployment environment.
  """
  deploymentStatus: DeploymentStatus!

  """
  The Node ID of the DeploymentEnvironmentChangedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order deployments by.
  """
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField {
  """
  Order collection by creation time
  """
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The timeout in minutes for this protection rule.
  """
  timeout: Int!

  """
  The type of protection rule.
  """
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection {
  """
  A list of edges.
  """
  edges: [DeploymentProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType {
  """
  Required reviewers
  """
  REQUIRED_REVIEWERS

  """
  Wait timer
  """
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest {
  """
  Whether or not the current user can approve the deployment
  """
  currentUserCanApprove: Boolean!

  """
  The target environment of the deployment
  """
  environment: Environment!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimer: Int!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection {
  """
  A list of edges.
  """
  edges: [DeploymentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node {
  """
  The comment the user left.
  """
  comment: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The environments approved or rejected
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  The Node ID of the DeploymentReview object
  """
  id: ID!

  """
  The decision of the user.
  """
  state: DeploymentReviewState!

  """
  The user that reviewed the deployment.
  """
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState {
  """
  The deployment was approved.
  """
  APPROVED

  """
  The deployment was rejected.
  """
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection {
  """
  A list of edges.
  """
  edges: [DeploymentReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState {
  """
  The pending deployment was not updated after 30 minutes.
  """
  ABANDONED

  """
  The deployment is currently active.
  """
  ACTIVE

  """
  An inactive transient deployment.
  """
  DESTROYED

  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment has queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the deployment associated with status.
  """
  deployment: Deployment!

  """
  Identifies the description of the deployment.
  """
  description: String

  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String @preview(toggledBy: "flash-preview")

  """
  Identifies the environment URL of the deployment.
  """
  environmentUrl: URI

  """
  The Node ID of the DeploymentStatus object
  """
  id: ID!

  """
  Identifies the log URL of the deployment.
  """
  logUrl: URI

  """
  Identifies the current state of the deployment.
  """
  state: DeploymentStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection {
  """
  A list of edges.
  """
  edges: [DeploymentStatusEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState {
  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment is queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Autogenerated input type of DequeuePullRequest
"""
input DequeuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pull request to be dequeued.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DequeuePullRequest
"""
type DequeuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry of the dequeued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  """
  The left side of the diff.
  """
  LEFT

  """
  The right side of the diff.
  """
  RIGHT
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to disable auto merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto merge was disabled on.
  """
  pullRequest: PullRequest
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the DisconnectedEvent object
  """
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request from which the issue was disconnected.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was disconnected.
  """
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The comment chosen as this discussion's answer, if any.
  """
  answer: DiscussionComment

  """
  The time when a user chose this discussion's answer, if answered.
  """
  answerChosenAt: DateTime

  """
  The user who chose this discussion's answer, if answered.
  """
  answerChosenBy: Actor

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The main text of the discussion post.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The category for this discussion.
  """
  category: DiscussionCategory!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The replies to the discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the Discussion object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Only return answered/unanswered discussions
  """
  isAnswered: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The number identifying this discussion within the repository.
  """
  number: Int!

  """
  The poll associated with this discussion, if one exists.
  """
  poll: DiscussionPoll

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The path for this discussion.
  """
  resourcePath: URI!

  """
  Identifies the reason for the discussion's state.
  """
  stateReason: DiscussionStateReason

  """
  The title of this discussion.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A description of this category.
  """
  description: String

  """
  An emoji representing this category.
  """
  emoji: String!

  """
  This category's emoji rendered as HTML.
  """
  emojiHTML: HTML!

  """
  The Node ID of the DiscussionCategory object
  """
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """
  The name of this category.
  """
  name: String!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The slug of this category.
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionCategory
}

"""
The possible reasons for closing a discussion.
"""
enum DiscussionCloseReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
A comment on a discussion.
"""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The time when this replied-to comment was deleted
  """
  deletedAt: DateTime

  """
  The discussion this comment was created in
  """
  discussion: Discussion

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The Node ID of the DiscussionComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Has this comment been chosen as the answer of its discussion?
  """
  isAnswer: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The threaded replies to this comment.
  """
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCommentConnection!

  """
  The discussion comment this comment is a reply to
  """
  replyTo: DiscussionComment

  """
  The path for this discussion comment.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can the current user mark this comment as an answer?
  """
  viewerCanMarkAsAnswer: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Can the current user unmark this comment as an answer?
  """
  viewerCanUnmarkAsAnswer: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection {
  """
  A list of edges.
  """
  edges: [DiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionComment
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder {
  """
  The direction in which to order discussions by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussions.
  """
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField {
  """
  Order discussions by creation time.
  """
  CREATED_AT

  """
  Order discussions by most recent modification time.
  """
  UPDATED_AT
}

"""
A poll for a discussion.
"""
type DiscussionPoll implements Node {
  """
  The discussion that this poll belongs to.
  """
  discussion: Discussion

  """
  The Node ID of the DiscussionPoll object
  """
  id: ID!

  """
  The options for this poll.
  """
  options(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the options for the discussion poll.
    """
    orderBy: DiscussionPollOptionOrder = {field: AUTHORED_ORDER, direction: ASC}
  ): DiscussionPollOptionConnection

  """
  The question that is being asked by this poll.
  """
  question: String!

  """
  The total number of votes that have been cast for this poll.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has permission to vote in this poll.
  """
  viewerCanVote: Boolean!

  """
  Indicates if the viewer has voted for any option in this poll.
  """
  viewerHasVoted: Boolean!
}

"""
An option for a discussion poll.
"""
type DiscussionPollOption implements Node {
  """
  The Node ID of the DiscussionPollOption object
  """
  id: ID!

  """
  The text for this option.
  """
  option: String!

  """
  The discussion poll that this option belongs to.
  """
  poll: DiscussionPoll

  """
  The total number of votes that have been cast for this option.
  """
  totalVoteCount: Int!

  """
  Indicates if the viewer has voted for this option in the poll.
  """
  viewerHasVoted: Boolean!
}

"""
The connection type for DiscussionPollOption.
"""
type DiscussionPollOptionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionPollOptionEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionPollOption]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionPollOptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionPollOption
}

"""
Ordering options for discussion poll option connections.
"""
input DiscussionPollOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order poll options by.
  """
  field: DiscussionPollOptionOrderField!
}

"""
Properties by which discussion poll option connections can be ordered.
"""
enum DiscussionPollOptionOrderField {
  """
  Order poll options by the order that the poll author specified when creating the poll.
  """
  AUTHORED_ORDER

  """
  Order poll options by the number of votes it has.
  """
  VOTE_COUNT
}

"""
The possible states of a discussion.
"""
enum DiscussionState {
  """
  A discussion that has been closed
  """
  CLOSED

  """
  A discussion that is open
  """
  OPEN
}

"""
The possible state reasons of a discussion.
"""
enum DiscussionStateReason {
  """
  The discussion is a duplicate of another
  """
  DUPLICATE

  """
  The discussion is no longer relevant
  """
  OUTDATED

  """
  The discussion was reopened
  """
  REOPENED

  """
  The discussion has been resolved
  """
  RESOLVED
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contents of the pull request review dismissal message.
  """
  message: String!

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
The possible reasons that a Dependabot alert was dismissed.
"""
enum DismissReason {
  """
  A fix has already been started
  """
  FIX_STARTED

  """
  This alert is inaccurate or incorrect
  """
  INACCURATE

  """
  Vulnerable code is not actually used
  """
  NOT_USED

  """
  No bandwidth to fix this
  """
  NO_BANDWIDTH

  """
  Risk is tolerable to this project
  """
  TOLERABLE_RISK
}

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
input DismissRepositoryVulnerabilityAlertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reason the Dependabot alert is being dismissed.
  """
  dismissReason: DismissReason!

  """
  The Dependabot alert ID to dismiss.
  """
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: ["RepositoryVulnerabilityAlert"])
}

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
type DismissRepositoryVulnerabilityAlertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Dependabot alert that was dismissed
  """
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

"""
A draft issue within a project.
"""
type DraftIssue implements Node {
  """
  A list of users to assigned to this draft issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The body of the draft issue.
  """
  body: String!

  """
  The body of the draft issue rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of the draft issue rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this draft issue.
  """
  creator: Actor

  """
  The Node ID of the DraftIssue object
  """
  id: ID!

  """
  List of items linked with the draft issue (currently draft issue can be linked to only one item).
  """
  projectV2Items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Projects that link to this draft issue (currently draft issue can be linked to only one project).
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  The title of the draft issue
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  Position in the file to leave a comment on.
  """
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored.
  """
  commitBody: String

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored.
  """
  commitHeadline: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored.
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to enable auto-merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request auto-merge was enabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnqueuePullRequest
"""
input EnqueuePullRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The expected head OID of the pull request.
  """
  expectedHeadOid: GitObjectID

  """
  Add the pull request to the front of the queue.
  """
  jump: Boolean

  """
  The ID of the pull request to enqueue.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnqueuePullRequest
"""
type EnqueuePullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The merge queue entry for the enqueued pull request.
  """
  mergeQueueEntry: MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements AnnouncementBanner & Node {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  A URL pointing to the enterprise's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Enterprise billing information visible to enterprise billing managers.
  """
  billingInfo: EnterpriseBillingInfo

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the enterprise.
  """
  description: String

  """
  The description of the enterprise as HTML.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the Enterprise object
  """
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  A list of users who are members of this enterprise.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return members within the selected GitHub Enterprise deployment
    """
    deployment: EnterpriseUserDeployment

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for members returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization or server.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!

  """
  The name of the enterprise.
  """
  name: String!

  """
  A list of organizations that belong to this enterprise.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The viewer's role in an organization.
    """
    viewerOrganizationRole: RoleInOrganization
  ): OrganizationConnection!

  """
  Enterprise information visible to enterprise owners or enterprise owners'
  personal access tokens (classic) with read:enterprise or admin:enterprise scope.
  """
  ownerInfo: EnterpriseOwnerInfo

  """
  The HTTP path for this enterprise.
  """
  resourcePath: URI!

  """
  The URL-friendly identifier for the enterprise.
  """
  slug: String!

  """
  The HTTP URL for this enterprise.
  """
  url: URI!

  """
  Is the current viewer an admin of this enterprise?
  """
  viewerIsAdmin: Boolean!

  """
  The URL of the enterprise website.
  """
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email of the person who was invited to the enterprise.
  """
  email: String

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise!

  """
  The Node ID of the EnterpriseAdministratorInvitation object
  """
  id: ID!

  """
  The user who was invited to the enterprise.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseAdministratorInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise administrator invitations by.
  """
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField {
  """
  Order enterprise administrator member invitations by creation time
  """
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole {
  """
  Represents a billing manager of the enterprise account.
  """
  BILLING_MANAGER

  """
  Represents an owner of the enterprise account.
  """
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  """
  Members can fork a repository to an organization within this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS

  """
  Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
  """
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS

  """
  Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
  """
  EVERYWHERE

  """
  Members can fork a repository only within the same organization (intra-org).
  """
  SAME_ORGANIZATION

  """
  Members can fork a repository to their user account or within the same organization.
  """
  SAME_ORGANIZATION_USER_ACCOUNTS

  """
  Members can fork a repository to their user account.
  """
  USER_ACCOUNTS
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData {
  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo {
  """
  The number of licenseable users/emails across the enterprise.
  """
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """
  The bandwidth usage as a percentage of the bandwidth quota.
  """
  bandwidthUsagePercentage: Int!

  """
  The storage quota in GB for all organizations owned by the enterprise.
  """
  storageQuota: Float!

  """
  The storage usage in GB for all organizations owned by the enterprise.
  """
  storageUsage: Float!

  """
  The storage usage as a percentage of the storage quota.
  """
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """
  The total number of licenses allocated.
  """
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseEdge]

  """
  A list of nodes.
  """
  nodes: [Enterprise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE

  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue {
  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The connection type for OrganizationInvitation.
"""
type EnterpriseFailedInvitationConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseFailedInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the total count of unique users in the connection.
  """
  totalUniqueUserCount: Int!
}

"""
A failed invitation to be a member in an enterprise organization.
"""
type EnterpriseFailedInvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the EnterpriseIdentityProvider object
  """
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML identity provider.
  """
  issuer: String

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseMemberEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseMember
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise members by.
  """
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField {
  """
  Order enterprise members by creation time
  """
  CREATED_AT

  """
  Order enterprise members by login
  """
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Organization owners choose whether to allow members to create repositories.
  """
  NO_POLICY

  """
  Members will be able to create only private repositories.
  """
  PRIVATE

  """
  Members will be able to create only public repositories.
  """
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType {
  """
  Returns all enterprises in which the user is an admin.
  """
  ADMIN

  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL

  """
  Returns all enterprises in which the user is a billing manager.
  """
  BILLING_MANAGER

  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprises by.
  """
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField {
  """
  Order enterprises by name
  """
  NAME
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseOutsideCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseOwnerInfo {
  """
  A list of all of the administrators for this enterprise.
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return administrators with this two-factor authentication status.
    """
    hasTwoFactorEnabled: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for administrators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The permission to find organizations for.
    """
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!

  """
  A list of domains owned by the enterprise. Visible to enterprise owners or
  enterprise owners' personal access tokens (classic) with admin:enterprise scope.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter whether or not the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter whether or not the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection!

  """
  Enterprise Server installations owned by the enterprise.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection!

  """
  A list of failed invitations in the enterprise.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return invitations matching this invitation source
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  id: ID!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input EnterpriseServerUserAccountEmailOrder {
  """
  The ordering direction.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The field to order emails by.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user accounts by.
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  """
  Order user accounts by login
  """
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  name: String!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  The user is an owner of an organization in the enterprise.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

"""
The possible GitHub Enterprise deployments where this user can exist.
"""
enum EnterpriseUserDeployment {
  """
  The user is part of a GitHub Enterprise Cloud deployment.
  """
  CLOUD

  """
  The user is part of a GitHub Enterprise Server deployment.
  """
  SERVER
}

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input EnterpriseServerUserAccountEmailOrder {
  """
  The ordering direction.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The field to order emails by.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user accounts by.
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  """
  Order user accounts by login
  """
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  name: String!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  name: String!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user.
  """
  url: URI!

  """
  The user within the enterprise.
  """
  user: User
}

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

    """
    Returns the last _n_ elements from the list.
    """
    invitationSource: OrganizationInvitationSource

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
An environment.
"""
type Environment implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
enum EnvironmentOrderField {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  forks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input EnterpriseServerUserAccountEmailOrder {
  """
  The ordering direction.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  The field to order emails by.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  """
  The ordering direction.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order user accounts by.
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  enterprise: Enterprise!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  Order environments by name.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The role of the user in the enterprise membership.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  commitUrl: URI!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  name: String!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  hostName: String!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Find a project by number.
  """
  isFork: Boolean!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Find a project by number.
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  Find a project by number.
  """
  headRefName: String!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  cursor: String!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input EnterpriseServerUserAccountEmailOrder {
  """
  The ordering direction.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The field to order emails by.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  createdAt: DateTime!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user accounts by.
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  """
  Order user accounts by login
  """
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  forks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  The Node ID of the Gist object
  """
  id: ID!

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  id: ID!

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The name of the file uploaded.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  IP addresses that service hooks are sent from
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccountsUpload object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  commitUrl: URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  id: ID!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  body: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  id: ID!

  """
  The SAML Identity Provider for the enterprise.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  editor: Actor

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  fullDatabaseId: BigInt

  """
  Find a project by number.
  """
  projectV2(
    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  createdAt: DateTime!

  """
  Find a project by number.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseRepositoryInfo object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  commitUrl: URI!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Find a project by number.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  description: String

  """
  The Node ID of the Label object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  Find a project by number.
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The Node ID of the EnterpriseUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  id: ID!

  """
  The Node ID of the EnterpriseServerUserAccount object
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  failedInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The possible roles for enterprise membership.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Indicates if the object can be closed by the viewer.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  viewerCanClose: Boolean!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  viewerSubscription: SubscriptionState

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  createdAt: DateTime!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  pullRequest: PullRequest!

  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  color: String

  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  hidden: Boolean!

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  The Node ID of the License object
  """
  id: ID!

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  databaseId: Int

  """
  The Node ID of the Environment object
  """
  id: ID!

  """
  The Node ID of the Environment object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerCanDelete: Boolean!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  Can user react to this subject
  """
  nodes: [EnterpriseServerInstallation]

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  totalCount: Int!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Ordering options for environments
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  """
  The GUID for this identity
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The suggested assignees.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  organizationInvitation: OrganizationInvitation

  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the Issue object
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  The Node ID of the Issue object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input EnterpriseServerUserAccountEmailOrder {
  """
  The ordering direction.
  """
  guid: String!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  id: ID!

  """
  IP addresses that GitHub Enterprise Importer uses for outbound connections
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
enum EnterpriseServerUserAccountEmailOrderField {
  """
  Order emails by email
  """
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  """
  The ordering direction.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  color: String

  """
  The Node ID of the Language object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  The template name.
  """
  name: String!

  """
  The suggested issue body.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

  """
  `true` if the object is locked
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  """
  Order user accounts by login
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  id: ID!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the GitObject object
  """
  id: ID!

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  forks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether the license should be displayed in license pickers
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Find a project by number.
  """
  fullDatabaseId: BigInt

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  body: String

  """
  The template filename.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  name: String!

  """
  `true` if the object is locked
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input EnterpriseServerInstallationOrder {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  Find a project by number.
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: GistOrder
  ): GistConnection!

  """
  Find a project by number.
  """
  enterprise: Enterprise!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The head ref is out of date.
  """
  BEHIND

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  UNAFFILIATED
}

  """
  The email address.
  """
  email: String!

  """
  The Node ID of the EnterpriseServerUserAccountEmail object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  The Node ID of the LockedEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  gist: Gist!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  id: ID!

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  The migration source.
  """
  id: ID!

  """
  The suggested assignees.
  """
  USER_BLOCKED_EVENT
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  edges: [MannequinEdge]

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  databaseId: Int

  """
  The migration source type.
  """
  id: ID!
}

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  totalCount: Int!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MannequinOrderField {
  """
  The migration has failed.
  """
  CREATED_AT

  """
  The migration has invalid credentials.
  """
  LOGIN
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  The migration is in progress.
  """
  BLANK

  """
  The migration has not started.
  """
  PR_BODY

  """
  The migration needs to have its credentials validated.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  The migration has been queued.
  """
  MERGE_MESSAGE

  """
  The migration has succeeded.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
"""
type Label implements Node {
  """
  Identifies the label color.
  """
  color: String

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The Node ID of the Language object
  """
  id: ID!

  """
  Identifies the date and time when the label was created.
  """
  createdAt: DateTime

  """
  A brief description of this label.
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MovedColumnsInProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  Indicates whether or not this is a default label.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  A list of issues associated with this label.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The suggested issue body.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The template filename.
  """
  filename: String!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Creates a new draft issue and add it to a Project.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  duplicate: IssueOrPullRequest

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerSubscription: SubscriptionState

  """
  The migration source.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  hidden: Boolean!

  """
  The migration state.
  """
  state: MigrationState!

  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  BLANK

  """
  The migration source type.
  """
  PR_BODY

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  PR_TITLE
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MergeCommitTitle {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  cloneProject(
    """
    Parameters for CloneProject
    """
    input: CloneProjectInput!
  ): CloneProjectPayload

  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  FAILED

  """
  The migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The migration is in progress.
  """
  id: ID!

  """
  The migration has not started.
  """
  viewerCanReopen: Boolean!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  databaseId: Int

  """
  The migration has been queued.
  """
  viewerCanClose: Boolean!

  """
  The migration has succeeded.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  createdAt: DateTime!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  editor: Actor

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  ALLGREEN

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The Node ID of the Environment object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  viewerSubscription: SubscriptionState

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  editor: Actor

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  howItWorksHTML: HTML!

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  The team the project is linked to
  """
  team: Team
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
input LinkRepositoryToProjectInput {
  """
  The migration flag to continue on error.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  viewerSubscription: SubscriptionState

  """
  The migration source.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

  """
  The migration state.
  """
  state: MigrationState!

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  nodes: [LinkedBranch]

  """
  The migration source type.
  """
  pageInfo: PageInfo!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  totalCount: Int!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  A GitHub Migration API source.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  The migration has failed.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  The migration has invalid credentials.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  description: String

  """
  The migration has not started.
  """
  id: ID!

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  viewerCanClose: Boolean!

  """
  The migration has been queued.
  """
  viewerCanDelete: Boolean!

  """
  The migration has succeeded.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  fullDatabaseId: BigInt

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The Node ID of the License object
  """
  hidden: Boolean!

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the IssueComment object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  email: String

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Order environments by name.
  """
  NAME
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  viewerSubscription: SubscriptionState

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Sets whether or not an organization owner can make purchases.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input Environments {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  direction: OrderDirection!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
input Environments {
  """
  The direction in which to order environments by the specified field.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  The field to order environments by.
  """
  field: EnvironmentOrderField!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  clientMutationId: String

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkProjectV2ToTeamInput {
  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  The branch's ref.
  """
  databaseId: Int

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  enterpriseUrl: URI

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The name of the OAuth application.
  """
  cursor: String!

  """
  The HTTP path for the OAuth application
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  The HTTP URL for the OAuth application
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to link to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  clientMutationId: String

  """
  The application URL of the OAuth application.
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type ExternalIdentity implements Node {
  """
  The callback URL of the OAuth application.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  Order environments by name.
  """
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  """
  The HTTP path for the OAuth application
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  The HTTP URL for the OAuth application
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  The rate limit of the OAuth application.
  """
  createdAt: DateTime!

  """
  The state of the OAuth application.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The state of an OAuth application when it was created.
"""
type LinkedBranchEdge {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  cursor: String!

  """
  The OAuth application was in the process of being deleted.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
type ExternalIdentity implements Node {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  editor: Actor

  """
  The suggested assignees.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  removeEnterpriseOrganization(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  filename: String!

  """
  The suggested issue labels
  """
  databaseId: Int

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  id: ID!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  BLANK

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Deletes a repository link from a project.
  """
  MERGE_MESSAGE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  LOGIN
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  declineTopicSuggestion(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  updateEnterpriseMembersCanMakePurchasesSetting(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  baseCommit: Commit

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
enum MergeStateStatus {
  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The Node ID of the IpAllowListEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
Ordering options for Enterprise Server installation connections.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to mark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The name of the OAuth application.
  """
  clientMutationId: String

  """
  The HTTP path for the OAuth application
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  The HTTP URL for the OAuth application
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
type EnterpriseServerUserAccountsUpload implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  githubEnterpriseImporterIpAddresses: [String!]

  """
  The application URL of the OAuth application.
  """
  email: String

  """
  The callback URL of the OAuth application.
  """
  id: ID!

  """
  The Node ID of the License object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  enterpriseUrl: URI

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  failureReason: String

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  The rate limit of the OAuth application.
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  cursor: String!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  howItWorks: String

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  id: ID!

  """
  The OAuth application was in the process of being deleted.
  """
  pageInfo: PageInfo!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input LinkRepositoryToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  resourcePath: URI!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The corresponding operation type for the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  The maximum number of entries to merge at once.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

  """
  The user affected by the action
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  jump: Boolean!

  """
  The HTTP URL for the OAuth application
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The HTTP path for the OAuth application
  """
  AWAITING_CHECKS

  """
  The HTTP URL for the OAuth application
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  howItWorks: String

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The state of the OAuth application.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  The name of the Organization.
  """
  node: LinkedBranch
}

"""
The state of an OAuth application when it was created.
"""
input LockLockableInput {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  id: ID!

  """
  The OAuth application was in the process of being deleted.
  """
  commitUrl: URI!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  commitUrl: URI!

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The Node ID of the GitObject object
  """
  color: String

  """
  The Node ID of the Language object
  """
  createdAt: DateTime!

  """
  The Node ID of the MergedEvent object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the EnterpriseServerInstallation object
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  Visible to enterprise owners or enterprise owners' personal access tokens
  (classic) with admin:enterprise scope.
  """
  url: URI!
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The URL for the migration log (expires 1 day after migration completes).
  """
  migrationLogUrl: URI

  """
  The migration source.
  """
  migrationSource: MigrationSource!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  repositoryName: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sourceUrl: URI!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  url: URI!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  An Azure DevOps migration source.
  """
  AZURE_DEVOPS

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A GitHub Migration API source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  FAILED

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  FAILED_VALIDATION

  """
  The migration is in progress.
  """
  IN_PROGRESS

  """
  The migration has not started.
  """
  NOT_STARTED

  """
  The migration needs to have its credentials validated.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

"""
Entities that have members who can set status messages.
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Marks a repository as archived.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who created the milestone.
  """
  creator: Actor

  """
  Identifies the description of the milestone.
  """
  description: String

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  enterpriseUrl: URI

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  The corresponding operation type for the action
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The user affected by the action
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input LinkRepositoryToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Follow an organization.
  """
  followOrganization(
    """
    Ordering options for installations returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  linkRepositoryToProject(
    """
    Parameters for LinkRepositoryToProject
    """
    input: LinkRepositoryToProjectInput!
  ): LinkRepositoryToProjectPayload

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposEnableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  clientMutationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the milestone associated with the issue.
  """
  description: String

  """
  The Node ID of the Label object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The HTTP path for this merge queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The name of the Organization.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  maximumEntriesToMerge: Int

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Sets whether or not an organization owner can make purchases.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  action: String!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  jump: Boolean!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  mergeQueue: MergeQueue

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  position: Int!

  """
  The user affected by the action
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Updates an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  digestMethodUrl: URI

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  email: String

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  deleteTeamDiscussion(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Updates an existing user list.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  deleteVerifiableDomain(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  The HTTP URL for the OAuth application
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  The name of the Organization.
  """
  nodes: [Mannequin]

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Follow an organization.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  The name of the OAuth application.
  """
  createdAt: DateTime!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  enterpriseUrl: URI

  """
  The email address of the organization invitation.
  """
  email: String

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  The application URL of the OAuth application.
  """
  continueOnError: Boolean!

  """
  The callback URL of the OAuth application.
  """
  callbackUrl: URI

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  failureReason: String

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  headRefName: String!

  """
  The migration source.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  clientMutationId: String

  """
  The migration state.
  """
  state: MigrationState!

  """
  The rate limit of the OAuth application.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The state of the OAuth application.
  """
  id: ID!

  """
  The migration source name.
  """
  name: String!

  """
  The migration source type.
  """
  clientMutationId: String

  """
  Removes a user from all organizations within the enterprise
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The types of membership the member has with the organization.
  """
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

"""
The state of an OAuth application when it was created.
"""
input MarkPullRequestReadyForReviewInput {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type IssueTemplate {
  """
  The migration has failed.
  """
  about: String

  """
  The migration has invalid credentials.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The migration is in progress.
  """
  IN_PROGRESS

  """
  The migration has not started.
  """
  duplicate: IssueOrPullRequest

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The migration has been queued.
  """
  body: String

  """
  The migration has succeeded.
  """
  howItWorks: String

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  body: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  enterpriseUrl: URI

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The Node ID of the MarketplaceCategory object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  startRepositoryMigration(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  Transfer an issue to a different repository
  """
  transferIssue(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  unarchiveRepository(
    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  unlinkRepositoryFromProject(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The template name.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  createdAt: DateTime!

  """
  The Node ID of the LabeledEvent object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MentionedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  The HTTP path for the OAuth application
  """
  createdAt: DateTime!

  """
  The HTTP URL for the OAuth application
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  viewerCanReopen: Boolean!
}

  """
  Information to aid in pagination.
  """
  color: String

  """
  The Node ID of the Language object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: DateTime!

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  MERGE_MESSAGE

  """
  Sets whether or not an organization owner can make purchases.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The Node ID of the HeadRefRestoredEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefRestoredEvent object
  """
  headRefName: String!

  """
  The Node ID of the HeadRefDeletedEvent object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  howItWorksHTML: HTML!

  """
  The Node ID of the MarketplaceListing object
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Indicates if the object can be reopened by the viewer.
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  nodes: [MergeQueueEntry]

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  The OIDC identity provider type
  """
  providerType: OIDCProviderType!

  """
  The id of the tenant this provider is attached to
  """
  tenantId: String!
}

  """
  Adds a support entitlement to an enterprise member.
  """
  LOCKED

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The application URL of the OAuth application.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  hidden: Boolean!

  """
  The Node ID of the License object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OauthApplicationCreateAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  field: EnvironmentOrderField!
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  viewerSubscription: SubscriptionState

  """
  The rate limit of the OAuth application.
  """
  createdAt: DateTime!

  """
  The state of the OAuth application.
  """
  id: ID!

  """
  Identifies the viewer's thread subscription status.
  """
  viewerSubscription: SubscriptionState

  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Creates a new project by cloning configuration from an existing project.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  The OAuth application was in the process of being deleted.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The migration flag to continue on error.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The direction in which to order environments by the specified field.
  """
  direction: OrderDirection!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the Migration object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  clientMutationId: String

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  The Node ID of the MigrationSource object
  """
  id: ID!

  """
  The migration source name.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Whether the given account is sponsoring this user/organization.
  """
  enterpriseUrl: URI

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  issuerUrl: URI

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
type ExternalIdentity implements Node {
  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  guid: String!

  """
  The Node ID of the ExternalIdentity object
  """
  createdAt: DateTime!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  id: ID!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  organizationInvitation: OrganizationInvitation

  """
  Order environments by name.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The configuration for this merge queue
  """
  configuration: MergeQueueConfiguration

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  followOrganization(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  The Node ID of the MergeQueue object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  createdAt: PreciseDateTime!

  """
  The user affected by the action
  """
  viewerCanReopen: Boolean!
}

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  The strategy to use when merging entries.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
  """
  publishSponsorsTier(
    """
    Parameters for PublishSponsorsTier
    """
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

  """
  Removes a user from all organizations within the enterprise
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Removes an organization from the enterprise
  """
  jump: Boolean!

  """
  The merge queue that this entry belongs to
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  cursor: String!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  Entries only allowed to merge if they are passing.
  """
  ALLGREEN

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
input Environments {
  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the Organization.
  """
  editor: Actor

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  fullDatabaseId: BigInt

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  id: ID!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedBranch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: DateTime!

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  id: ID!

  """
  The Node ID of the ExternalIdentity object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  Identifies the primary key from the database as a BigInt.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the IssueComment object
  """
  description: String

  """
  The Node ID of the Label object
  """
  id: ID!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The migration flag to continue on error.
  """
  edges: [MannequinEdge]

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  nodes: [Mannequin]

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The migration source.
  """
  createdAt: PreciseDateTime!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  id: ID!

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  url: URI!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  viewerCanClose: Boolean!

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The Node ID of the MarketplaceCategory object
  """
  databaseId: Int

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    userName: String
  ): ExternalIdentityConnection!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The Node ID of the OIDCProvider object
  """
  id: ID!

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  """
  The name of the OAuth application.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  The HTTP path for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The HTTP path for the OAuth application
  """
  direction: OrderDirection!

  """
  Whether the given account is sponsoring this user/organization.
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  actorResourcePath: URI

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  actorUrl: URI

  """
  The application URL of the OAuth application.
  """
  applicationUrl: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  The HTTP path for the OAuth application
  """
  name: String!

  """
  The HTTP URL for the OAuth application
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Default to a blank commit message.
  """
  createdAt: DateTime!

  """
  The Node ID of the MilestonedEvent object
  """
  id: ID!

  """
  Default to the pull request's body.
  """
  PR_BODY

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  """
  The rate limit of the OAuth application.
  """
  minimizedReason: String

  """
  The state of the OAuth application.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for the OAuth application
  """
  id: ID!

  """
  The HTTP URL for the OAuth application
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  clientMutationId: String

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The Node ID of the MarketplaceListing object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  Find a project by number.
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The HTTP path listing organization's projects
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Deletes a team discussion.
  """
  deleteTeamDiscussion(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  deleteVerifiableDomain(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  Add a pull request to the merge queue.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  id: ID!

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The maximum number of entries to build at once.
  """
  maximumEntriesToBuild: Int

  """
  The name of the Organization.
  """
  id: ID!

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  mergingStrategy: MergeQueueMergingStrategy

  """
  The minimum number of entries required to merge at once.
  """
  minimumEntriesToMerge: Int

  """
  The amount of time in minutes to wait before ignoring the minumum number of
  entries in the queue requirement and merging a collection of entries
  """
  minimumEntriesToMergeWaitTime: Int
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  baseCommit: Commit

  """
  Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
  """
  markProjectV2AsTemplate(
    """
    Parameters for MarkProjectV2AsTemplate
    """
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload

  """
  Marks a pull request ready for review.
  """
  abortRepositoryMigration(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  enqueuer: Actor!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Adds a support entitlement to an enterprise member.
  """
  mergeQueue: MergeQueue

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest

  """
  Does this pull request need to be deployed on its own
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload

  """
  Removes an organization from the enterprise
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Adds a reaction to a subject.
  """
  AWAITING_CHECKS

  """
  The entry is currently locked.
  """
  LOCKED

  """
  Reopen a discussion.
  """
  reopenDiscussion(
    """
    Parameters for ReopenDiscussion
    """
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload

  """
  Reopen a issue.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  id: ID!

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    Parameters for RetireSponsorsTier
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

"""
Detailed status information about a pull request merge.
"""
type EnterpriseServerInstallationMembershipEdge {
  """
  A cursor for use in pagination.
  """
  createdAt: DateTime!

  """
  The Node ID of the HeadRefForcePushedEvent object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  hostName: String!

  """
  The Node ID of the EnterpriseServerInstallation object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  id: ID!

  """
  The HTTP path for the OAuth application
  """
  githubEnterpriseImporterIpAddresses: [String!]

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The HTTP URL for the OAuth application
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

  """
  Deletes a repository link from a project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload

  """
  Create a new branch protection rule
  """
  howItWorks: String

  """
  The Node ID of the MarketplaceCategory object
  """
  id: ID!

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  createdAt: DateTime!

  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  id: ID!

  """
  The Node ID of the LabeledEvent object
  """
  id: ID!

  """
  The associated gist.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  commitUrl: URI!

  """
  The Node ID of the GitObject object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  The HTTP path for the OAuth application
  """
  id: ID!

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  """
  The HTTP URL for the OAuth application
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  createPullRequest(
    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

  """
  Sets whether or not an organization owner can make purchases.
  """
  updateEnterpriseMembersCanMakePurchasesSetting(
    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  Create a repository ruleset
  """
  createRepositoryRuleset(
    """
    Parameters for CreateRepositoryRuleset
    """
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload

  """
  Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  Creates a new user list.
  """
  createUserList(
    """
    Parameters for CreateUserList
    """
    input: CreateUserListInput!
  ): CreateUserListPayload

  """
  Rejects a suggested topic for the repository.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  howItWorksHTML: HTML!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!

  """
  The migration state.
  """
  state: MigrationState!

  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  id: ID!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
type EnterpriseServerUserAccountEmail implements Node {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  The user is not an owner of the enterprise, and not a member or owner of any
  organizations in the enterprise; only for EMU-enabled enterprises.
  """
  OWNER

  """
  Deletes a project workflow.
  """
  deleteProjectV2Workflow(
    """
    Parameters for DeleteProjectV2Workflow
    """
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload

  """
  Deletes a pull request review.
  """
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  """
  The migration has failed.
  """
  id: ID!

  """
  The migration has invalid credentials.
  """
  id: ID!

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  id: ID!

  """
  The migration has not started.
  """
  id: ID!

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  databaseId: Int

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  The migration has succeeded.
  """
  fullDatabaseId: BigInt

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  fullDatabaseId: BigInt

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  id: ID!

  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  dueOn: DateTime

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  The Node ID of the Milestone object
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Links a project to a repository.
  """
  linkProjectV2ToRepository(
    """
    Parameters for LinkProjectV2ToRepository
    """
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload

  """
  Links a project to a team.
  """
  linkProjectV2ToTeam(
    """
    Parameters for LinkProjectV2ToTeam
    """
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload

  """
  Creates a repository link for a project.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The OAuth application was in the process of being deleted.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedBranch
}

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  createdAt: DateTime!

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  id: ID!

  """
  Represents member feature request notification title
  """
  title: String!

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  createdAt: PreciseDateTime!

  """
  Unarchives a ProjectV2Item
  """
  unarchiveProjectV2Item(
    """
    Parameters for UnarchiveProjectV2Item
    """
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload

  """
  Unarchives a repository.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The type of membership a user has with an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR

  """
  An unaffiliated collaborator is a person who is not a member of the
  Organization and does not have access to any repositories in the organization.
  """
  UNAFFILIATED
}

"""
The reason an outside collaborator was removed from an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  """
  SAML external identity missing
  """
  SAML_EXTERNAL_IDENTITY_MISSING

  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.restore_member event.
"""
type OrgRestoreMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  Whether the given account is sponsoring this user/organization.
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter mannequins by login.
    """
    login: String

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  The user affected by the action
  """
  clientMutationId: String

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    input: UnsubscribeFromNotificationsInput!
  ): UnsubscribeFromNotificationsPayload

  """
  Update a branch protection rule
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to link to the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is linked to.
  """
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  The Node ID of the LinkedBranch object
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  The branch's ref.
  """
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the MovedColumnsInProjectEvent object
  """
  id: ID!

  """
  The Node ID of the Mannequin object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  enterpriseUrl: URI

  """
  Sets whether or not an organization owner can make purchases.
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  node: LinkedBranch
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgEnableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  createdAt: PreciseDateTime!

  """
  Find a project by number.
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  The HTTP path listing organization's projects
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  databaseId: Int

  """
  The Node ID of the MentionedEvent object
  """
  id: ID!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  """
  Order mannequins why when they were created.
  """
  addProjectV2DraftIssue(
    """
    Parameters for AddProjectV2DraftIssue
    """
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload

  """
  The ID of the project to link to the team.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  id: ID!

  """
  The ID of the team to link to the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  """
  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
  """
  updateOrganizationWebCommitSignoffSetting(
    """
    Parameters for UpdateOrganizationWebCommitSignoffSetting
    """
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload

  """
  The name of the Organization.
  """
  clientMutationId: String

  """
  The team the project is linked to
  """
  enterpriseUrl: URI

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  """
  The Node ID of the MembersCanDeleteReposDisableAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Archives a ProjectV2Item
  """
  archiveProjectV2Item(
    """
    Parameters for ArchiveProjectV2Item
    """
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload

  """
  Marks a repository as archived.
  """
  clientMutationId: String

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The suggested issue body.
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The template filename.
  """
  filename: String!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  """
  This mutation clears the value of a field for an item in a Project. Currently
  only text, number, date, assignees, labels, single-select, iteration and
  milestone fields are supported.
  """
  clearProjectV2ItemFieldValue(
    """
    Parameters for ClearProjectV2ItemFieldValue
    """
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  clientMutationId: String

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Copy a project.
  """
  copyProjectV2(
    """
    Parameters for CopyProjectV2
    """
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: VerifyVerifiableDomainInput!
  ): VerifyVerifiableDomainPayload
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  ID of the object.
  """
  id: ID!
}

"""
The possible values for the notification restriction setting.
"""
enum NotificationRestrictionSettingValue {
  """
  The setting is disabled for the owner.
  """
  DISABLED

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Create a new branch protection rule
  """
  createBranchProtectionRule(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  createdAt: PreciseDateTime!

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  The name of the OAuth application.
  """
  maximumEntriesToBuild: Int

  """
  The HTTP path for the OAuth application
  """
  maximumEntriesToMerge: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload

  """
  Create a new pull request
  """
  baseCommit: Commit

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  id: ID!

  """
  Rejects a suggested topic for the repository.
  """
  mergeQueue: MergeQueue

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The rate limit of the OAuth application.
  """
  pullRequest: PullRequest

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

  """
  The state of this entry in the queue
  """
  state: MergeQueueEntryState!
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The state of an OAuth application when it was created.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The text of the announcement
  """
  announcement: String

  """
  The expiration date of the announcement, if any
  """
  announcementExpiresAt: DateTime

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  announcementUserDismissible: Boolean

  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  cursor: String!

  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The entry is currently waiting for checks to pass.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  LOCKED

  """
  The HTTP path for the OAuth application
  """
  MERGEABLE

  """
  The HTTP URL for the OAuth application
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  id: ID!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  Deletes a pull request review.
  """
  ALLGREEN

  """
  Failing Entires are allowed to merge if they are with a passing entry.
  """
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

  """
  Deletes a team discussion.
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  A list of edges.
  """
  edges: [LinkedBranchEdge]

  """
  Deletes a user list.
  """
  deleteUserList(
    """
    Parameters for DeleteUserList
    """
    input: DeleteUserListInput!
  ): DeleteUserListPayload

  """
  Deletes a verifiable domain.
  """
  createdAt: DateTime!

  """
  Remove a pull request from the merge queue.
  """
  dequeuePullRequest(
    """
    Parameters for DequeuePullRequest
    """
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload

  """
  Disable auto merge on the given pull request
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddBillingManagerAuditEntry object
  """
  hasSponsorsListing: Boolean!

  """
  The Node ID of the Organization object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessDeniedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Whether the given account is sponsoring this user/organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  The user affected by the action
  """
  user: User

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The organization's public profile location.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Find a project by number.
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The HTTP path listing organization's projects
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  id: ID!

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Add a pull request to the merge queue.
  """
  enqueuePullRequest(
    """
    Parameters for EnqueuePullRequest
    """
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload

  """
  Follow an organization.
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

"""
Autogenerated input type of MergePullRequest
"""
enum MannequinOrderField {
  """
  The migration has been queued.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgBlockUserAuditEntry object
  """
  id: ID!

  """
  The migration has succeeded.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
  """
  retireSponsorsTier(
    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload

  """
  Create a pull request that reverts the changes from a merged pull request.
  """
  revertPullRequest(
    """
    Parameters for RevertPullRequest
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Revoke the migrator role to a user for all organizations under an enterprise account.
  """
  revokeEnterpriseOrganizationsMigratorRole(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The suggested issue body.
  """
  id: ID!

  """
  The template filename.
  """
  dueOn: DateTime

  """
  The Node ID of the Milestone object
  """
  id: ID!

  """
  The suggested issue labels
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  Starts a GitHub Enterprise Importer (GEI) repository migration.
  """
  startRepositoryMigration(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Transfer an organization from one enterprise to another enterprise.
  """
  transferEnterpriseOrganization(
    """
    Parameters for TransferEnterpriseOrganization
    """
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload

  """
  Transfer an issue to a different repository
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  updatedAt: DateTime!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Unlinks a project from a repository.
  """
  unlinkProjectV2FromRepository(
    """
    Parameters for UnlinkProjectV2FromRepository
    """
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload

  """
  Unlinks a project to a team.
  """
  unlinkProjectV2FromTeam(
    """
    Parameters for UnlinkProjectV2FromTeam
    """
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  Organization owners have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization owners can delete the organization
  and all of its repositories.
  """
  unminimizeComment(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection

  """
  Unsubscribes from notifications
  """
  unsubscribeFromNotifications(
    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A maven package.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  An npm package.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A nuget package.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The package associated with this version.
  """
  package: Package

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  """
  The amount of time in minutes to wait for a check response before considering it a failure.
  """
  checkResponseTimeout: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!
}

"""
The connection type for Milestone.
"""
type MilestoneConnection {
  """
  A list of edges.
  """
  maximumEntriesToBuild: Int

  """
  The maximum number of entries to merge at once.
  """
  maximumEntriesToMerge: Int

  """
  The merge method to use for this queue.
  """
  mergeMethod: PullRequestMergeMethod

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  The base commit for this entry
  """
  baseCommit: Commit

  """
  The date and time this entry was added to the merge queue
  """
  enqueuedAt: DateTime!

  """
  The actor that enqueued this entry
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgCreateAuditEntry object
  """
  id: ID!

  """
  The estimated time in seconds until this entry will be merged
  """
  estimatedTimeToMerge: Int

  """
  The head commit for this entry
  """
  headCommit: Commit

  """
  The Node ID of the MergeQueueEntry object
  """
  id: ID!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Whether this pull request should jump the queue
  """
  jump: Boolean!

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with the users login
    """
    login: String

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean

    """
    Filter to external identities with the users userName/NameID attribute
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

  """
  The position of this entry in the queue
  """
  position: Int!

  """
  The pull request that will be added to a merge group
  """
  createdAt: DateTime!

  """
  The name of the Organization.
  """
  solo: Boolean!

  """
  The state of this entry in the queue
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRestoreMemberAuditEntry object
  """
  id: ID!

"""
The connection type for MergeQueueEntry.
"""
interface Minimizable {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Toggle the setting for your GitHub Sponsors profile that allows other GitHub
  accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.
  Only applicable when you have a GitHub Sponsors profile and have connected
  your GitHub account with Patreon.
  """
  updatePatreonSponsorability(
    """
    Parameters for UpdatePatreonSponsorability
    """
    input: UpdatePatreonSponsorabilityInput!
  ): UpdatePatreonSponsorabilityPayload

  """
  Updates an existing project.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise owners by.
  """
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Updates an existing project.
  """
  updateProjectV2(
    """
    Parameters for UpdateProjectV2
    """
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  Update the collaborators on a team or a project
  """
  updateProjectV2Collaborators(
    """
    Parameters for UpdateProjectV2Collaborators
    """
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload

  """
  The entry is currently locked.
  """
  LOCKED

  """
  The entry is currently mergeable.
  """
  MERGEABLE

  """
  The entry is currently queued.
  """
  QUEUED

  """
  The entry is currently unmergeable.
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The Node ID of the OrgInviteMemberAuditEntry object
  """
  id: ID!

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
type MarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  """
  The organization invitation.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The name of the Organization.
  """
  createdAt: DateTime!

  """
  The Node ID of the LockedEvent object
  """
  databaseId: Int

  """
  Update a repository ruleset
  """
  updateRepositoryRuleset(
    """
    Parameters for UpdateRepositoryRuleset
    """
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload

  """
  Sets whether contributors are required to sign off on web-based commits for a repository.
  """
  updateRepositoryWebCommitSignoffSetting(
    """
    Parameters for UpdateRepositoryWebCommitSignoffSetting
    """
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload

  """
  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  Branches linked to this issue.
  """
  linkedBranches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Abort a repository migration queued or in progress.
  """
  abortRepositoryMigration(
    """
    Parameters for AbortRepositoryMigration
    """
    input: AbortRepositoryMigrationInput!
  ): AbortRepositoryMigrationPayload

  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Updates an existing user list.
  """
  updateUserList(
    """
    Parameters for UpdateUserList
    """
    input: UpdateUserListInput!
  ): UpdateUserListPayload

  """
  Updates which of the viewer's lists an item belongs to
  """
  updateUserListsForItem(
    """
    Parameters for UpdateUserListsForItem
    """
    input: UpdateUserListsForItemInput!
  ): UpdateUserListsForItemPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  verifyVerifiableDomain(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedBranchConnection!

  """
  `true` if the object is locked
  """
  digestMethodUrl: URI

  """
  The Node ID of the OrgDisableSamlAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The Node ID of the OrgInviteToBusinessAuditEntry object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the OrgUnblockUserAuditEntry object
  """
  id: ID!

  """
  The migration has not started.
  """
  createdAt: DateTime!

  """
  The migration needs to have its credentials validated.
  """
  id: ID!

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  """
  Creates an organization as part of an enterprise account. A personal access
  token used to create an organization is implicitly permitted to update the
  organization it created, if the organization is part of an enterprise that has
  SAML enabled or uses Enterprise Managed Users. If the organization is not part
  of such an enterprise, and instead has SAML enabled for it individually, the
  token will then require SAML authorization to continue working against that organization.
  """
  clientMutationId: String

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The user affected by the action
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
The state of an OAuth application when it was created.
"""
type MarkProjectV2AsTemplatePayload {
  """
  The OAuth application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  projectV2: ProjectV2
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  Find a project by number.
  """
  createdAt: DateTime!

  """
  Create a branch linked to an issue.
  """
  createLinkedBranch(
    """
    Parameters for CreateLinkedBranch
    """
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload

  """
  Creates a GitHub Enterprise Importer (GEI) migration source.
  """
  id: ID!

"""
Represents a member feature request notification
"""
type MemberFeatureRequestNotification implements Node {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  body: String!

  """
  The Node ID of the MemberFeatureRequestNotification object
  """
  dueOn: DateTime

  """
  Create a new project field.
  """
  createProjectV2Field(
    """
    Parameters for CreateProjectV2Field
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  Create a new pull request
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The Node ID of the OrgOauthAppAccessApprovedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  title: String!

  """
  The HTTP URL for the OAuth application
  """
  id: ID!

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  """
  The corresponding operation type for the action
  """
  createSponsorsListing(
    """
    Parameters for CreateSponsorsListing
    """
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload

  """
  Create a new payment tier for your GitHub Sponsors profile.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Make many one-time sponsorships for different sponsorable users or
  organizations at once. Can only sponsor those who have a public GitHub
  Sponsors profile.
  """
  createSponsorships(
    """
    Parameters for CreateSponsorships
    """
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload

  """
  Creates a new team discussion.
  """
  createTeamDiscussion(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Creates a new user list.
  """
  createdAt: PreciseDateTime!

  """
  The user affected by the action
  """
  id: ID!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The user is a member of an organization in the enterprise.
  """
  MEMBER

  """
  The user is an owner of an organization in the enterprise.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The Node ID of the GistComment object
  """
  gist: Gist!

  """
  Unlink a branch from an issue.
  """
  deleteLinkedBranch(
    """
    Parameters for DeleteLinkedBranch
    """
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload

  """
  Delete a package version.
  """
  gist: Gist!

  """
  The Node ID of the GistComment object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the MarkedAsDuplicateEvent object
  """
  enterpriseUrl: URI

  """
  The Node ID of the MembersCanDeleteReposClearAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessBlockedAuditEntry object
  """
  id: ID!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  Delete a project.
  """
  deleteProjectV2(
    """
    Parameters for DeleteProjectV2
    """
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload

  """
  Delete a project field.
  """
  deleteProjectV2Field(
    """
    Parameters for DeleteProjectV2Field
    """
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload

  """
  Indicates if the object can be closed by the viewer.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Deletes a project workflow.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgAddMemberAuditEntry object
  """
  id: ID!

  """
  Deletes a pull request review.
  """
  viewerCanReopen: Boolean!
}

"""
The possible GitHub Enterprise deployments where this user can exist.
"""
enum EnterpriseUserDeployment {
  """
  The user is part of a GitHub Enterprise Cloud deployment.
  """
  CLOUD

  """
  The user is part of a GitHub Enterprise Server deployment.
  """
  SERVER
}

  """
  Delete a repository ruleset
  """
  deleteRepositoryRuleset(
    """
    Parameters for DeleteRepositoryRuleset
    """
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The Node ID of the OrgUpdateMemberAuditEntry object
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The name of the OAuth application.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

  """
  The corresponding operation type for the action
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The Organization associated with the Audit Entry.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessRequestedAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth application
  """
  oauthApplicationUrl: URI

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  The action name
  """
  closed: Boolean!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The name of the role this source has granted to the user.
  """
  createdAt: DateTime!

  """
  The source of this permission.
  """
  creator: Actor

  """
  A readable representation of the actor's location
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  The name of the OAuth application.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The HTTP path for the OAuth application
  """
  number: Int!

  """
  The HTTP URL for the OAuth application
  """
  owner: ProjectV2Owner!

  """
  The corresponding operation type for the action
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  The Organization associated with the Audit Entry.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  The name of the Organization.
  """
  resourcePath: URI!

  """
  The HTTP path for the organization
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The HTTP URL for the organization
  """
  title: String!

  """
  The user affected by the action
  """
  updatedAt: DateTime!

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  views(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The action name
  """
  edges: [ProjectV2Edge]

  """
  The user who initiated the action
  """
  nodes: [ProjectV2]

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  gradientStopColors: [String!]!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The username of the user who initiated the action
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The HTTP path for the actor.
  """
  createdAt: DateTime!

  """
  The HTTP URL for the actor.
  """
  dataType: ProjectV2FieldType!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgRemoveBillingManagerAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The SAML provider's issuer URL.
  """
  name: String!

  """
  The corresponding operation type for the action
  """
  project: ProjectV2!

  """
  The name of the Organization.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The HTTP path for the organization
  """
  createdAt: DateTime!

  """
  The HTTP URL for the organization
  """
  dataType: ProjectV2FieldType!

  """
  The SAML provider's signature algorithm URL.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The SAML provider's single sign-on URL.
  """
  name: String!

  """
  The user affected by the action
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  The text of the announcement
  """
  edges: [ProjectV2FieldEdge]

  """
  The expiration date of the announcement, if any
  """
  nodes: [ProjectV2Field]

  """
  Whether the announcement can be dismissed by the user
  """
  announcementUserDismissible: Boolean

  """
  Deletes a verifiable domain.
  """
  id: ID!

    """
    The search string to look for.
    """
    query: String
  ): EnterpriseFailedInvitationConnection!

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Identifies the date and time when the organization was archived.
  """
  archivedAt: DateTime

  """
  Audit log entries of the organization
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Disable auto merge on the given pull request
  """
  ASSIGNEES

  """
  A list of Enterprise Server installations this user is a member of.
  """
  DATE

  """
  The Node ID of the PinnedEvent object
  """
  ITERATION

  """
  Represents a 'user_blocked' event on a given user.
  """
  LABELS

"""
Represents a user signing up for a GitHub account.
"""
type JoinedGitHubContribution implements Contribution {
  """
  Add a pull request to the merge queue.
  """
  LINKED_PULL_REQUESTS

  """
  Follow an organization.
  """
  MILESTONE

  """
  When this contribution was made.
  """
  NUMBER

  """
  The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object
  """
  REPOSITORY

  """
  Identifies the primary key from the database as a BigInt.
  """
  REVIEWERS

  """
  The Node ID of the PinnedIssue object
  """
  SINGLE_SELECT

  """
  The HTTP URL for this contribution.
  """
  TEXT

  """
  The Node ID of the OrgRemoveMemberAuditEntry object
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  The user who made this contribution.
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The name of the Organization.
  """
  content: ProjectV2ItemContent

  """
  Links a project to a team.
  """
  createdAt: DateTime!

  """
  Creates a repository link for a project.
  """
  creator: Actor

  """
  A brief description of this label.
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Whether the item is archived.
  """
  isArchived: Boolean!

  """
  The project that contains this item.
  """
  project: ProjectV2!

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  """
  The ordering direction.
  """
  type: ProjectV2ItemType!

  """
  The field to order enterprise owners by.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Item]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Order enterprise owners by login.
  """
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  Marks a pull request ready for review.
  """
  id: ID!

  """
  Indicates whether or not this is a default label.
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Represents member feature request body containing organization name and the number of feature requests
  """
  createdAt: DateTime!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  creator: Actor

  """
  The Node ID of the Organization object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The actor who created the item.
  """
  viewerSubscription: SubscriptionState

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload

  """
  Unmark a project as a template.
  """
  unmarkProjectV2AsTemplate(
    """
    Parameters for UnmarkProjectV2AsTemplate
    """
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  id: ID!

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  """
  Find a project by number.
  """
  unsubscribeFromNotifications(
    """
    Parameters for UnsubscribeFromNotifications
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  Creates a new project by cloning configuration from an existing project.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The estimated time in seconds until a newly added entry would be merged
  """
  nextEntryEstimatedTimeToMerge: Int

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type ProjectV2ItemFieldValueEdge {
  """
  Close a discussion.
  """
  closeDiscussion(
    """
    Parameters for CloseDiscussion
    """
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload

  """
  Close an issue.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Order projects by name
  """
  NAME

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  Statistics about package activity.
  """
  statistics: PackageStatistics

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  Name of the file.
  """
  name: String!

  """
  The package version this file belongs to.
  """
  packageVersion: PackageVersion

  """
  SHA1 hash of the file.
  """
  sha1: String

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Single Select
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Represents an owner of a package.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  Roadmap layout
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Table layout
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  REPOSITORY

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  REVIEWERS

  """
  The Node ID of the Organization object
  """
  SINGLE_SELECT

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
input LinkProjectV2ToTeamInput {
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  content: ProjectV2ItemContent

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Labels value of a field
  """
  labels(
    """
    Parameters for RevertPullRequest
    """
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Starts a GitHub Enterprise Importer organization migration.
  """
  startOrganizationMigration(
    """
    Parameters for StartOrganizationMigration
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

"""
Detailed status information about a pull request merge.
"""
type LinkedBranch implements Node {
  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The permalink to the pull request.
  """
  permalink: URI!

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
type MannequinEdge {
  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Adds enterprise members to an organization within the enterprise.
  """
  addEnterpriseOrganizationMember(
    """
    Parameters for AddEnterpriseOrganizationMember
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object
  """
  id: ID!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The title of the revert pull request.
  """
  title: String
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Indicates whether the author of this review has push access to the repository.
  """
  authorCanPushToRepository: Boolean!

  """
  Identifies the pull request review body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body of this review rendered as plain text.
  """
  bodyText: String!

  """
  Identifies the actor who performed the event.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  editor: Actor

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  onBehalfOf(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the pull request associated with this pull request review.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Find a project by number.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Returns true if the project is closed.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  creator: Actor

  """
  The login of the user to revoke the migrator role
  """
  databaseId: Int

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  actorType: ActorType!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The ID of the organization that the user/team belongs to.
  """
  number: Int!

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  owner: ProjectV2Owner!

  """
  Did the operation succeed?
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  resourcePath: URI!

  """
  Do not evaluate or enforce rules
  """
  shortDescription: String

  """
  The HTTP path listing organization's projects
  """
  title: String!

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  updatedAt: DateTime!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  editor: Actor

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  Parameters used for the `required_status_checks` rule type
  """
  edges: [ProjectV2Edge]

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  nodes: [ProjectV2]

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  The start line number on the file to which the comment applied when it was first created
  """
  createdAt: DateTime!

  """
  SHA256
  """
  dataType: ProjectV2FieldType!

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  SHA512
  """
  name: String!

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  project: ProjectV2!

  """
  RSA-SHA256
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  The body of the saved reply.
  """
  createdAt: DateTime!

  """
  The saved reply body rendered to HTML.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  The start line number on the file to which the comment applies
  """
  name: String!

  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldEdge]

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The ordering direction.
  """
  ASSIGNEES

  """
  The field to order saved replies by.
  """
  DATE

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of nodes.
  """
  REVIEWERS

  """
  Information to aid in pagination.
  """
  SINGLE_SELECT

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  The number to set on the field.
  """
  number: Float

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  isArchived: Boolean!

  """
  This is a long plaintext description of the advisory
  """
  project: ProjectV2!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  type: ProjectV2ItemType!

  """
  A list of identifiers for this advisory
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The permalink for the advisory's dependabot alerts page
  """
  edges: [ProjectV2ItemEdge]

  """
  The organization that originated the advisory
  """
  nodes: [ProjectV2Item]

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  The severity of the advisory
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  A short plaintext summary of the advisory
  """
  createdAt: DateTime!

  """
  When the advisory was last updated
  """
  creator: Actor

  """
  Vulnerabilities associated with this Advisory
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

"""
Classification of the advisory.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  creator: Actor

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Critical.
  """
  CRITICAL

  """
  The actor who created the item.
  """
  HIGH

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  Low.
  """
  LOW

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

"""
The connection type for PullRequestTimelineItem.
"""
type SecurityVulnerability {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  A discussion category by slug.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The project field's name.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  URL of the social media account.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Identifies the date and time when the object was last updated.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user that's made a reaction.
"""
type ProjectV2ViewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  The item at the end of the edge.
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  CONFUSED

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  CREATED_AT

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    type: PinnableItemType
  ): Boolean!

  """
  The public profile email.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The public profile location.
  """
  location: String

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

    """
    A project to search for linked to the repo.
    """
    query: String
  ): ProjectV2Connection!

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  The project's name.
  """
  name: String!

  """
  The project's number.
  """
  number: Int!

"""
A ref update
"""
input RefUpdate @preview(toggledBy: "update-refs-preview") {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    A name to filter the assets by.
    """
    last: Int

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Bangladesh
  """
  BD

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    Filter by author of the review.
    """
    author: String

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Chile
  """
  closed: Boolean!

  """
  Cameroon
  """
  CM

  """
  China
  """
  createdAt: DateTime!

  """
  Colombia
  """
  creator: Actor

  """
  Costa Rica
  """
  databaseId: Int

  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  fields(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  The updated enterprise.
  """
  number: Int!

  """
  The user that was removed from the enterprise.
  """
  owner: ProjectV2Owner!

  """
  Returns true if the project is public.
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Egypt
  """
  EG

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Identifies the pull request title.
  """
  resourcePath: URI!

  """
  Identifies the pull request title rendered to HTML.
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  Returns a count of how many comments this pull request has received.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  A list of edges.
  """
  edges: [ProjectV2Edge]

  """
  Whether or not the viewer can apply suggestion.
  """
  nodes: [ProjectV2]

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Kazakhstan
  """
  createdAt: DateTime!

  """
  Laos
  """
  dataType: ProjectV2FieldType!

  """
  Lebanon
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  Indicates if the object can be reopened by the viewer.
  """
  name: String!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  project: ProjectV2!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Reasons why the current viewer can not update this comment.
  """
  createdAt: DateTime!

  """
  Liberia
  """
  dataType: ProjectV2FieldType!

  """
  Lesotho
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Lithuania
  """
  name: String!

  """
  Luxembourg
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Update branch via merge
  """
  edges: [ProjectV2FieldEdge]

  """
  Update branch via rebase
  """
  nodes: [ProjectV2Field]

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  The Node ID of the RepositoryInvitation object
  """
  ASSIGNEES

  """
  Saint Martin (French part)
  """
  DATE

  """
  Madagascar
  """
  ITERATION

  """
  Marshall Islands
  """
  LABELS

  """
  Macedonia
  """
  LINKED_PULL_REQUESTS

  """
  Mali
  """
  MILESTONE

  """
  Myanmar
  """
  NUMBER

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  REPOSITORY

  """
  The Node ID of the PullRequestCommit object
  """
  REVIEWERS

  """
  Mongolia
  """
  SINGLE_SELECT

  """
  Macau
  """
  TEXT

  """
  Northern Mariana Islands
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Martinique
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  Mauritania
  """
  content: ProjectV2ItemContent

  """
  Montserrat
  """
  createdAt: DateTime!

  """
  Malta
  """
  creator: Actor

  """
  Mauritius
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Maldives
  """
  isArchived: Boolean!

  """
  Malawi
  """
  project: ProjectV2!

  """
  Malaysia
  """
  type: ProjectV2ItemType!

  """
  The repository is locked due to a trade controls related reason.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  The migration flag to continue on error.
  """
  edges: [ProjectV2ItemEdge]

  """
  Namibia
  """
  nodes: [ProjectV2Item]

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Niger
  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The migration source.
  """
  createdAt: DateTime!

  """
  Nigeria
  """
  creator: Actor

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  The migration state.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Romania
  """
  RO

  """
  The actor who created the item.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  RS

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Find a project by number.
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  The HTTP path listing organization's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing organization's projects
  """
  projectsUrl: URI!

  """
  A list of projects under the owner.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Whether or not the viewer can unresolve this thread
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Samoa
  """
  edges: [ProjectV2ViewEdge]

  """
  Yemen
  """
  nodes: [ProjectV2View]

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  What the goal amount is. Represents an amount in USD for monthly sponsorship
  amount goals. Represents a count of unique sponsors for total sponsors count goals.
  """
  enterpriseUrl: URI

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Returns a single ruleset from the current organization by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!
  ): RepositoryRuleset

  """
  A list of rulesets for this organization.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

    """
    Return rulesets configured at higher levels that apply to this organization
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The Organization's SAML identity provider. Visible to (1) organization owners,
  (2) organization owners' personal access tokens (classic) with read:org or
  admin:org scope, (3) GitHub App with an installation token with read or write
  access to members.
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  nextPayoutDate: Date

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    If non-null, filters teams according to notification setting
    """
    notificationSetting: TeamNotificationSetting

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The organization's Twitter username.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The body rendered to text.
  """
  bodyText: String!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether contributors are required to sign off on web-based commits for repositories in this organization.
  """
  webCommitSignoffRequired: Boolean!

  """
  The organization's public profile URL.
  """
  context: String!
}

"""
Ordering options for Sponsors tiers connections.
"""
union OrganizationAuditEntry =
    MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

"""
A sponsorship relationship between a sponsor and a maintainer
"""
type Sponsorship implements Node {
  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String!

    """
    The types of search items to search within.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    userName: String
  ): ExternalIdentityConnection!

  """
  The Node ID of the OrganizationIdentityProvider object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  email: String

  """
  The Node ID of the OrganizationInvitation object
  """
  id: ID!

  """
  The source of the invitation.
  """
  invitationSource: OrganizationInvitationSource!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  mergeCommit: Commit

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  inviter: User!
    @deprecated(
      reason: "`inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC."
    )

  """
  The user who created the invitation.
  """
  inviterActor: User

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  """
  The invitation was created from the web interface or from API
  """
  MEMBER

  """
  The invitation was created from SCIM
  """
  SCIM

  """
  The invitation was sent before this feature was added
  """
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the organization migration failed.
  """
  failureReason: String

  """
  The Node ID of the OrganizationMigration object
  """
  id: ID!

  """
  The remaining amount of repos to be migrated.
  """
  remainingRepositoriesCount: Int

  """
  The name of the source organization to be migrated.
  """
  sourceOrgName: String!

  """
  The URL of the source organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The migration state.
  """
  state: OrganizationMigrationState!

  """
  The name of the target organization.
  """
  targetOrgName: String!

  """
  The total amount of repositories to be migrated.
  """
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration has invalid credentials.
  """
  FAILED_VALIDATION

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration needs to have its credentials validated.
  """
  PENDING_VALIDATION

  """
  The Octoshift migration is performing post repository migrations.
  """
  POST_REPO_MIGRATION

  """
  The Octoshift migration is performing pre repository migrations.
  """
  PRE_REPO_MIGRATION

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift org migration is performing repository migrations.
  """
  REPO_MIGRATION

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Branch protection rules that are enforced on the viewer.
"""
type RefUpdateRule {
  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  """
  The Node ID of the Package object
  """
  id: ID!

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

"""
A file in a package version.
"""
type PackageFile implements Node {
  """
  The Node ID of the PackageFile object
  """
  id: ID!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  currentTitle: String!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  id: ID!

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  ssoUrl: URI!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
interface PackageOwner {
  """
  The Node ID of the PackageOwner object
  """
  id: ID!

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type PackageTag implements Node {
  """
  The Node ID of the PackageTag object
  """
  id: ID!

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  MAVEN
    @deprecated(
      reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
    )

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  NPM
    @deprecated(
      reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  A list of nodes.
  """
  NUGET
    @deprecated(
      reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
    )

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  RUBYGEMS
    @deprecated(
      reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
    )
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!

  """
  The Node ID of the PackageVersion object
  """
  id: ID!

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  Finds and returns the Project according to the provided Project number.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of projects linked to this repository.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  The name of the role this source has granted to the user.
  """
  roleName: String

  """
  The source of this permission.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  Returns a list of pull request templates associated to the repository
  """
  pullRequestTemplates: [PullRequestTemplate!]

  """
  A list of pull requests that have been opened in the repository.
  """
  editor: Actor

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  rebaseMergeAllowed: Boolean!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  Fetch a given ref from the repository
  """
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Ref

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  refs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

    """
    DEPRECATED: use orderBy. The ordering direction.
    """
    direction: OrderDirection

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

    """
    Ordering options for refs returned from the connection.
    """
    orderBy: RefOrder

    """
    Filters refs with query on name
    """
    query: String

    """
    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    """
    refPrefix: String!
  ): RefConnection

  """
  Lookup a single release given various criteria.
  """
  release(
    """
    The name of the Tag the Release was created from
    """
    tagName: String!
  ): Release

  """
  List of releases which are dependent on this repository.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """
  A list of applied repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  gradientStopColors: [String!]!

  """
  The Node ID of the PinnedDiscussion object
  """
  id: ID!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The SSH URL to clone this repository
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  editor: Actor

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies the original commit associated with the comment.
  """
  originalCommit: Commit

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Identifies when the comment body is outdated
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The line index in the diff to which the comment applies.
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The comment this is a reply to.
  """
  replyTo: PullRequestReviewComment

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this review comment.
  """
  resourcePath: URI!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  createdAt: DateTime!

  """
  The Node ID of the PinnedEvent object
  """
  id: ID!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  databaseId: Int

  """
  Identifies the primary key from the database as a BigInt.
  """
  fullDatabaseId: BigInt

  """
  The Node ID of the PinnedIssue object
  """
  id: ID!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  A list of edges.
  """
  edges: [SponsorableItemEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorableItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total amount in cents of all recurring sponsorships in the connection
  whose amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInCents: Int!

  """
  The total amount in USD of all recurring sponsorships in the connection whose
  amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInDollars: Int!
}

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingDisableAuditEntry object
  """
  id: ID!

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  A list of edges.
  """
  edges: [SponsorsActivityEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorsActivity]

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  enterpriseUrl: URI

  """
  The Node ID of the PrivateRepositoryForkingEnableAuditEntry object
  """
  id: ID!

"""
Ordering options for sponsorship newsletter connections.
"""
type SponsorsActivityEdge {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorship newsletters by.
  """
  node: SponsorsActivity
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  email: String

  """
  The Node ID of the ProfileOwner object
  """
  id: ID!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
enum StarOrderField {
  """
  Bosnia and Herzegovina
  """
  BA

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  databaseId: Int

  """
  The Node ID of the Project object
  """
  id: ID!

  """
  Indicates if the repository has issues feature enabled.
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the current viewer can update this object.
  """
  BN

"""
Audit log entry for a repo.config.disable_collaborators_only event.
"""
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  databaseId: Int

  """
  The Node ID of the ProjectCard object
  """
  id: ID!

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Identifies the date and time when the repository was last pushed to.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  databaseId: Int

  """
  The Node ID of the ProjectColumn object
  """
  id: ID!

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  """
  The Node ID of the ProjectOwner object
  """
  id: ID!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  """
  Algeria
  """
  closed: Boolean!

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  createdAt: DateTime!

  """
  Egypt
  """
  creator: Actor

  """
  Western Sahara
  """
  databaseId: Int

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  A field of the project
  """
  field(
    """
    The name of the field
    """
    name: String!
  ): ProjectV2FieldConfiguration

  """
  List of fields and their constraints in the project
  """
  ES

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 fields returned from the connection
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection!

  """
  The Node ID of the ProjectV2 object
  """
  id: ID!

  """
  Ethiopia
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 items returned from the connection
    """
    orderBy: ProjectV2ItemOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemConnection!

  """
  Finland
  """
  number: Int!

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  """
  Fiji
  """
  owner: ProjectV2Owner!

  """
  Falkland Islands
  """
  public: Boolean!

  """
  The project's readme.
  """
  readme: String

  """
  Micronesia
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: DESC}
  ): RepositoryConnection!

  """
  Faroe Islands
  """
  resourcePath: URI!

  """
  France
  """
  shortDescription: String

  """
  The teams the project is linked to.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from this connection.
    """
    orderBy: TeamOrder = {field: NAME, direction: ASC}
  ): TeamConnection!

  """
  Returns true if this project is a template.
  """
  template: Boolean!

  """
  The Node ID of the PushAllowance object
  """
  title: String!

  """
  Gabon
  """
  updatedAt: DateTime!

  """
  United Kingdom
  """
  url: URI!

  """
  A view of the project
  """
  view(
    """
    The number of a view belonging to the project
    """
    number: Int!
  ): ProjectV2View

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  The repository is locked due to a trade controls related reason.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 views returned from the connection
    """
    orderBy: ProjectV2ViewOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ViewConnection!

  """
  A workflow of the project
  """
  workflow(
    """
    The number of a workflow belonging to the project
    """
    number: Int!
  ): ProjectV2Workflow

  """
  List of the workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for project v2 workflows returned from the connection
    """
    orderBy: ProjectV2WorkflowOrder = {field: NAME, direction: ASC}
  ): ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ActorEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Actor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  """
  The role to grant the collaborator
  """
  role: ProjectV2Roles!

  """
  The ID of the team as a collaborator.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the user as a collaborator.
  """
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  """
  The migration flag to continue on error.
  """
  edges: [ProjectV2Edge]

  """
  Georgia
  """
  nodes: [ProjectV2]

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  """
  Date
  """
  DATE

  """
  Number
  """
  NUMBER

  """
  Single Select
  """
  SINGLE_SELECT

  """
  Text
  """
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  """
  Guernsey
  """
  GG

  """
  The migration source.
  """
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  """
  Gibraltar
  """
  createdAt: DateTime!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  dataType: ProjectV2FieldType!

  """
  The migration state.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2Field object
  """
  id: ID!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  name: String!

  """
  Guinea
  """
  project: ProjectV2!

  """
  Equatorial Guinea
  """
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  """
  Greece
  """
  createdAt: DateTime!

  """
  South Georgia and South Sandwich Islands
  """
  dataType: ProjectV2FieldType!

  """
  Guatemala
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2FieldCommon object
  """
  id: ID!

  """
  Guam
  """
  name: String!

  """
  Guinea-Bissau
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2FieldConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2FieldConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  """
  Hong Kong
  """
  edges: [ProjectV2FieldEdge]

  """
  Heard and McDonald Islands
  """
  nodes: [ProjectV2Field]

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
type ProjectV2FieldEdge {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 fields by.
  """
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  """
  Order project v2 fields by creation time
  """
  CREATED_AT

  """
  Order project v2 fields by name
  """
  NAME

  """
  Order project v2 fields by position
  """
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  """
  Honduras
  """
  ASSIGNEES

  """
  Croatia
  """
  DATE

  """
  Haiti
  """
  ITERATION

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  LABELS

  """
  Indonesia
  """
  LINKED_PULL_REQUESTS

  """
  Ireland
  """
  MILESTONE

  """
  Israel
  """
  NUMBER

  """
  Isle of Man
  """
  REPOSITORY

  """
  India
  """
  REVIEWERS

  """
  The Node ID of the RepositoryOwner object
  """
  SINGLE_SELECT

  """
  British Indian Ocean Territory
  """
  TEXT

  """
  Iraq
  """
  TITLE

  """
  Tracked by
  """
  TRACKED_BY

  """
  Iran
  """
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  """
  The ISO 8601 date to set on the field.
  """
  date: Date

  """
  The id of the iteration to set on the field.
  """
  iterationId: String

  """
  The number to set on the field.
  """
  number: Float

  """
  The id of the single select option to set on the field.
  """
  singleSelectOptionId: String

  """
  The text to set on the field.
  """
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  """
  List project v2 filtered by the state given.
  """
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  content: ProjectV2ItemContent

  """
  Iceland
  """
  createdAt: DateTime!

  """
  Jersey
  """
  creator: Actor

  """
  Jamaica
  """
  databaseId: Int

  """
  The field value of the first project field which matches the 'name' argument that is set on the item.
  """
  fieldValueByName(
    """
    The name of the field to return the field value of
    """
    name: String!
  ): ProjectV2ItemFieldValue

  """
  The field values that are set on the item.
  """
  JO

  """
  Japan
  """
  JP

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    last: Int

    """
    Ordering options for project v2 item field values returned from the connection
    """
    orderBy: ProjectV2ItemFieldValueOrder = {field: POSITION, direction: ASC}
  ): ProjectV2ItemFieldValueConnection!

  """
  The Node ID of the ProjectV2Item object
  """
  id: ID!

  """
  Kyrgyzstan
  """
  isArchived: Boolean!

  """
  Cambodia
  """
  project: ProjectV2!

  """
  Comoros
  """
  type: ProjectV2ItemType!

  """
  Saint Kitts and Nevis
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  """
  Korea, South
  """
  edges: [ProjectV2ItemEdge]

  """
  Kuwait
  """
  nodes: [ProjectV2Item]

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
A repository rule.
"""
type ProjectV2ItemEdge {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Configuration for the ref_name condition
  """
  createdAt: DateTime!

  """
  The Node ID of the Reactable object
  """
  creator: Actor

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  databaseId: Int

  """
  Date value for the field
  """
  date: Date

  """
  Configuration for the repository_id condition
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldDateValue object
  """
  id: ID!

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the iteration in days.
  """
  duration: Int!

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldIterationValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The ID of the iteration.
  """
  iterationId: String!

  """
  The start date of the iteration.
  """
  startDate: Date!

  """
  The title of the iteration.
  """
  title: String!

  """
  The title of the iteration, with HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Labels value of a field
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  Milestone value of a field
  """
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldNumberValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Number as a float(8)
  """
  number: Float

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The pull requests for this field
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Committer email pattern
  """
  createdAt: PreciseDateTime!

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The repository for this field.
  """
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The reviewers for this field.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  The color applied to the selected single-select option.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plain-text description of the selected single-select option, such as what the option means.
  """
  description: String

  """
  The description of the selected single-select option, including HTML tags.
  """
  descriptionHTML: String

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The Node ID of the ProjectV2ItemFieldSingleSelectValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  The name of the selected single select option.
  """
  name: String

  """
  The html name of the selected single select option.
  """
  nameHTML: String

  """
  The id of the selected single select option.
  """
  optionId: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  """
  Only allow users with bypass permission to update matching refs.
  """
  createdAt: PreciseDateTime!

  """
  The actor who created the item.
  """
  id: ID!

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The Node ID of the ProjectV2ItemFieldTextValue object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Text value of a field
  """
  text: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  """
  The field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

  """
  The users for this field
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue =
    ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project field that contains this value.
  """
  field: ProjectV2FieldConfiguration!

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The Node ID of the ProjectV2ItemFieldValueCommon object
  """
  id: ID!

  """
  The project item that contains this value.
  """
  item: ProjectV2Item!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2ItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2ItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 item field values by.
  """
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  """
  Order project v2 item field values by the their position in the project
  """
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order the project v2 items by.
  """
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  """
  Order project v2 items by the their position in the project
  """
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  """
  Draft Issue
  """
  DRAFT_ISSUE

  """
  Issue
  """
  ISSUE

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RepositoryRulesetBypassActorInput {
  """
  Pull Request
  """
  PULL_REQUEST

  """
  Redacted Item
  """
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  """
  Iteration configuration settings
  """
  configuration: ProjectV2IterationFieldConfiguration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ProjectV2IterationField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  """
  The iteration's completed iterations
  """
  completedIterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's duration in days
  """
  duration: Int!

"""
Branch protection rules that are enforced on the viewer.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The iteration's iterations
  """
  iterations: [ProjectV2IterationFieldIteration!]!

  """
  The iteration's start day of the week
  """
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  """
  The iteration's duration in days
  """
  duration: Int!

  """
  The iteration's ID.
  """
  id: String!

  """
  The iteration's start date
  """
  startDate: Date!

  """
  The iteration's title.
  """
  title: String!

  """
  The iteration's html title.
  """
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  """
  The project's date and time of creation
  """
  CREATED_AT

  """
  The project's number
  """
  NUMBER

  """
  The project's title
  """
  TITLE

  """
  The project's date and time of update
  """
  UPDATED_AT
}

"""
Represents an owner of a project.
"""
interface ProjectV2Owner {
  """
  The Node ID of the ProjectV2Owner object
  """
  id: ID!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  """
  The collaborator can view, edit, and maange the settings of the project
  """
  ADMIN

  """
  The collaborator has no direct access to the project
  """
  NONE

  """
  The collaborator can view the project
  """
  READER

  """
  The collaborator can view and edit the project
  """
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  """
  Mexico
  """
  MX

  """
  The field's type.
  """
  dataType: ProjectV2FieldType!

  """
  Mozambique
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the ProjectV2SingleSelectField object
  """
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  Options for the single select field
  """
  options(
    """
    Filter returned options to only those matching these names, case insensitive.
    """
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!

  """
  The project that contains this field.
  """
  project: ProjectV2!

  """
  Netherlands
  """
  NL

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  """
  The option's display color.
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The option's plain-text description.
  """
  description: String!

  """
  The option's description, possibly containing HTML.
  """
  descriptionHTML: String!

  """
  The option's ID.
  """
  id: String!

  """
  The option's name.
  """
  name: String!

  """
  The option's html name.
  """
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  """
  BLUE
  """
  BLUE

  """
  GRAY
  """
  GRAY

  """
  GREEN
  """
  GREEN

  """
  ORANGE
  """
  ORANGE

  """
  PINK
  """
  PINK

  """
  PURPLE
  """
  PURPLE

  """
  RED
  """
  RED

  """
  YELLOW
  """
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  """
  The display color of the option
  """
  color: ProjectV2SingleSelectFieldOptionColor!

  """
  The description text of the option
  """
  description: String!

  """
  The name of the option
  """
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortBy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  """
  The direction of the sorting. Possible values are ASC and DESC.
  """
  direction: OrderDirection!

  """
  The field by which items are sorted.
  """
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2SortByFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2SortByField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  """
  A project v2 that has been closed
  """
  CLOSED

  """
  A project v2 that is still open
  """
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The view's visible fields.
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The project view's filter.
  """
  filter: String

  """
  The view's group-by field.
  """
  groupBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's group-by field.
  """
  groupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The Node ID of the ProjectV2View object
  """
  id: ID!

  """
  The project view's layout.
  """
  layout: ProjectV2ViewLayout!

  """
  The project view's name.
  """
  name: String!

  """
  The project view's number.
  """
  number: Int!

  """
  The project that contains this view.
  """
  project: ProjectV2!

  """
  The view's sort-by config.
  """
  sortBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByConnection
    @deprecated(
      reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's sort-by config.
  """
  sortByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2SortByFieldConnection

  """
  Tuvalu
  """
  updatedAt: DateTime!

  """
  The view's vertical-group-by field.
  """
  verticalGroupBy(
    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
    )

  """
  The view's vertical-group-by field.
  """
  verticalGroupByFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConfigurationConnection

  """
  The view's visible fields.
  """
  visibleFields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the project v2 fields returned from the connection.
    """
    orderBy: ProjectV2FieldOrder = {field: POSITION, direction: ASC}
  ): ProjectV2FieldConnection
    @deprecated(
      reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
    )
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  """
  Status checks that are required.
  """
  edges: [ProjectV2ViewEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2View]

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
type ProjectV2ViewEdge {
  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  """
  Board layout
  """
  BOARD_LAYOUT

  """
  Roadmap layout
  """
  ROADMAP_LAYOUT

  """
  Table layout
  """
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The field to order the project v2 views by.
  """
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  """
  Order project v2 views by creation time
  """
  CREATED_AT

  """
  Order project v2 views by name
  """
  NAME

  """
  Order project v2 views by position
  """
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether the workflow is enabled.
  """
  enabled: Boolean!

  """
  The Node ID of the ProjectV2Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  id: ID!

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  The number of the workflow.
  """
  number: Int!

  """
  The project that contains this workflow.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  """
  A list of edges.
  """
  edges: [ProjectV2WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectV2Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  """
  The ordering direction.
  """
  mergeQueue: MergeQueue

  """
  The field to order the project v2 workflows by.
  """
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  """
  The date and time of the workflow creation
  """
  body: String

  """
  The name of the workflow
  """
  NAME

  """
  The number of the workflow
  """
  NUMBER

  """
  The date and time of the workflow update
  """
  UPDATED_AT
}

"""
A user's public key.
"""
type PublicKey implements Node {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!

  """
  The Node ID of the PublicKey object
  """
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft tier to publish.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was published.
  """
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder

    """
    Return only manually linked Issues
    """
    userLinkedOnly: Boolean = false
  ): IssueConnection

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!

  """
  The Node ID of the PullRequest object
  """
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  The merge queue entry of the pull request in the base branch's merge queue
  """
  mergeQueueEntry: MergeQueueEntry

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  SHA256
  """
  SHA256

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    direction: OrderDirection

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  SHA512
  """
  SHA512
}

    """
    Ordering options for refs returned from the connection.
    """
    last: Int
  ): ProjectCardConnection!

  """
  List of project items associated with this pull request.
  """
  projectItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include archived items.
    """
    includeArchived: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection!

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    last: Int

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Rust crates
  """
  RUST

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  """
  Update branch via merge
  """
  MERGE

  """
  Update branch via rebase
  """
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommit object
  """
  id: ID!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  commit: Commit!

  """
  The Node ID of the PullRequestCommitCommentThread object
  """
  id: ID!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Identifies the date and time when the repository was last pushed to.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The email address that received the invitation.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The user who received the invitation.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  """
  New, reviewable commits pushed will dismiss previous pull request review approvals.
  """
  dismissStaleReviewsOnPush: Boolean!

  """
  Require an approving review in pull requests that modify files that have a designated code owner.
  """
  requireCodeOwnerReview: Boolean!

  """
  Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  """
  requireLastPushApproval: Boolean!

  """
  The number of approving reviews that are required before a pull request can be merged.
  """
  requiredApprovingReviewCount: Int!

  """
  All conversations on code must be resolved before a pull request can be merged.
  """
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  editor: Actor

  """
  The Node ID of the PullRequestReview object
  """
  id: ID!

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  hasSponsorsListing: Boolean!

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  A list of teams that this review was made on behalf of.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Identifies the primary key from the database.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The migration source.
  """
  migrationSource: MigrationSource!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  viewerCanSponsor: Boolean!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  The HTTP path creating a new team
  """
  edges: [SponsorableItemEdge]

  """
  The HTTP URL creating a new team
  """
  nodes: [SponsorableItem]

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  organization: Organization!

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  The parent team of the team.
  """
  parentTeam: Team

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  editor: Actor

  """
  The Node ID of the PullRequestReviewComment object
  """
  id: ID!

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The end line number on the file to which the comment applies
  """
  line: Int

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  The end line number on the file to which the comment applied when it was first created
  """
  originalLine: Int

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!
    @deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")

  """
  The start line number on the file to which the comment applied when it was first created
  """
  originalStartLine: Int

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  position: Int
    @deprecated(
      reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
    )

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The start line number on the file to which the comment applies
  """
  startLine: Int

  """
  Identifies the state of the comment.
  """
  id: ID!

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Identifies when the comment was last updated.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  edges: [SponsorsActivityEdge]

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  nodes: [SponsorsActivity]

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
type SponsorsActivityEdge {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  node: SponsorsActivity
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestReviewThread object
  """
  id: ID!

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  """
  A comment that has been made against the file of a pull request
  """
  FILE

  """
  A comment that has been made against the line of a pull request
  """
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewCommentConnection!

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The Node ID of the PullRequestThread object
  """
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The line of the first file diff in the thread.
  """
  startLine: Int

  """
  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
  """
  subjectType: PullRequestReviewThreadSubjectType!

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
type SponsorsTierAdminInfo {
  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  """
  The Node ID of the Push object
  """
  id: ID!

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the PushAllowance object
  """
  id: ID!
}

  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Workaround for re-exposing the root query object. (Refer to
  https://github.com/facebook/relay/issues/112 for more information.)
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Perform a search across resources, returning a maximum of 1,000 results.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. GitHub search syntax is supported. For more
    information, see "[Searching on
    GitHub](https://docs.github.com/search-github/searching-on-github),"
    "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax),"
    and "[Sorting search results](https://docs.github.com/search-github/getting-started-with-searching-on-github/sorting-search-results)."
    """
    query: String
  ): UserConnection!

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

"""
The privacy of a sponsorship
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  DISMISSED

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  union: Boolean = false

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  Greenland
  """
  GL

  """
  Gambia
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Guinea
  """
  databaseId: Int

  """
  The Node ID of the Reactable object
  """
  id: ID!

  """
  Guadeloupe
  """
  GP

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  GQ

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  databaseId: Int

  """
  The Node ID of the Reaction object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReadyForReviewEvent object
  """
  id: ID!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Compares the current ref as a base ref to another head ref, if the comparison can be made.
  """
  compare(
    """
    The head ref to compare against.
    """
    headRef: String!
  ): Comparison

  """
  The Node ID of the Ref object
  """
  id: ID!

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  A list of rules from active Repository and Organization rulesets that apply to this ref.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository rules.
    """
    orderBy: RepositoryRuleOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryRuleConnection

  """
  The object the ref points to. Returns null when object does not exist.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  """
  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches.
  """
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Branch protection rules that are enforced on the viewer.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReferencedEvent object
  """
  id: ID!

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  Finds and returns the Project according to the provided Project number.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of projects linked to this repository.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for linked to the repo.
    """
    query: String
  ): ProjectV2Connection!

  """
  Returns a single pull request from the current repository by number.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  Returns a list of pull request templates associated to the repository
  """
  pullRequestTemplates: [PullRequestTemplate!]

  """
  A list of pull requests that have been opened in the repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  Fetch a given ref from the repository
  """
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Ref

  """
  Fetch a list of refs from the repository
  """
  refs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  descriptionHTML: HTML

  """
  The Node ID of the Release object
  """
  id: ID!

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

    """
    Ordering options for refs returned from the connection.
    """
    orderBy: RefOrder

    """
    Filters refs with query on name
    """
    query: String

    """
    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    """
    refPrefix: String!
  ): RefConnection

  """
  Lookup a single release given various criteria.
  """
  release(
    """
    The name of the Tag the Release was created from
    """
    tagName: String!
  ): Release

  """
  List of releases which are dependent on this repository.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """
  A list of applied repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  downloadUrl: URI!

  """
  The Node ID of the ReleaseAsset object
  """
  id: ID!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The reaction groups for the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  The reactable subject.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The votable subject.
  """
  subject: Votable
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the before commit SHA for the 'removed_from_merge_queue' event.
  """
  beforeCommit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User

  """
  The Node ID of the RemovedFromMergeQueueEvent object
  """
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  databaseId: Int

  """
  The Node ID of the RemovedFromProjectEvent object
  """
  id: ID!

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  currentTitle: String!

  """
  The Node ID of the RenamedTitleEvent object
  """
  id: ID!

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the discussion to be reopened.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was reopened.
  """
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReopenedEvent object
  """
  id: ID!

  """
  ASCII-armored signature header from object.
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAccessAuditEntry object
  """
  id: ID!

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The migration source.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  sponsor: Sponsorable!

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddMemberAuditEntry object
  """
  id: ID!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoAddTopicAuditEntry object
  """
  id: ID!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoArchivedAuditEntry object
  """
  id: ID!

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoChangeMergeSettingAuditEntry object
  """
  id: ID!

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Audit log entry for a repo.config.disable_collaborators_only event.
"""
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  The HTTP path for this repository-topic.
  """
  resourcePath: URI!

  """
  The topic.
  """
  topic: Topic!

  """
  The HTTP URL for this repository-topic.
  """
  url: URI!
}

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Japan
  """
  edges: [SponsorableItemEdge]

  """
  Kenya
  """
  nodes: [SponsorableItem]

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
type RepositoryVisibilityChangeDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The user affected by the action
  """
  user: User

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object
  """
  id: ID!

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  The associated Dependabot update
  """
  dependabotUpdate: DependabotUpdate

  """
  The scope of an alert's dependency
  """
  dependencyScope: RepositoryVulnerabilityAlertDependencyScope

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  dismissReason: String

  """
  When was the alert dismissed?
  """
  dismissedAt: DateTime

  """
  The user who dismissed the alert
  """
  dismisser: User

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Identifies the alert number.
  """
  number: Int!

  """
  The associated repository
  """
  repository: Repository!

  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object
  """
  id: ID!

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Libya
  """
  edges: [SponsorsActivityEdge]

  """
  Morocco
  """
  nodes: [SponsorsActivity]

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
enum RepositoryVulnerabilityAlertState {
  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  DISMISSED

  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
input RequestReviewsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node IDs of the team to request.
  """
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])

  """
  Add users to the set rather than replace.
  """
  union: Boolean = false

  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object
  """
  id: ID!

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object
  """
  id: ID!

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  forkSourceName: String

  """
  The Node ID of the RepoCreateAuditEntry object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoDestroyAuditEntry object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveMemberAuditEntry object
  """
  id: ID!

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the RepoRemoveTopicAuditEntry object
  """
  id: ID!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

    """
    Filters users with query on user name and login.
    """
    query: String
  ): UserConnection!

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Returns the contributing guidelines for this repository.
  """
  contributingGuidelines: ContributingGuidelines

  """
  Identifies the date and time when the object was created.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  ecosystem: SecurityAdvisoryEcosystem!

    """
    Only show answered or unanswered discussions
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the environments
    """
    orderBy: Environments = {field: NAME, direction: ASC}
  ): EnvironmentConnection!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  homepageUrl: URI

  """
  The Node ID of the Repository object
  """
  id: ID!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  Finds and returns the Project according to the provided Project number.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of projects linked to this repository.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for linked to the repo.
    """
    query: String
  ): ProjectV2Connection!

  """
  Returns a single pull request from the current repository by number.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  Returns a list of pull request templates associated to the repository
  """
  pullRequestTemplates: [PullRequestTemplate!]

  """
  A list of pull requests that have been opened in the repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  Fetch a given ref from the repository
  """
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Ref

  """
  Fetch a list of refs from the repository
  """
  refs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

    """
    DEPRECATED: use orderBy. The ordering direction.
    """
    direction: OrderDirection

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A list of nodes.
  """
  nodes: [Sponsor]

    """
    Ordering options for refs returned from the connection.
    """
    orderBy: RefOrder

    """
    Filters refs with query on name
    """
    query: String

    """
    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    """
    refPrefix: String!
  ): RefConnection

  """
  Lookup a single release given various criteria.
  """
  release(
    """
    The name of the Tag the Release was created from
    """
    tagName: String!
  ): Release

  """
  List of releases which are dependent on this repository.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """
  A list of applied repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  Returns a single ruleset from the current repository by ID.
  """
  ruleset(
    """
    The ID of the ruleset to be returned.
    """
    databaseId: Int!

    """
    Include rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true
  ): RepositoryRuleset

  """
  A list of rulesets for this repository.
  """
  rulesets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Return rulesets configured at higher levels that apply to this repository
    """
    includeParents: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetConnection

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Bahamas
  """
  edges: [SponsorableItemEdge]

  """
  Bhutan
  """
  nodes: [SponsorableItem]

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Belarus
  """
  BY

  """
  Belize
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The total size in kilobytes of all repositories in the connection. Value will
  never be larger than max 32-bit signed integer.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!
}

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  """
  One of these repo IDs must match the repo.
  """
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
type SponsorsActivityConnection {
  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  edges: [SponsorsActivityEdge]

  """
  Cyprus
  """
  nodes: [SponsorsActivity]

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  DJ

  """
  Denmark
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Identifies the date and time when the repository was last pushed to.
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  Bahamas
  """
  email: String

  """
  The Node ID of the RepositoryInvitation object
  """
  id: ID!

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  RENAME

  """
  The repository is locked due to a trade controls related reason.
  """
  TRADE_RESTRICTION

  """
  The repository is locked due to an ownership transfer.
  """
  TRANSFERRING_OWNERSHIP
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  """
  The migration flag to continue on error.
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Identifies the primary key from the database.
  """
  databaseId: String

  """
  The reason the migration failed.
  """
  failureReason: String

  """
  The Node ID of the RepositoryMigration object
  """
  id: ID!

  """
  Cyprus
  """
  CY

  """
  The migration source.
  """
  CZ

  """
  Germany
  """
  DE

  """
  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
  """
  DJ

  """
  The migration state.
  """
  state: MigrationState!

  """
  The number of warnings encountered for this migration. To review the warnings,
  check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
  """
  warningsCount: Int!
}

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  """
  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  """
  exclude: [String!]!

  """
  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories.
  """
  include: [String!]!

  """
  Target changes that match these patterns will be prevented except by those with bypass permissions.
  """
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The Node ID of the RepositoryOwner object
  """
  id: ID!

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  PUBLIC
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  """
  The Node ID of the RepositoryRule object
  """
  id: ID!

  """
  The parameters for this rule.
  """
  parameters: RuleParameters

  """
  The repository ruleset associated with this rule configuration
  """
  repositoryRuleset: RepositoryRuleset

  """
  The type of rule.
  """
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTarget

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTarget

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  """
  Configuration for the ref_name condition
  """
  refName: RefNameConditionTargetInput

  """
  Configuration for the repository_id condition
  """
  repositoryId: RepositoryIdConditionTargetInput

  """
  Configuration for the repository_name condition
  """
  repositoryName: RepositoryNameConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRuleEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  """
  Optional ID of this rule when updating
  """
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])

  """
  The parameters for the rule.
  """
  parameters: RuleParametersInput

  """
  The type of rule to create.
  """
  type: RepositoryRuleType!
}

"""
Ordering options for repository rules.
"""
input RepositoryRuleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository rules by.
  """
  field: RepositoryRuleOrderField!
}

"""
Properties by which repository rule connections can be ordered.
"""
enum RepositoryRuleOrderField {
  """
  Order repository rules by created time
  """
  CREATED_AT

  """
  Order repository rules by type
  """
  TYPE

  """
  Order repository rules by updated time
  """
  UPDATED_AT
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  """
  Authorization
  """
  AUTHORIZATION

  """
  Branch name pattern
  """
  BRANCH_NAME_PATTERN

  """
  Committer email pattern
  """
  COMMITTER_EMAIL_PATTERN

  """
  Commit author email pattern
  """
  COMMIT_AUTHOR_EMAIL_PATTERN

  """
  Commit message pattern
  """
  COMMIT_MESSAGE_PATTERN

  """
  Only allow users with bypass permission to create matching refs.
  """
  CREATION

  """
  Only allow users with bypass permissions to delete matching refs.
  """
  DELETION

  """
  Branch is read-only. Users cannot push to the branch.
  """
  LOCK_BRANCH

  """
  Max ref updates
  """
  MAX_REF_UPDATES

  """
  Merges must be performed via a merge queue.
  """
  MERGE_QUEUE

  """
  Merge queue locked ref
  """
  MERGE_QUEUE_LOCKED_REF

  """
  Prevent users with push access from force pushing to refs.
  """
  NON_FAST_FORWARD

  """
  Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  """
  PULL_REQUEST

  """
  Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  """
  REQUIRED_DEPLOYMENTS

  """
  Prevent merge commits from being pushed to matching refs.
  """
  REQUIRED_LINEAR_HISTORY

  """
  When enabled, all conversations on code must be resolved before a pull request
  can be merged into a branch that matches this rule.
  """
  REQUIRED_REVIEW_THREAD_RESOLUTION

  """
  Commits pushed to matching refs must have verified signatures.
  """
  REQUIRED_SIGNATURES

  """
  Choose which status checks must pass before the ref is updated. When enabled,
  commits must first be pushed to another ref where the checks pass.
  """
  REQUIRED_STATUS_CHECKS

  """
  Require all commits be made to a non-target branch and submitted via a pull
  request and required workflow checks to pass before they can be merged.
  """
  REQUIRED_WORKFLOW_STATUS_CHECKS

  """
  Commits pushed to matching refs must have verified signatures.
  """
  RULESET_REQUIRED_SIGNATURES

  """
  Secret scanning
  """
  SECRET_SCANNING

  """
  Tag
  """
  TAG

  """
  Tag name pattern
  """
  TAG_NAME_PATTERN

  """
  Only allow users with bypass permission to update matching refs.
  """
  UPDATE

  """
  Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  """
  WORKFLOWS

  """
  Workflow files cannot be modified.
  """
  WORKFLOW_UPDATES
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  """
  The actors that can bypass this ruleset
  """
  bypassActors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRulesetBypassActorConnection

  """
  The set of conditions that must evaluate to true for this ruleset to apply
  """
  conditions: RepositoryRuleConditions!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The enforcement level of this ruleset
  """
  enforcement: RuleEnforcement!

  """
  The Node ID of the RepositoryRuleset object
  """
  id: ID!

  """
  Name of the ruleset.
  """
  name: String!

  """
  List of rules.
  """
  rules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The type of rule.
    """
    type: RepositoryRuleType
  ): RepositoryRuleConnection

  """
  Source of ruleset.
  """
  source: RuleSource!

  """
  Target of the ruleset.
  """
  target: RepositoryRulesetTarget

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  """
  The actor that can bypass rules.
  """
  actor: BypassActor

  """
  The mode for the bypass actor
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode

  """
  The Node ID of the RepositoryRulesetBypassActor object
  """
  id: ID!

  """
  This actor represents the ability for an organization owner to bypass
  """
  organizationAdmin: Boolean!

  """
  If the actor is a repository role, the repository role's ID that can bypass
  """
  repositoryRoleDatabaseId: Int

  """
  If the actor is a repository role, the repository role's name that can bypass
  """
  repositoryRoleName: String

  """
  Identifies the ruleset associated with the allowed actor
  """
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  """
  The actor can always bypass rules
  """
  ALWAYS

  """
  The actor can only bypass rules via a pull request
  """
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetBypassActorEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRulesetBypassActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  """
  For Team and Integration bypasses, the Team or Integration ID
  """
  actorId: ID

  """
  The bypass mode for this actor.
  """
  bypassMode: RepositoryRulesetBypassActorBypassMode!

  """
  For organization owner bypasses, true
  """
  organizationAdmin: Boolean

  """
  For role bypasses, the role database ID
  """
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRulesetEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRuleset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  """
  Branch
  """
  BRANCH

  """
  Tag
  """
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  """
  The Node ID of the RepositoryTopic object
  """
  id: ID!

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object
  """
  id: ID!

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  enterpriseUrl: URI

  """
  The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object
  """
  id: ID!

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  When was the alert auto-dismissed?
  """
  autoDismissedAt: DateTime

  """
  When was the alert created?
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Comment explaining the reason the alert was dismissed
  """
  dismissComment: String

  """
  The reason the alert was dismissed
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  When was the alert fixed?
  """
  fixedAt: DateTime

  """
  The Node ID of the RepositoryVulnerabilityAlert object
  """
  id: ID!

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  An alert that has been automatically closed by Dependabot.
  """
  AUTO_DISMISSED

  """
  An alert that has been manually closed by a user.
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  union: Boolean = false

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

  """
  Rwanda
  """
  RW

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
type RequiredDeploymentsParameters {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  """
  The environments that must be successfully deployed to before branches can be merged.
  """
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
type RequiredStatusChecksParameters {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfiguration!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before the ref is updated. When enabled,
commits must first be pushed to another ref where the checks pass.
"""
input RequiredStatusChecksParametersInput {
  """
  Status checks that are required.
  """
  requiredStatusChecks: [StatusCheckConfigurationInput!]!

  """
  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled.
  """
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Slovenia
  """
  SI

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the published tier to retire.
  """
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The tier that was retired.
  """
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  """
  The description of the revert pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the revert pull request should be a draft.
  """
  draft: Boolean = false

  """
  The ID of the pull request to revert.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The title of the revert pull request.
  """
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reverted.
  """
  pullRequest: PullRequest

  """
  The new pull request that reverts the input pull request.
  """
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user, team, or app.
  """
  branchProtectionRule: BranchProtectionRule

  """
  The Node ID of the ReviewDismissalAllowance object
  """
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """
  The Node ID of the ReviewDismissedEvent object
  """
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the ReviewRequest object
  """
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestRemovedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the ReviewRequestedEvent object
  """
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to revoke the migrator role
  """
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organizations that had the migrator role revoked for the given user.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  """
  A user who is a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  A user with full administrative access to the organization.
  """
  OWNER

  """
  A user who is unaffiliated with the organization.
  """
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  """
  Rules will be enforced
  """
  ACTIVE

  """
  Do not evaluate or enforce rules
  """
  DISABLED

  """
  Allow admins to test rules before enforcing them. Admins can view insights on
  the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
  """
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters =
    BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters
  | WorkflowsParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  """
  Parameters used for the `branch_name_pattern` rule type
  """
  branchNamePattern: BranchNamePatternParametersInput

  """
  Parameters used for the `commit_author_email_pattern` rule type
  """
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput

  """
  Parameters used for the `commit_message_pattern` rule type
  """
  commitMessagePattern: CommitMessagePatternParametersInput

  """
  Parameters used for the `committer_email_pattern` rule type
  """
  committerEmailPattern: CommitterEmailPatternParametersInput

  """
  Parameters used for the `pull_request` rule type
  """
  pullRequest: PullRequestParametersInput

  """
  Parameters used for the `required_deployments` rule type
  """
  requiredDeployments: RequiredDeploymentsParametersInput

  """
  Parameters used for the `required_status_checks` rule type
  """
  requiredStatusChecks: RequiredStatusChecksParametersInput

  """
  Parameters used for the `tag_name_pattern` rule type
  """
  tagNamePattern: TagNamePatternParametersInput

  """
  Parameters used for the `update` rule type
  """
  update: UpdateParametersInput

  """
  Parameters used for the `workflows` rule type
  """
  workflows: WorkflowsParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the SavedReply object
  """
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  """
  The total number of pieces of code that matched the search query. Regardless
  of the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  codeCount: Int!

  """
  The total number of discussions that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The total number of issues that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  issueCount: Int!

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of repositories that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  repositoryCount: Int!

  """
  The total number of users that matched the search query. Regardless of the
  total number of matches, a maximum of 1,000 results will be available across all types.
  """
  userCount: Int!

  """
  The total number of wiki pages that matched the search query. Regardless of
  the total number of matches, a maximum of 1,000 results will be available
  across all types.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  """
  The classification of the advisory
  """
  classification: SecurityAdvisoryClassification!

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!

  """
  The Node ID of the SecurityAdvisory object
  """
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of advisory classifications to filter vulnerabilities by.
    """
    classifications: [SecurityAdvisoryClassification!]

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  """
  Classification of general advisories.
  """
  GENERAL

  """
  Classification of malware advisories.
  """
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  """
  GitHub Actions
  """
  ACTIONS

  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Dart packages hosted at pub.dev
  """
  PUB

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  """
  Software or company that hosts the social media account.
  """
  provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  """
  Social media and networking website.
  """
  FACEBOOK

  """
  Catch-all for social media providers that do not yet have specific handling.
  """
  GENERIC

  """
  Fork of Mastodon with a greater focus on local posting.
  """
  HOMETOWN

  """
  Social media website with a focus on photo and video sharing.
  """
  INSTAGRAM

  """
  Professional networking website.
  """
  LINKEDIN

  """
  Open-source federated microblogging service.
  """
  MASTODON

  """
  JavaScript package registry.
  """
  NPM

  """
  Social news aggregation and discussion website.
  """
  REDDIT

  """
  Live-streaming service.
  """
  TWITCH

  """
  Microblogging website.
  """
  TWITTER

  """
  Online video platform.
  """
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
A GitHub account and the total amount in USD they've paid for sponsorships to a
particular maintainer. Does not include payments made via Patreon.
"""
type SponsorAndLifetimeValue {
  """
  The amount in cents.
  """
  amountInCents: Int!

  """
  The amount in USD, formatted as a string.
  """
  formattedAmount: String!

  """
  The sponsor's GitHub account.
  """
  sponsor: Sponsorable!

  """
  The maintainer's GitHub account.
  """
  sponsorable: Sponsorable!
}

"""
The connection type for SponsorAndLifetimeValue.
"""
type SponsorAndLifetimeValueConnection {
  """
  A list of edges.
  """
  edges: [SponsorAndLifetimeValueEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorAndLifetimeValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorAndLifetimeValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorAndLifetimeValue
}

"""
Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
"""
input SponsorAndLifetimeValueOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order results by.
  """
  field: SponsorAndLifetimeValueOrderField!
}

"""
Properties by which sponsor and lifetime value connections can be ordered.
"""
enum SponsorAndLifetimeValueOrderField {
  """
  Order results by how much money the sponsor has paid in total.
  """
  LIFETIME_VALUE

  """
  Order results by the sponsor's login (username).
  """
  SPONSOR_LOGIN

  """
  Order results by the sponsor's relevance to the viewer.
  """
  SPONSOR_RELEVANCE
}

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  """
  Chad
  """
  edges: [SponsorableItemEdge]

  """
  French Southern Lands
  """
  nodes: [SponsorableItem]

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!

  """
  The sponsor's current privacy level.
  """
  currentPrivacyLevel: SponsorshipPrivacy

  """
  The Node ID of the SponsorsActivity object
  """
  id: ID!

  """
  The platform that was used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime

  """
  Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
  """
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

"""
The role of a user on a team.
"""
enum TeamRole {
  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  """
  Vatican City
  """
  edges: [SponsorsActivityEdge]

  """
  Saint Vincent and the Grenadines
  """
  nodes: [SponsorsActivity]

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  """
  Andorra
  """
  AD

  """
  United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina Faso
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei Darussalam
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Congo (Kinshasa)
  """
  CD

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  Central African Republic
  """
  CF

  """
  Congo (Brazzaville)
  """
  CG

"""
A topic aggregates entities that are related to a subject.
"""
type TeamDiscussion implements Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  British Indian Ocean Territory
  """
  IO

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Korea, South
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin (French part)
  """
  MF

  """
  Madagascar
  """
  MG

  """
  Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macau
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

"""
Represents a 'transferred' event on a given issue or pull request.
"""
type TransferredEvent implements Node {
  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Palestine
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Reunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russian Federation
  """
  RU

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  Seychelles
  """
  SC

  """
  Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen Islands
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

"""
Autogenerated input type of SubmitPullRequestReview
"""
type SubscribedEvent implements Node {
  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  French Southern Lands
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Türkiye
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  Uzbekistan
  """
  UZ

  """
  Vatican City
  """
  VA

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  Virgin Islands, British
  """
  VG

  """
  Virgin Islands, U.S.
  """
  VI

  """
  Vietnam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna Islands
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
type UnfollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  The user that was unfollowed.
  """
  user: User
}

"""
Represents a type that can be retrieved by a URL.
"""
interface UniformResourceLocatable {
  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  The URL to this resource.
  """
  url: URI!
}

"""
Represents an unknown signature on a Commit or Tag.
"""
type UnknownSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  The Stripe Connect account currently in use for payouts for this Sponsors
  listing, if any. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  activeStripeConnectAccount: StripeConnectAccount

  """
  The name of the country or region with the maintainer's bank account or fiscal
  host. Will only return a value when queried by the maintainer themselves, or
  by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The email address used by GitHub to contact the sponsorable about their GitHub
  Sponsors profile. Will only return a value when queried by the maintainer
  themselves, or by an admin of the sponsorable organization.
  """
  contactEmailAddress: String

  """
  Identifies the date and time when the object was created.
  """
  isValid: Boolean!

  """
  The HTTP path for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardResourcePath: URI!

  """
  The HTTP URL for the Sponsors dashboard for this Sponsors listing.
  """
  dashboardUrl: URI!

  """
  The records featured on the GitHub Sponsors profile.
  """
  featuredItems(
    """
    The types of featured items to return.
    """
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [REPOSITORY, USER]
  ): [SponsorsListingFeaturedItem!]!

  """
  The fiscal host used for payments, if any. Will only return a value when
  queried by the maintainer themselves, or by an admin of the sponsorable organization.
  """
  fiscalHost: Organization

  """
  The full description of the listing.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  fullDescriptionHTML: HTML!

  """
  The Node ID of the SponsorsListing object
  """
  id: ID!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  state: GitSignatureState!

  """
  The name of the country or region where the maintainer resides. Will only
  return a value when queried by the maintainer themselves, or by an admin of
  the sponsorable organization.
  """
  residenceCountryOrRegion: String

  """
  The HTTP path for this Sponsors listing.
  """
  resourcePath: URI!

  """
  The short description of the listing.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

"""
Represents an 'unlabeled' event on a given issue or pull request.
"""
type UnlabeledEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  createdAt: PreciseDateTime!

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  The tiers for this GitHub Sponsors profile.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile.
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection

  """
  The HTTP URL for this Sponsors listing.
  """
  url: URI!
}

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Will either be a description from the sponsorable maintainer about why they
  featured this item, or the item's description itself, such as a user's bio
  from their GitHub profile page.
  """
  description: String

  """
  The record that is featured on the GitHub Sponsors profile.
  """
  featureable: SponsorsListingFeatureableItem!

  """
  The Node ID of the SponsorsListingFeaturedItem object
  """
  id: ID!

  """
  The position of this featured item on the GitHub Sponsors profile with a lower
  position indicating higher precedence. Starts at 1.
  """
  position: Int!

  """
  The GitHub Sponsors profile that features this record.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  """
  A repository owned by the user or organization with the GitHub Sponsors profile.
  """
  REPOSITORY

  """
  A user who belongs to the organization with the GitHub Sponsors profile.
  """
  USER
}

  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  organization: Organization!

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  Finds and returns the project according to the provided project number.
  """
  descriptionHTML: HTML!

  """
  The Node ID of the SponsorsTier object
  """
  id: ID!

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  Indicates whether this tier is still a work in progress by the sponsorable and
  not yet published to the associated GitHub Sponsors profile. Draft tiers
  cannot be used for new sponsorships and will not be in use on existing
  sponsorships. Draft tiers cannot be seen by anyone but the admins of the
  GitHub Sponsors profile.
  """
  isDraft: Boolean!

  """
  Indicates whether this tier is published to the associated GitHub Sponsors
  profile. Published tiers are visible to anyone who can see the GitHub Sponsors
  profile, and are available for use in sponsorships if the GitHub Sponsors
  profile is publicly visible.
  """
  isPublished: Boolean!

  """
  Indicates whether this tier has been retired from the associated GitHub
  Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
  profile and cannot be chosen for new sponsorships. Existing sponsorships may
  still use retired tiers if the sponsor selected the tier before it was retired.
  """
  isRetired: Boolean!

  """
  The sponsorships using this tier.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier.
    """
    last: Int

    """
    Order for the connection.
    """
    orderBy: TeamRepositoryOrder

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  Identifies the label associated with the 'unlabeled' event.
  """
  label: Label!

  """
  Identifies the `Labelable` associated with the event.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
type Sponsorship implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the Sponsorship object
  """
  id: ID!

  """
  Whether the sponsorship is active. False implies the sponsor is a past sponsor
  of the maintainer, while true implies they are a current sponsor.
  """
  isActive: Boolean!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  isOneTimePayment: Boolean!

  """
  Whether the sponsor has chosen to receive sponsorship update emails sent from
  the sponsorable. Only returns a non-null value when the viewer has permission to know this.
  """
  isSponsorOptedIntoEmail: Boolean

  """
  The entity that is being sponsored
  """
  maintainer: User!
    @deprecated(
      reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC."
    )

  """
  The platform that was most recently used to pay for the sponsorship.
  """
  paymentSource: SponsorshipPaymentSource

  """
  The privacy level for this sponsorship.
  """
  privacyLevel: SponsorshipPrivacy!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project linked to the Repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the Repository linked to the Project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkRepositoryFromProject
"""
type UnlinkRepositoryFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The linked Project.
  """
  project: Project

  """
  The linked Repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlockLockable
"""
input UnlockLockableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the item to be unlocked.
  """
  lockableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Lockable")
}

"""
Autogenerated return type of UnlockLockable
"""
type UnlockLockablePayload {
  """
  The author of the newsletter.
  """
  author: User

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  createdAt: DateTime!

  """
  The Node ID of the SponsorshipNewsletter object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlocked.
  """
  unlockedRecord: Lockable
}

"""
Represents an 'unlocked' event on a given issue or pull request.
"""
type UnlockedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  Object that was unlocked.
  """
  lockable: Lockable!
}

"""
Autogenerated input type of UnmarkDiscussionCommentAsAnswer
"""
input UnmarkDiscussionCommentAsAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion comment to unmark as an answer.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of UnmarkDiscussionCommentAsAnswer
"""
type UnmarkDiscussionCommentAsAnswerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that includes the comment.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

"""
Autogenerated input type of UnmarkFileAsViewed
"""
input UnmarkFileAsViewedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The path of the file to mark as unviewed
  """
  path: String!

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
How payment was made for funding a GitHub Sponsors sponsorship.
"""
enum SponsorshipPaymentSource {
  """
  Payment was made through GitHub.
  """
  GITHUB

  """
  Payment was made through Patreon.
  """
  PATREON
}

"""
The privacy of a sponsorship
"""
type UnmarkFileAsViewedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  """
  Default to a blank commit message.
  """
  BLANK

  """
  Default to the branch's commit messages.
  """
  COMMIT_MESSAGES

  """
  Default to the pull request's body.
  """
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  """
  Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  """
  COMMIT_OR_PR_TITLE

  """
  Default to the pull request's title.
  """
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded fingerprint of the key that signed this object.
  """
  keyFingerprint: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
input UnmarkIssueAsDuplicateInput {
  """
  ID of the issue or pull request currently considered canonical/authoritative/original.
  """
  canonicalId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue or pull request currently marked as a duplicate.
  """
  duplicateId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of UnmarkIssueAsDuplicate
"""
type UnmarkIssueAsDuplicatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue or pull request that was marked as a duplicate.
  """
  duplicate: IssueOrPullRequest
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  starredAt: DateTime!
}

"""
Things that can be starred.
"""
interface Starrable {
  """
  The Node ID of the Starrable object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: IssueOrPullRequest

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Canonical and duplicate belong to different repositories.
  """
  isCrossRepository: Boolean!
}

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The migration source access token.
  """
  sourceAccessToken: String!

  """
  The URL of the organization to migrate.
  """
  sourceOrgUrl: URI!

  """
  The ID of the enterprise the target organization belongs to.
  """
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The name of the target organization.
  """
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new organization migration.
  """
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput {
  """
  The migration source access token.
  """
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to continue the migration on error. Defaults to `true`.
  """
  continueOnError: Boolean

  """
  The signed URL to access the user-uploaded git archive.
  """
  gitArchiveUrl: String

  """
  The GitHub personal access token of the user importing to the target repository.
  """
  githubPat: String

  """
  Whether to lock the source repository.
  """
  lockSource: Boolean

  """
  The signed URL to access the user-uploaded metadata archive.
  """
  metadataArchiveUrl: String

  """
  The ID of the organization that will own the imported repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The name of the imported repository.
  """
  repositoryName: String!

  """
  Whether to skip migrating releases for the repository.
  """
  skipReleases: Boolean

  """
  The ID of the migration source.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["MigrationSource"])

  """
  The URL of the source repository.
  """
  sourceRepositoryUrl: URI

  """
  The visibility of the imported repository.
  """
  targetRepoVisibility: String
}

"""
Autogenerated return type of UnminimizeComment
"""
type UnminimizeCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository migration.
  """
  unminimizedComment: Minimizable
}

"""
Autogenerated input type of UnpinIssue
"""
input UnpinIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to be unpinned
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of UnpinIssue
"""
type UnpinIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  contexts: [StatusContext!]!

  """
  The Node ID of the Status object
  """
  id: ID!

  """
  The issue that was unpinned
  """
  issue: Issue
}

"""
Required status check
"""
type StatusCheckConfiguration {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  """
  The status check context name that must be present on the commit.
  """
  context: String!

  """
  The optional integration ID that this status check must originate from.
  """
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
type UnpinnedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The Node ID of the StatusCheckRollup object
  """
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!
}

"""
The possible states of a thread subscription form action
"""
type StatusCheckRollupContextConnection {
  """
  The number of check runs in this rollup.
  """
  checkRunCount: Int!

  """
  Counts of check runs by state.
  """
  checkRunCountsByState: [CheckRunStateCount!]

  """
  A list of edges.
  """
  edges: [StatusCheckRollupContextEdge]

  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The number of status contexts in this rollup.
  """
  statusContextCount: Int!

  """
  Counts of status contexts by state.
  """
  statusContextCountsByState: [StatusContextStateCount!]

  """
  Identifies the total count of items in the connection.
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  description: String

  """
  The Node ID of the StatusContext object
  """
  id: ID!

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  """
  The number of statuses with this state.
  """
  count: Int!

  """
  The state of a status context.
  """
  state: StatusState!
}

"""
The possible commit status states.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to unresolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  """
  The account number used to identify this Stripe Connect account.
  """
  accountId: String!

  """
  The name of the country or region of an external account, such as a bank
  account, tied to the Stripe Connect account. Will only return a value when
  queried by the maintainer of the associated GitHub Sponsors profile
  themselves, or by an admin of the sponsorable organization.
  """
  billingCountryOrRegion: String

  """
  The name of the country or region of the Stripe Connect account. Will only
  return a value when queried by the maintainer of the associated GitHub
  Sponsors profile themselves, or by an admin of the sponsorable organization.
  """
  countryOrRegion: String

  """
  Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
  """
  isActive: Boolean!

  """
  The GitHub Sponsors profile associated with this Stripe Connect account.
  """
  sponsorsListing: SponsorsListing!

  """
  The URL to access this Stripe Connect account on Stripe's website.
  """
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
type UnresolveReviewThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The thread to resolve.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Identifies the date and time when the object was created.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the UnsubscribedEvent object
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The name of the submodule in .gitmodules (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The path in the superproject that this submodule is located in
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Entities that can be updated.
"""
interface Updatable {
  """
  The path in the superproject that this submodule is located in (Base64-encoded)
  """
  pathRaw: Base64String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  viewerCanUpdate: Boolean!
}

"""
Comments that can be updated.
"""
interface UpdatableComment {
  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of TransferIssue
"""
interface Subscribable {
  """
  The Node ID of the Subscribable object
  """
  id: ID!

  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  """
  The Node ID of the SubscribableThread object
  """
  id: ID!

  """
  Identifies the viewer's thread subscription form action.
  """
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction

  """
  Identifies the viewer's thread subscription status.
  """
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node {
  """
  The Node ID of the issue to be transferred
  """
  allowsForcePushes: Boolean

  """
  Is branch creation a protected operation.
  """
  createdAt: DateTime!

  """
  The Node ID of the SubscribedEvent object
  """
  id: ID!

  """
  The global relay id of the branch protection rule to be updated.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.
  """
  bypassForcePushActorIds: [ID!]

  """
  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.
  """
  bypassPullRequestActorIds: [ID!]

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the TeamDiscussionComment object
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Can admins override branch protection.
  """
  isAdminEnforced: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the TransferredEvent object
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  commitUrl: URI!

  """
  The Node ID of the Tag object
  """
  id: ID!

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String

  """
  A list of User, Team, or App IDs allowed to push to matching branches.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean!

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  """
  How this rule will appear to users.
  """
  name: String

  """
  If true, the rule will fail if the pattern matches.
  """
  negate: Boolean

  """
  The operator to use for matching.
  """
  operator: String!

  """
  The pattern to match with.
  """
  pattern: String!
}

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable {
  """
  The list of required status checks
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Are status checks required to update matching branches.
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Is pushing to matching branches restricted.
  """
  editTeamUrl: URI!

  """
  The Node ID of the Team object
  """
  id: ID!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of UpdateBranchProtectionRule
"""
type UpdateBranchProtectionRulePayload {
  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCheckRun
"""
input UpdateCheckRunInput {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  The node of the check.
  """
  checkRunId: ID! @possibleTypes(concreteTypes: ["CheckRun"])

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  The notification setting that the team has set.
  """
  notificationSetting: TeamNotificationSetting!

  """
  The organization that owns this team.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  Finds and returns the project according to the provided project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  List of projects this team has collaborator access to.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for projects returned from this connection
    """
    filterBy: ProjectV2Filters = {}

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    The query to search projects by.
    """
    query: String = ""
  ): ProjectV2Connection!

  """
  A list of repositories this team has access to.
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The name of the check.
  """
  name: String

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The node ID of the repository.
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    The search string to look for. Repositories will be returned where the name contains your search string.
    """
    query: String
  ): TeamRepositoryConnection!

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of UpdateCheckRun
"""
type UpdateCheckRunPayload {
  """
  The updated check run.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCheckSuitePreferences
"""
input UpdateCheckSuitePreferencesInput {
  """
  The check suite preferences to modify.
  """
  autoTriggerPreferences: [CheckSuiteAutoTriggerPreference!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Ways in which team connections can be ordered.
"""
type UpdateCheckSuitePreferencesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateDiscussionComment
"""
input UpdateDiscussionCommentInput {
  """
  The new contents of the comment body.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion comment to update.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateDiscussionComment
"""
type UpdateDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The modified discussion comment.
  """
  comment: DiscussionComment
}

"""
Autogenerated input type of UpdateDiscussion
"""
input UpdateDiscussionInput {
  """
  The new contents of the discussion body.
  """
  body: String

  """
  The Node ID of a discussion category within the same repository to change this discussion to.
  """
  categoryId: ID @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to update.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The new discussion title.
  """
  title: String
}

"""
Autogenerated return type of UpdateDiscussion
"""
type UpdateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddMemberAuditEntry object
  """
  id: ID!

  """
  The modified discussion.
  """
  discussion: Discussion
}

"""
Autogenerated input type of UpdateEnterpriseAdministratorRole
"""
input UpdateEnterpriseAdministratorRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The login of a administrator whose role is being changed.
  """
  login: String!

  """
  The new role for the Enterprise administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateEnterpriseAdministratorRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of changing the administrator's role.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the allow private repository forking setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamAddRepositoryAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated allow private repository forking setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the allow private repository forking setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
input UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the base repository permission setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The value for the base repository permission setting on the enterprise.
  """
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated base repository permission setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the base repository permission setting.
  """
  message: String
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can change repository visibility setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can change repository visibility setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can change repository visibility setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can change repository visibility setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can create repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Allow members to create internal repositories. Defaults to current value.
  """
  membersCanCreateInternalRepositories: Boolean

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  Allow members to create private repositories. Defaults to current value.
  """
  membersCanCreatePrivateRepositories: Boolean

  """
  Allow members to create public repositories. Defaults to current value.
  """
  membersCanCreatePublicRepositories: Boolean

  """
  When false, allow member organizations to set their own repository creation member privileges.
  """
  membersCanCreateRepositoriesPolicyEnabled: Boolean

  """
  Value for the members can create repositories setting on the enterprise. This
  or the granular public/private/internal allowed fields (but not both) must be provided.
  """
  settingValue: EnterpriseMembersCanCreateRepositoriesSettingValue
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamChangeParentTeamAuditEntry object
  """
  id: ID!

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can create repositories setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can create repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
input UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can delete issues setting.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The value for the members can delete issues setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

  """
  The enterprise with the updated members can delete issues setting.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can delete repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can delete repositories setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can delete repositories setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can delete repositories setting.
  """
  message: String
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The value for the members can invite collaborators setting on the enterprise.
  """
  commentsResourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  commentsUrl: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The enterprise with the updated members can invite collaborators setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  A message confirming the result of updating the members can invite collaborators setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
enum TopicSuggestionDeclineReason {
  """
  The suggested topic is not relevant to the repository.
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussion object
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the enterprise on which to set the members can make purchases setting.
  """
  isPinned: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether or not the discussion is only visible to team members and organization owners.
  """
  isPrivate: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can make purchases setting.
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A message confirming the result of updating the members can make purchases setting.
  """
  message: String
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  team: Team!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the issue to be transferred
  """
  title: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The Node ID of the repository the issue should be transferred to
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can update protected branches setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The value for the members can update protected branches setting on the enterprise.
  """
  viewerCanPin: Boolean!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can update protected branches setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can update protected branches setting.
  """
  message: String
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  authorAssociation: CommentAuthorAssociation!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  bodyVersion: String!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  discussion: TeamDiscussion!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User can subscribe to the thread
  """
  editor: Actor

  """
  The Node ID of the TeamDiscussionComment object
  """
  id: ID!

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  number: Int!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  resourcePath: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  A unique identifier for the client performing the mutation.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  url: URI!
    @deprecated(
      reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
    )

  """
  The ID of the enterprise on which to set the members can view dependency insights setting.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  The enterprise with the updated members can view dependency insights setting.
  """
  enterprise: Enterprise

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
input UpdateEnterpriseOrganizationProjectsSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the organization projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
type UpdateEnterpriseOrganizationProjectsSettingPayload {
  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The full path of the file. (Base64-encoded)
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The Repository the tree entry belongs to
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Entry byte size
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  Number of approving reviews required to update matching branches.
  """
  message: String
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the enterprise where the organization should be transferred.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the organization to transfer.
  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the owner belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization for membership change.
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The role to assume in the organization.
  """
  organizationRole: RoleInOrganization!
}

"""
Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
"""
type UpdateEnterpriseOwnerOrganizationRolePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of changing the owner's organization role.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseProfile
"""
input UpdateEnterpriseProfileInput {
  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The description of the enterprise.
  """
  description: String

  """
  The Enterprise ID to update.
  """
  createdAt: DateTime!

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  """
  No one will receive notifications.
  """
  NOTIFICATIONS_DISABLED

  """
  Everyone will receive notifications when the team is @mentioned.
  """
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  name: String

  """
  The URL of the enterprise's website.
  """
  websiteUrl: String
}

"""
Autogenerated return type of UpdateEnterpriseProfile
"""
type UpdateEnterpriseProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  enterprise: Enterprise
}

"""
Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
"""
input UpdateEnterpriseRepositoryProjectsSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the repository projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveMemberAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
"""
type UpdateEnterpriseRepositoryProjectsSettingPayload {
  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  clientMutationId: String

  """
  The enterprise with the updated repository projects setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the repository projects setting.
  """
  message: String
}

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UpdateEnterpriseTeamDiscussionsSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the team discussions setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the team discussions setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
"""
type UpdateEnterpriseTeamDiscussionsSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated team discussions setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the team discussions setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The ID of the enterprise on which to set the two factor authentication required setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The value for the two factor authentication required setting on the enterprise.
  """
  settingValue: EnterpriseEnabledSettingValue!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  createdAt: PreciseDateTime!

  """
  The Node ID of the TeamRemoveRepositoryAuditEntry object
  """
  id: ID!

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  clientMutationId: String

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the two factor authentication required setting.
  """
  message: String
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UpdateEnvironmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The wait timer in minutes.
  """
  waitTimer: Int
}

"""
Autogenerated return type of UpdateEnvironment
"""
type UpdateEnvironmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated environment.
  """
  environment: Environment
}

"""
Autogenerated input type of UpdateIpAllowListEnabledSetting
"""
input UpdateIpAllowListEnabledSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the owner on which to set the IP allow list enabled setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The Node ID of the UnlockedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The value for the IP allow list enabled setting.
  """
  settingValue: IpAllowListEnabledSettingValue!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateIpAllowListEnabledSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list owner on which the setting was updated.
  """
  owner: IpAllowListOwner
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  """
  The User cannot subscribe or unsubscribe to the thread
  """
  NONE

  """
  The User can subscribe to the thread
  """
  SUBSCRIBE

  """
  The User can unsubscribe to the thread
  """
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  """
  The subscription status is currently disabled.
  """
  DISABLED

  """
  The User is never notified because they are ignoring the list
  """
  IGNORING_LIST

  """
  The User is never notified because they are ignoring the thread
  """
  IGNORING_THREAD

  """
  The User is not recieving notifications from this thread
  """
  NONE

  """
  The User is notified becuase they are watching the list
  """
  SUBSCRIBED_TO_LIST

  """
  The User is notified because they are subscribed to the thread
  """
  SUBSCRIBED_TO_THREAD

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_EVENTS

  """
  The User is notified because they chose custom settings for this thread.
  """
  SUBSCRIBED_TO_THREAD_TYPE

  """
  The subscription status is currently unavailable.
  """
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  """
  The Node ID of the Topic object
  """
  id: ID!

  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to update.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
    """
    sponsorableOnly: Boolean = false

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

"""
Autogenerated return type of UpdateIpAllowListEntry
"""
type UpdateIpAllowListEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was updated.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
input UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The ID of the owner.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  NOT_RELEVANT @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The repository the project is no longer linked to.
  """
  PERSONAL_PREFERENCE @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  TOO_GENERAL @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  TOO_SPECIFIC @deprecated(reason: "Suggested topics are no longer supported Removal on 2024-04-01 UTC.")
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise where the organization should be transferred.
  """
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to transfer.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization for which a transfer was initiated.
  """
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to create labels if they don't exist in the target repository (matched by name)
  """
  createLabelsIfMissing: Boolean = false

  """
  The Node ID of the issue to be transferred
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list owner on which the setting was updated.
  """
  owner: IpAllowListOwner
}

"""
Autogenerated input type of UpdateIssueComment
"""
input UpdateIssueCommentInput {
  """
  The updated text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  fromRepository: Repository

  """
  The Node ID of the TransferredEvent object
  """
  id: ID!

  """
  The ID of the IssueComment to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of UpdateIssueComment
"""
type UpdateIssueCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The updated comment.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  entries: [TreeEntry!]

  """
  The Node ID of the Tree object
  """
  id: ID!

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
input UpdateIssueInput {
  """
  An array of Node IDs of users for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Number of lines in the file.
  """
  clientMutationId: String

  """
  The ID of the Issue to modify.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  Entry file name. (Base64-encoded)
  """
  nameRaw: Base64String!

  """
  Entry file object.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

  """
  The full path of the file. (Base64-encoded)
  """
  pathRaw: Base64String

  """
  The Repository the tree entry belongs to
  """
  projectIds: [ID!]

  """
  Entry byte size
  """
  size: Int!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The title for the issue.
  """
  title: String
}

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the ProjectV2Item to unarchive.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project to archive the item from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item unarchived from the project.
  """
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UpdateIssuePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  createdAt: DateTime!

  """
  The Node ID of the UnassignedEvent object
  """
  id: ID!

  """
  The issue.
  """
  issue: Issue
}

"""
Autogenerated input type of UpdateLabel
"""
input UpdateLabelInput @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  A 6 character hex code, without the leading #, identifying the updated color of the label.
  """
  color: String

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The Node ID of the label to be updated.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!
}

  """
  The Node ID of the UnsubscribedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlabeledEvent object
  """
  id: ID!

  """
  The updated name of the label.
  """
  name: String
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the repository to unlink from the project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository the project is no longer linked to.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to unlink from the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The ID of the team to unlink from the project.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team the project is unlinked from
  """
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
type UpdateLabelPayload @preview(toggledBy: "bane-preview") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated label.
  """
  label: Label
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
input UpdateNotificationRestrictionSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the owner on which to set the restrict notifications setting.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  createdAt: DateTime!

  """
  The Node ID of the UnlockedEvent object
  """
  id: ID!

  """
  The value for the restrict notifications setting.
  """
  settingValue: NotificationRestrictionSettingValue!
}

"""
Autogenerated return type of UpdateNotificationRestrictionSetting
"""
type UpdateNotificationRestrictionSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner on which the setting was updated.
  """
  owner: VerifiableDomainOwner
}

"""
Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
input UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins override branch protection.
  """
  forkingEnabled: Boolean!

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  Can admins override branch protection.
  """
  requireLastPushApproval: Boolean

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to unmark as a template.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project.
  """
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  duplicate: IssueOrPullRequest

  """
  The Node ID of the UnmarkedAsDuplicateEvent object
  """
  id: ID!

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  organization: Organization
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  The id of the pinned issue that was unpinned
  """
  id: ID

  """
  The issue that was unpinned
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnpinnedEvent object
  """
  id: ID!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of UnsubscribeFromNotifications
"""
input UnsubscribeFromNotificationsInput
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs of the objects to unsubscribe from.
  """
  ids: [ID!]!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UnsubscribeFromNotifications
"""
type UnsubscribeFromNotificationsPayload
  @requiredCapabilities(requiredCapabilities: ["access_internal_graphql_notifications"]) {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  createdAt: DateTime!

  """
  The Node ID of the UnsubscribedEvent object
  """
  id: ID!

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  Can admins override branch protection.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing.
  """
  lockAllowsFetchAndMerge: Boolean

  """
  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
  """
  lockBranch: Boolean

  """
  The glob-like pattern used to determine matching branches.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  Whether the most recent push must be approved by someone other than the person who pushed it
  """
  requireLastPushApproval: Boolean

  """
  Number of approving reviews required to update matching branches.
  """
  clientMutationId: String

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

"""
Autogenerated input type of UpdateProjectV2DraftIssue
"""
input UpdateProjectV2DraftIssueInput {
  """
  The IDs of the assignees of the draft issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body of the draft issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the draft issue to update.
  """
  draftIssueId: ID! @possibleTypes(concreteTypes: ["DraftIssue"])

  """
  The title of the draft issue.
  """
  title: String
}

"""
Autogenerated return type of UpdateProjectV2DraftIssue
"""
type UpdateProjectV2DraftIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The draft issue updated in the project.
  """
  draftIssue: DraftIssue
}

"""
Autogenerated input type of UpdateProjectV2
"""
input UpdateProjectV2Input {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Set the project to closed or open.
  """
  closed: Boolean

  """
  The ID of the Project to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  Set the project to public or private.
  """
  public: Boolean

  """
  Set the readme description of the project.
  """
  readme: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  shortDescription: String

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  title: String
}

"""
Autogenerated input type of UpdateProjectV2ItemFieldValue
"""
input UpdateProjectV2ItemFieldValueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the field to be updated.
  """
  fieldId: ID!
    @possibleTypes(
      concreteTypes: ["ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"]
      abstractType: "ProjectV2FieldConfiguration"
    )

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])

  """
  The value which will be set on the field.
  """
  value: ProjectV2FieldValue!
}

"""
Autogenerated return type of UpdateProjectV2ItemFieldValue
"""
type UpdateProjectV2ItemFieldValuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of UpdateProjectV2ItemPosition
"""
input UpdateProjectV2ItemPositionInput {
  """
  The ID of the item to position this item after. If omitted or set to null the item will be moved to top.
  """
  afterId: ID @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be moved.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2ItemPosition
"""
type UpdateProjectV2ItemPositionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The items in the new order
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ItemConnection
}

"""
Autogenerated return type of UpdateProjectV2
"""
type UpdateProjectV2Payload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Project.
  """
  projectV2: ProjectV2
}

"""
Autogenerated input type of UpdatePullRequestBranch
"""
input UpdatePullRequestBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The head ref oid for the upstream branch.
  """
  expectedHeadOid: GitObjectID

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdatePullRequestBranch
"""
type UpdatePullRequestBranchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequest
"""
input UpdatePullRequestInput {
  """
  An array of Node IDs of users for this pull request.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository.
  """
  baseRefName: String

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of Node IDs of labels for this pull request.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean

  """
  The Node ID of the milestone for this pull request.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this pull request.
  """
  projectIds: [ID!]

  """
  The value for the allow private repository forking policy on the enterprise.
  """
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The target state of the pull request.
  """
  state: PullRequestUpdateState

  """
  The title of the pull request.
  """
  title: String
}

"""
Autogenerated return type of UpdatePullRequest
"""
type UpdatePullRequestPayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequestReviewComment
"""
input UpdatePullRequestReviewCommentInput {
  """
  The text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the comment to modify.
  """
  pullRequestReviewCommentId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of UpdatePullRequestReviewComment
"""
type UpdatePullRequestReviewCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of UpdatePullRequestReview
"""
input UpdatePullRequestReviewInput {
  """
  The contents of the pull request review body.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of UpdatePullRequestReview
"""
type UpdatePullRequestReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of UpdateRef
"""
input UpdateRefInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Permit updates of branch Refs that are not fast-forwards?
  """
  force: Boolean = false

  """
  The GitObjectID that the Ref shall be updated to target.
  """
  oid: GitObjectID!

  """
  The Node ID of the Ref to be updated.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of UpdateRef
"""
type UpdateRefPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Ref.
  """
  ref: Ref
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The new name of the repository.
  """
  name: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  The name of the ruleset.
  """
  name: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used.
  """
  privacyLevel: SponsorshipPrivacy = PUBLIC

  """
  Whether the sponsor should receive email updates from the sponsorable.
  """
  receiveEmails: Boolean = true

  """
  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given.
  """
  sponsorId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsor")

  """
  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given.
  """
  sponsorLogin: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  sponsorableId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "Sponsorable")

  """
  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdateSponsorshipPreferences
"""
type UpdateSponsorshipPreferencesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The sponsorship that was updated.
  """
  sponsorship: Sponsorship
}

"""
Autogenerated input type of UpdateSubscription
"""
input UpdateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  state: SubscriptionState!

  """
  The Node ID of the subscribable object to modify.
  """
  subscribableId: ID!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )
}

"""
Autogenerated return type of UpdateSubscription
"""
type UpdateSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The input subscribable entity.
  """
  subscribable: Subscribable
}

"""
Autogenerated input type of UpdateTeamDiscussionComment
"""
input UpdateTeamDiscussionCommentInput {
  """
  The updated text of the comment.
  """
  body: String!

  """
  The current version of the body content.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of UpdateTeamDiscussionComment
"""
type UpdateTeamDiscussionCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated comment.
  """
  teamDiscussionComment: TeamDiscussionComment
}

"""
Autogenerated input type of UpdateTeamDiscussion
"""
input UpdateTeamDiscussionInput {
  """
  The updated text of the discussion.
  """
  body: String

  """
  The current version of the body content. If provided, this update operation
  will be rejected if the given version does not match the latest version on the server.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])

  """
  If provided, sets the pinned state of the updated discussion.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateTeamDiscussion
"""
type UpdateTeamDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated discussion.
  """
  teamDiscussion: TeamDiscussion
}

"""
Autogenerated input type of UpdateTeamReviewAssignment
"""
input UpdateTeamReviewAssignmentInput @preview(toggledBy: "stone-crop-preview") {
  """
  The algorithm to use for review assignment
  """
  algorithm: TeamReviewAssignmentAlgorithm = ROUND_ROBIN

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Turn on or off review assignment
  """
  enabled: Boolean!

  """
  Whether deployments to this environment can be approved by the user who created the deployment.
  """
  preventSelfReview: Boolean

  """
  The ids of users or teams that can approve deployments to this environment
  """
  excludedTeamMemberIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The Node ID of the team to update review assignments of
  """
  id: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  Notify the entire team of the PR if it is delegated
  """
  notifyTeam: Boolean = true

  """
  The number of team members to assign
  """
  teamMemberCount: Int = 1
}

"""
Autogenerated return type of UpdateTeamReviewAssignment
"""
type UpdateTeamReviewAssignmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team that was modified
  """
  team: Team
}

"""
Autogenerated input type of UpdateTeamsRepository
"""
input UpdateTeamsRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Permission that should be granted to the teams.
  """
  permission: RepositoryPermission!

  """
  Repository ID being granted access to.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  A list of teams being granted access. Limit: 10
  """
  teamIds: [ID!]! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UpdateTeamsRepository
"""
type UpdateTeamsRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was updated.
  """
  repository: Repository

  """
  The teams granted permission on the repository.
  """
  teams: [Team!]
}

"""
Autogenerated input type of UpdateTopics
"""
input UpdateTopicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  An array of topic names.
  """
  topicNames: [String!]!
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization on which to set the web commit signoff setting.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  Enable signoff on web-based commits for repositories in the organization?
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  The organization with the updated web commit signoff setting.
  """
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  """
  Branch can pull changes from its upstream repository
  """
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdatePatreonSponsorability
"""
input UpdatePatreonSponsorabilityInput {
  """
  The user's public profile company.
  """
  company: String

  """
  Whether Patreon tiers should be shown on the GitHub Sponsors profile page,
  allowing potential sponsors to make their payment through Patreon instead of GitHub.
  """
  enablePatreonSponsorships: Boolean!

  """
  The username of the organization with the GitHub Sponsors profile, if any.
  Defaults to the GitHub Sponsors profile for the authenticated user if omitted.
  """
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdatePatreonSponsorability
"""
type UpdatePatreonSponsorabilityPayload {
  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  The GitHub Sponsors profile.
  """
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  """
  A list of the Gists the user has created.
  """
  gists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  The description of project.
  """
  body: String

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  The name of project.
  """
  name: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  Whether or not this user is a GitHub Developer Program member.
  """
  isDeveloperProgramMember: Boolean!

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  isFollowingViewer: Boolean!

  """
  The collaborators to update.
  """
  collaborators: [ProjectV2Collaborator!]!

  """
  The ID of the project to update the collaborators for.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  """
  Whether or not the user has marked themselves as for hire.
  """
  isHireable: Boolean!

  """
  The collaborators granted a role
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A new description for the repository. Pass an empty string to erase the existing description.
  """
  description: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Whether the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The update branch method to use. If omitted, defaults to 'MERGE'
  """
  updateMethod: PullRequestBranchUpdateMethod
}

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  Whether or not this user is the viewing user.
  """
  isViewer: Boolean!

  """
  A list of issue comments made by this user.
  """
  issueComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  A list of issues associated with this user.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  Indicates if the repository should have the discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean

  """
  Indicates if the repository should have the issues feature enabled.
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  """
  A list of actors that are allowed to bypass rules in this ruleset.
  """
  bypassActors: [RepositoryRulesetBypassActorInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list of conditions for this ruleset
  """
  conditions: RepositoryRuleConditionsInput

  """
  The enforcement level for this ruleset
  """
  enforcement: RuleEnforcement

  """
  The name of the ruleset.
  """
  name: String

  """
  The global relay id of the repository ruleset to be updated.
  """
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])

  """
  The list of rules for this ruleset
  """
  rules: [RepositoryRuleInput!]

  """
  The target of the ruleset.
  """
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Ruleset.
  """
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates if the repository should require signoff on web-based commits.
  """
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of updating the web commit signoff setting.
  """
  message: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
Autogenerated input type of UpdateUserList
"""
input UpdateUserListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the list
  """
  description: String

  """
  Whether or not the list is private
  """
  isPrivate: Boolean

  """
  The ID of the list to update.
  """
  listId: ID! @possibleTypes(concreteTypes: ["UserList"])

  """
  The name of the list
  """
  name: String
}

"""
Autogenerated return type of UpdateUserList
"""
type UpdateUserListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The list that was just updated
  """
  list: UserList
}

"""
Autogenerated input type of UpdateUserListsForItem
"""
input UpdateUserListsForItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item to add to the list
  """
  itemId: ID! @possibleTypes(concreteTypes: ["Repository"], abstractType: "UserListItems")

  """
  The lists to which this item should belong
  """
  listIds: [ID!]! @possibleTypes(concreteTypes: ["UserList"])

  """
  The suggested lists to create and add this item to
  """
  suggestedListIds: [ID!] @possibleTypes(concreteTypes: ["UserListSuggestion"])
}

"""
Autogenerated return type of UpdateUserListsForItem
"""
type UpdateUserListsForItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was added
  """
  item: UserListItems

  """
  The lists to which this item belongs
  """
  lists: [UserList!]

  """
  The user who owns the lists
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection

  """
  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
  """
  estimatedNextSponsorsPayoutInCents: Int!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether the given account is sponsoring this user/organization.
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether the given account is sponsoring this user/organization.
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  The Node ID of the User object
  """
  id: ID!

    """
    Returns the last _n_ elements from the list.
    """
    primarySubjectId: ID
  ): Hovercard!

  """
  The Node ID of the User object
  """
  id: ID!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  isFollowingViewer: Boolean!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  isSponsoredBy(
    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether the given account is sponsoring this user/organization.
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  Whether the given account is sponsoring this user/organization.
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  Calculate how much each sponsor has ever paid total to this maintainer via
  GitHub Sponsors. Does not include sponsorships paid via Patreon.
  """
  lifetimeReceivedSponsorshipValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for results returned from the connection.
    """
    orderBy: SponsorAndLifetimeValueOrder = {field: SPONSOR_LOGIN, direction: ASC}
  ): SponsorAndLifetimeValueConnection!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """
    The login of the organization to match verified domains from.
    """
    login: String!
  ): [String!]!

  """
  A list of organizations the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the User's organizations.
    """
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

  """
  Find a project by number.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  A user-curated list of repositories
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListConnection!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
  """
  monthlyEstimatedSponsorsIncomeInCents: Int!

  """
  The user's public profile name.
  """
  name: String

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Find a project by number.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Find a project by number.
  """
  projectV2(
    """
    The project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing user's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing user's projects
  """
  projectsUrl: URI!

  """
  A list of projects under the owner.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = {field: NUMBER, direction: DESC}

    """
    A project to search for under the the owner.
    """
    query: String
  ): ProjectV2Connection!

  """
  The user's profile pronouns
  """
  pronouns: String

  """
  A list of public keys associated with this user.
  """
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicKeyConnection!

  """
  A list of pull requests associated with this user.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they are archived and not maintained
    """
    isArchived: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A list of repositories that the user recently contributed to.
  """
  repositoriesContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssues: Boolean

    """
    If true, include user repositories
    """
    includeUserRepositories: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  Replies this user has saved
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The field to order saved replies by.
    """
    orderBy: SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): SavedReplyConnection

  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SocialAccountConnection!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Filter activities to only the specified actions.
    """
    actions: [SponsorsActivityAction!] = []

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship.
    """
    includeAsSponsor: Boolean = false

    """
    Whether or not to include private activities in the result set. Defaults to including public and private activities.
    """
    includePrivate: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given.
    """
    period: SponsorsActivityPeriod = MONTH

    """
    Filter activities to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter activities to those that occurred before this time.
    """
    until: DateTime
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
  """
  sponsorshipForViewerAsSponsor(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
  """
  sponsorshipForViewerAsSponsorable(
    """
    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled.
    """
    activeOnly: Boolean = true
  ): Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  The sponsorships where this user or organization is the maintainer receiving the funds.
  """
  sponsorshipsAsMaintainer(
    """
    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The sponsorships where this user or organization is the funder.
  """
  sponsorshipsAsSponsor(
    """
    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
    """
    activeOnly: Boolean = true

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins.
    """
    maintainerLogins: [String!]

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  Suggested names for user lists
  """
  suggestedListNames: [UserListSuggestion!]!

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder!

    """
    How far back in time to fetch contributed repositories
    """
    since: DateTime
  ): RepositoryConnection!

  """
  The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
  spent on GitHub to fund sponsorships. Only returns a value when viewed by the
  user themselves or by a user who can manage sponsorships for the requested organization.
  """
  totalSponsorshipAmountAsSponsorInCents(
    """
    Filter payments to those that occurred on or after this time.
    """
    since: DateTime

    """
    Filter payments to those made to the users or organizations with the specified usernames.
    """
    sponsorableLogins: [String!] = []

    """
    Filter payments to those that occurred before this time.
    """
    until: DateTime
  ): Int

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Whether or not the viewer is able to follow the user.
  """
  viewerCanFollow: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  A list of repositories the given user is watching.
  """
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have issues enabled
    """
    hasIssuesEnabled: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy. Internal
    repositories are considered private; consider using the visibility argument
    if only internal repositories are needed. Cannot be combined with the
    visibility argument.
    """
    privacy: RepositoryPrivacy

    """
    If non-null, filters repositories according to visibility. Cannot be combined with the privacy argument.
    """
    visibility: RepositoryVisibility
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration {
  """
  The user was blocked for 1 day
  """
  ONE_DAY

  """
  The user was blocked for 30 days
  """
  ONE_MONTH

  """
  The user was blocked for 7 days
  """
  ONE_WEEK

  """
  The user was blocked permanently
  """
  PERMANENT

  """
  The user was blocked for 3 days
  """
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Number of days that the user was blocked for.
  """
  blockDuration: UserBlockDuration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The Node ID of the UserBlockedEvent object
  """
  id: ID!

  """
  The user who was blocked.
  """
  subject: User
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was deleted.
  """
  deletedAt: DateTime

  """
  The actor who deleted this content
  """
  deletedBy: Actor

  """
  A summary of the changes for this edit
  """
  diff: String

  """
  When this content was edited
  """
  editedAt: DateTime!

  """
  The actor who edited this content
  """
  editor: Actor

  """
  The Node ID of the UserContentEdit object
  """
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection {
  """
  A list of edges.
  """
  edges: [UserContentEditEdge]

  """
  A list of nodes.
  """
  nodes: [UserContentEdit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserContentEdit
}

"""
Represents a user.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata {
  """
  Boolean to identify primary emails
  """
  primary: Boolean

  """
  Type of email
  """
  type: String

  """
  Email id
  """
  value: String!
}

"""
A user-curated list of repositories
"""
type UserList implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description of this list
  """
  description: String

  """
  The Node ID of the UserList object
  """
  id: ID!

  """
  Whether or not this list is private
  """
  isPrivate: Boolean!

  """
  The items associated with this list
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserListItemsConnection!

  """
  The date and time at which this list was created or last had items added to it
  """
  lastAddedAt: DateTime!

  """
  The name of this list
  """
  name: String!

  """
  The slug of this list
  """
  slug: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user to which this list belongs
  """
  user: User!
}

"""
The connection type for UserList.
"""
type UserListConnection {
  """
  A list of edges.
  """
  edges: [UserListEdge]

  """
  A list of nodes.
  """
  nodes: [UserList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserList
}

"""
Types that can be added to a user list.
"""
union UserListItems = Repository

"""
The connection type for UserListItems.
"""
type UserListItemsConnection {
  """
  A list of edges.
  """
  edges: [UserListItemsEdge]

  """
  A list of nodes.
  """
  nodes: [UserListItems]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserListItemsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserListItems
}

"""
Represents a suggested user list.
"""
type UserListSuggestion {
  """
  The ID of the suggested user list
  """
  id: ID

  """
  The name of the suggested user list
  """
  name: String
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  The Node ID of the UserStatus object
  """
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection {
  """
  A list of edges.
  """
  edges: [UserStatusEdge]

  """
  A list of nodes.
  """
  nodes: [UserStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user statuses by.
  """
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField {
  """
  Order user statuses by when they were updated.
  """
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The DNS host name that should be used for verification.
  """
  dnsHostName: URI

  """
  The unicode encoded domain.
  """
  domain: URI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!

  """
  The Node ID of the VerifiableDomain object
  """
  id: ID!

  """
  Whether or not the domain is approved.
  """
  isApproved: Boolean!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """
  Whether or not the domain is verified.
  """
  isVerified: Boolean!

  """
  The owner of the domain.
  """
  owner: VerifiableDomainOwner!

  """
  The punycode encoded domain.
  """
  punycodeEncodedDomain: URI!

  """
  The time that the current verification token will expire.
  """
  tokenExpirationTime: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The current verification token for the domain.
  """
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection {
  """
  A list of edges.
  """
  edges: [VerifiableDomainEdge]

  """
  A list of nodes.
  """
  nodes: [VerifiableDomain]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order verifiable domains by.
  """
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField {
  """
  Order verifiable domains by their creation date.
  """
  CREATED_AT

  """
  Order verifiable domains by the domain name.
  """
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner = Enterprise | Organization

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to verify.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was verified.
  """
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Identifies the user who is related to this context.
  """
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable {
  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node & UniformResourceLocatable {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Node ID of the Workflow object
  """
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The HTTP path for this workflow
  """
  resourcePath: URI!

  """
  The runs of the workflow.
  """
  runs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the connection
    """
    orderBy: WorkflowRunOrder = {field: CREATED_AT, direction: DESC}
  ): WorkflowRunConnection!

  """
  The state of the workflow.
  """
  state: WorkflowState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow
  """
  url: URI!
}

"""
A workflow that must run for this rule to pass
"""
type WorkflowFileReference {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow that must run for this rule to pass
"""
input WorkflowFileReferenceInput {
  """
  The path to the workflow file
  """
  path: String!

  """
  The ref (branch or tag) of the workflow file to use
  """
  ref: String

  """
  The ID of the repository where the workflow is defined
  """
  repositoryId: Int!

  """
  The commit SHA of the workflow file to use
  """
  sha: String
}

"""
A workflow run.
"""
type WorkflowRun implements Node & UniformResourceLocatable {
  """
  The check suite this workflow run belongs to.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The log of deployment reviews
  """
  deploymentReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewConnection!

  """
  The event that triggered the workflow run
  """
  event: String!

  """
  The workflow file
  """
  file: WorkflowRunFile

  """
  The Node ID of the WorkflowRun object
  """
  id: ID!

  """
  The pending deployment requests of all check runs in this workflow run
  """
  pendingDeploymentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentRequestConnection!

  """
  The HTTP path for this workflow run
  """
  resourcePath: URI!

  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow run
  """
  url: URI!

  """
  The workflow executed in this workflow run.
  """
  workflow: Workflow!
}

"""
The connection type for WorkflowRun.
"""
type WorkflowRunConnection {
  """
  A list of edges.
  """
  edges: [WorkflowRunEdge]

  """
  A list of nodes.
  """
  nodes: [WorkflowRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkflowRunEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkflowRun
}

"""
An executed workflow file for a workflow run.
"""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  """
  The Node ID of the WorkflowRunFile object
  """
  id: ID!

  """
  The path of the workflow file relative to its repository.
  """
  path: String!

  """
  The direct link to the file in the repository which stores the workflow file.
  """
  repositoryFileUrl: URI!

  """
  The repository name and owner which stores the workflow file.
  """
  repositoryName: URI!

  """
  The HTTP path for this workflow run file
  """
  resourcePath: URI!

  """
  The parent workflow run execution for this file.
  """
  run: WorkflowRun!

  """
  The HTTP URL for this workflow run file
  """
  url: URI!

  """
  If the viewer has permissions to push to the repository which stores the workflow.
  """
  viewerCanPushRepository: Boolean!

  """
  If the viewer has permissions to read the repository which stores the workflow.
  """
  viewerCanReadRepository: Boolean!
}

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
input WorkflowRunOrder {
  """
  The direction in which to order workflow runs by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order workflows.
  """
  field: WorkflowRunOrderField!
}

"""
Properties by which workflow run connections can be ordered.
"""
enum WorkflowRunOrderField {
  """
  Order workflow runs by most recently created
  """
  CREATED_AT
}

"""
The possible states for a workflow.
"""
enum WorkflowState {
  """
  The workflow is active.
  """
  ACTIVE

  """
  The workflow was deleted from the git repository.
  """
  DELETED

  """
  The workflow was disabled by default on a fork.
  """
  DISABLED_FORK

  """
  The workflow was disabled for inactivity in the repository.
  """
  DISABLED_INACTIVITY

  """
  The workflow was disabled manually.
  """
  DISABLED_MANUALLY
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
type WorkflowsParameters {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReference!]!
}

"""
Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
"""
input WorkflowsParametersInput {
  """
  Workflows that must pass for this rule to pass.
  """
  workflows: [WorkflowFileReferenceInput!]!
}

"""
A valid x509 certificate string
"""
scalar X509Certificate
